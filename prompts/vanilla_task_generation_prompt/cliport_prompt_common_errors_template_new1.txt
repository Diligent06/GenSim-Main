Before writing the code for the task "TASK_NAME_TEMPLATE". Here are some runtime errors that you do not want to make. Please confirm that you understand these runtime errors.

"""
AttributeError: 'Environment' object has no attribute 'get_object_info'
TypeError: 'NoneType' object is not iterable
pybullet.error: Cannot load URDF file.
pybullet.error: Invalid input: expected positionA [x,y,z], orientationA [x,y,z,w], positionB, orientationB.
AttributeError: 'Environment' object has no attribute 'stack_objects'
ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (2,) + inhomogeneous part.
IndexError: tuple index out of range
AttributeError: module 'cliport.utils.utils' has no attribute 'COLOR_NAMES'
AttributeError: 'BallSortingPyramid' object has no attribute 'add_goals'
TypeError: 'NoneType' object is not iterable

TypeError: 'float' object is not subscriptable
TypeError: object of type 'int' has no len()
AttributeError: 'ColorfulBoxSorting' object has no attribute 'create_goal'
IndexError: list index out of range

SyntaxError: unmatched '}'
ValueError: operands could not be broadcast together with shapes (5,) (1,3) 
"""


You do not want to make mistakes such as
- using assets (urdfs) that do not exist
- use ambiguous language descriptions as goals. For instance, "place the colored blocks into the matching colored bowls" with one goal and sparse reward as the task instead of adding subgoal "place blue block into blue bowl" and give continuous reward. 
- `matches` in the goal has wrong dimensions. It should have the same dimensions as number of objects (N) multiplied by the number of goal poses (M). Usually it is N by M.
- have vector dimension problem such as `np.random.choice(box_size)` or `box_size / 2` where `box_size` is a tuple and not an int
- make too large an object for stacking or make the task objects invisible for picking. 
- accessing index out of bound `pallet_pose[2]` for `pallet_pose`.  `pallet_pose=get_random_pose` returns a tuple (translation, rotation). It does not have 3rd component. Similarly accessing `container_pose[2]` or `box_pose[2]` would cause errors as well. Since it's a tuple, try to modify it in-place will also trigger errors.
- forget to replace str using `fill_template()` for urdfs with template such as `cylinder-template.urdf`. `ball-template.urdf`, `line-template.urf`. 
- use `self.ee = Spatula()` as a function when doing pushing tasks, which is incorrect. It should be `self.ee = Spatula`.
- forget to compute target poses `targ_poses` for matching. Do not use object IDs for poses.
- change colors of complex objects such as `zone`. You can only change color of teomplate primitive such as `cylinder-template`.
- mistakenly use `random_pose` for target pose. Design target poses based on task objectives.
- add only one or fewer language goals which causes language-motion inconsistentcy. Note that the language goals usually are the same number as the pick and place goals.
