import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderTowerPrecisionPlacement(Task):
    """
    Stack five differently colored cylindrical objects onto a designated circular zone,
    ensuring each cylinder is precisely centered on the one below to form a stable, straight tower.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to stack 5 cylinders, so 10 steps should be sufficient
        self.lang_template = "stack the {color} cylinder on top of the tower"
        self.task_completed_desc = "done stacking the cylinder tower."
        self.ee = Suction  # We need to move objects on the Z axis, so Suction is appropriate

    def reset(self, env):
        super().reset(env)

        # Define the size of the zone where the cylinders will be stacked
        zone_size = (0.1, 0.1, 0)  # Diameter of 0.1m and negligible height
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Define colors for the cylinders
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_rgb = [utils.COLORS[color] for color in colors]

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.04, 0.04, 0.08)  # Diameter of 0.04m and height of 0.08m
        cylinders = []
        for i, color in enumerate(colors):
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)
            replace = {
                'COLOR': color_rgb[i],
                'SIZE': cylinder_size
            }
            # Replace the template URDF with the specific color and size
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append(cylinder_id)

            # Define the language goal for stacking this cylinder
            language_goal = self.lang_template.format(color=color)

            # The target pose for each cylinder is on top of the previous one, centered in the zone
            # For the first cylinder, the target pose is the zone pose
            if i == 0:
                target_pose = zone_pose
            else:
                # For subsequent cylinders, the target pose is above the previous cylinder
                # We use the same x, y coordinates as the zone and increment the z coordinate
                target_pose = (zone_pose[0], (0, 0, zone_pose[1][2] + i * cylinder_size[2]))

            # Add the goal for this cylinder
            self.add_goal(
                objs=[cylinder_id],
                matches=np.ones((1, 1)),
                targ_poses=[target_pose],
                replace=False,
                rotations=False,  # Cylinders are rotationally symmetric, so we don't need to match rotation
                metric='pose',
                params=None,
                step_max_reward=1 / len(colors),  # The reward is evenly distributed across all cylinders
                language_goal=language_goal
            )

        # Set the primitive to be used for this task
        self.primitive = primitives.push  # We use push primitive with suction gripper to stack cylinders