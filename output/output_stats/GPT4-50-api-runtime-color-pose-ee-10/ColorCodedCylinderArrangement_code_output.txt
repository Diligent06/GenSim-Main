import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedCylinderArrangement(Task):
    """Arrange a set of six colored cylinders into a hexagonal formation, matching each cylinder to a specific zone on the pallet, without stacking them."""

    def __init__(self):
        super().__init__()
        self.max_steps = 12  # We expect to call self.add_goal six times, so we set max_steps to twice that number
        self.lang_template = "put the {color} cylinder in the matching {color} zone"
        self.task_completed_desc = "done arranging the cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define cylinder size and colors
        cylinder_size = (0.05, 0.05, 0.1)  # Diameter, Diameter, Height
        colors = ['red', 'green', 'blue', 'orange', 'yellow', 'purple']
        color_names = ['red', 'green', 'blue', 'orange', 'yellow', 'purple']

        # Add pallet
        pallet_size = (0.3, 0.3, 0.02)  # Length, Width, Height
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Add cylinders and zones
        cylinder_urdf_template = 'cylinder/cylinder-template.urdf'
        zone_urdf = 'zone/zone.urdf'
        for i, color in enumerate(colors):
            # Add cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': utils.COLORS[color]}
            cylinder_urdf = self.fill_template(cylinder_urdf_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

            # Add zone
            zone_pose = self.get_random_pose(env, cylinder_size)
            zone_id = env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[color])

            # Define the language goal
            language_goal = self.lang_template.format(color=color_names[i])

            # Add goal for each cylinder to be in the matching color zone
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/6,
                          language_goal=language_goal)

        # Note: We do not need to use rotations since the cylinders are symmetrical along the vertical axis
        # and we are not stacking them, so the orientation is not important as long as they are upright.