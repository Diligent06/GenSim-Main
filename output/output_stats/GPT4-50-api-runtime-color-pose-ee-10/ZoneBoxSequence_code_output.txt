import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ZoneBoxSequence(Task):
    """Arrange a sequence of boxes with incremental sizes from smallest to largest into a designated goal zone, ensuring that each box's color matches the colored boundary of the zone."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to call self.add_goal twice, so we set max_steps to twice that number
        self.lang_template = "place the {color} box in the {color} zone"
        self.task_completed_desc = "done arranging the boxes."
        self.ee = Suction  # We need to move boxes on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the number of boxes and their incremental sizes
        n_boxes = 3
        box_sizes = [(0.05 + i * 0.02, 0.05 + i * 0.02, 0.05) for i in range(n_boxes)]

        # Define the colors for the boxes and the corresponding zones
        box_colors = ['red', 'green', 'blue']
        zone_colors = ['red', 'green', 'blue']

        # Add goal zone with the same color as the box
        zone_urdf = 'zone/zone.urdf'
        zone_size = (0.2, 0.2, 0)  # Fixed size for the zone
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[zone_colors[0]])

        # Add boxes with incremental sizes
        box_template = 'box/box-template.urdf'
        boxes = []
        for i in range(n_boxes):
            # Get a random pose for the box
            box_pose = self.get_random_pose(env, box_sizes[i])

            # Fill in the template URDF with the box size and color
            replace = {'SIZE': box_sizes[i], 'COLOR': utils.COLORS[box_colors[i]]}
            box_urdf = self.fill_template(box_template, replace)

            # Add the box to the environment
            box_id = env.add_object(box_urdf, box_pose)
            boxes.append(box_id)

        # Add goals for each box to be placed in the zone with matching color
        for i, box_id in enumerate(boxes):
            # Define the language goal for placing the box
            language_goal = self.lang_template.format(color=box_colors[i])

            # Add the goal for the box to be placed in the zone
            self.add_goal(objs=[box_id], matches=np.int32([[1]]), targ_poses=[zone_pose], replace=False,
                          rotations=False, metric='zone', params=[(zone_pose, zone_size)], step_max_reward=1/n_boxes,
                          language_goal=language_goal)

        # Set the reward for the entire task to be 1 (sum of step_max_reward for each goal)
        self.total_rewards = 1