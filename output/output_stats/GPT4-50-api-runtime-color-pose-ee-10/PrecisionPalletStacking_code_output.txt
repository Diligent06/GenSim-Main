import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionPalletStacking(Task):
    """Stack a sequence of five differently colored blocks onto a single pallet,
    alternating the orientation of each block by 90 degrees to form a stable,
    interlocked structure."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to add 5 goals, so max_steps is set to twice that number
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.lang_template = "stack the {color} block on the pallet"
        self.task_completed_desc = "done precision-pallet-stacking."

    def reset(self, env):
        super().reset(env)

        # Define the size of the pallet and blocks
        pallet_size = (0.3, 0.3, 0.02)  # x, y, z dimensions
        block_size = (0.05, 0.05, 0.05)  # x, y, z dimensions

        # Add the pallet to the environment
        pallet_urdf = 'pallet/pallet.urdf'
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object(pallet_urdf, pallet_pose, 'fixed')

        # Define block colors
        block_colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_rgb = [utils.COLORS[color] for color in block_colors]

        # Add blocks to the environment
        block_urdf = 'stacking/block.urdf'
        blocks = []
        for i in range(5):
            block_pose = self.get_random_pose(env, block_size)
            block_id = env.add_object(block_urdf, block_pose, color=color_rgb[i])
            blocks.append(block_id)

        # Define the target poses for each block on the pallet
        # We will alternate the orientation of each block by 90 degrees
        targ_poses = []
        for i in range(5):
            # Calculate the z-coordinate for each block to stack them on top of each other
            z_coord = pallet_pose[0][2] + pallet_size[2] + (i + 1) * block_size[2]
            # Alternate the orientation of each block by 90 degrees
            rotation = p.getQuaternionFromEuler([0, 0, i * np.pi / 2])
            # The x and y coordinates are the same as the pallet's
            targ_pose = (pallet_pose[0][0], pallet_pose[0][1], z_coord), rotation
            targ_poses.append(targ_pose)

        # Add goals for each block
        for i in range(5):
            language_goal = self.lang_template.format(color=block_colors[i])
            self.add_goal(objs=[blocks[i]], matches=np.ones((1, 1)), targ_poses=[targ_poses[i]],
                          replace=False, rotations=True, metric='pose', params=None,
                          step_max_reward=1 / 5, language_goal=language_goal)

# Instantiate the task
task = PrecisionPalletStacking()