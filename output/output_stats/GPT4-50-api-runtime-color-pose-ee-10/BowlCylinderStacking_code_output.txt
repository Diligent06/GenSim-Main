import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlCylinderStacking(Task):
    """
    Stack a specific number of colored cylinders into a bowl without toppling them,
    testing the robot's precision and stability control.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will call self.add_goal 5 times
        self.lang_template = "stack {num} {color} cylinders in the {bowl_color} bowl"
        self.task_completed_desc = "done stacking cylinders."
        self.ee = Suction  # Using Suction end-effector for vertical stacking
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders to stack and their size
        n_cylinders = np.random.randint(1, 4)  # Random number of cylinders between 1 and 3
        cylinder_size = (0.05, 0.05, 0.1)  # Diameter and height for the cylinder

        # Define the bowl size and add the bowl to the environment
        bowl_size = (0.15, 0.15, 0.05)  # Diameter and height for the bowl
        bowl_pose = self.get_random_pose(env, bowl_size)
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_id = env.add_object(bowl_urdf, bowl_pose, 'fixed')
        bowl_color = 'brown'  # Color for the bowl

        # Add cylinders to the environment
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_color = 'red'  # Color for the cylinders
        cylinders = []
        for _ in range(n_cylinders):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Fill the URDF template with the cylinder size and color
            replace = {'SIZE': cylinder_size, 'COLOR': utils.COLORS[cylinder_color]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

        # Define the target pose for the cylinders to be stacked in the bowl
        # The target pose is the same as the bowl's pose but with an adjusted z-coordinate
        # to account for the height of the stacked cylinders
        targ_poses = [(bowl_pose[0], bowl_pose[1])]  # We use the bowl's pose for all cylinders

        # Add the goal for stacking the cylinders
        # Since we want to stack all cylinders in the same bowl, we use the same target pose
        # and set replace to False to indicate that each cylinder must go to a unique pose
        self.add_goal(objs=cylinders, matches=np.ones((n_cylinders, 1)), targ_poses=targ_poses,
                      replace=False, rotations=False, metric='pose', params=None,
                      step_max_reward=1, language_goal=self.lang_template.format(
                          num=n_cylinders, color=cylinder_color, bowl_color=bowl_color))

        # Note: We set rotations to False because we don't need to consider the rotation of the cylinders
        # when stacking them in the bowl. We also set step_max_reward to 1 since we have only one goal.