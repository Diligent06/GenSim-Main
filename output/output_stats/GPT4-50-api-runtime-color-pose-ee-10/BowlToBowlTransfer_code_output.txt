import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlToBowlTransfer(Task):
    """Transfer a set of five differently colored balls from one bowl to another."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to transfer 5 balls, so 10 steps should be sufficient
        self.lang_template = "transfer the {color} ball to the other bowl"
        self.task_completed_desc = "done transferring balls."
        self.ee = Suction  # We use suction to pick up the balls

    def reset(self, env):
        super().reset(env)

        # Add two bowls to the environment
        bowl_size = (0.18, 0.18, 0.06)  # Size of the bowl
        bowl_urdf = 'bowl/bowl.urdf'
        source_bowl_pose = self.get_random_pose(env, bowl_size)
        target_bowl_pose = self.get_random_pose(env, bowl_size)
        env.add_object(bowl_urdf, source_bowl_pose, 'fixed')
        env.add_object(bowl_urdf, target_bowl_pose, 'fixed')

        # Define colors for the balls
        ball_colors = ['red', 'green', 'blue', 'yellow', 'purple']
        ball_color_values = [utils.COLORS[color] for color in ball_colors]

        # Add five balls to the source bowl
        ball_size = (0.04, 0.04, 0.04)  # Size of the ball
        ball_template = 'ball/ball-template.urdf'
        balls = []
        for i, color in enumerate(ball_color_values):
            ball_pose = self.get_random_pose(env, ball_size)
            replace = {'COLOR': color}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append(ball_id)

            # Define the language goal for each ball
            language_goal = self.lang_template.format(color=ball_colors[i])

            # Add goal for each ball to be transferred to the target bowl
            self.add_goal(objs=[ball_id], matches=np.int32([[1]]), targ_poses=[target_bowl_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/5,
                          language_goal=language_goal)

        # The task is to transfer all balls from the source bowl to the target bowl
        # Each ball has a separate goal with a maximum reward of 1/5, adding up to 1 for the entire task