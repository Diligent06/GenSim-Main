import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderTowerPrecision(Task):
    """Stack five differently colored cylinders on top of each other on a single stand."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to stack 5 cylinders, so 10 steps should be sufficient
        self.lang_template = "stack the {color} cylinder on top of the {base} cylinder"
        self.task_completed_desc = "done stacking the cylinder tower."
        self.ee = Suction  # We need to move objects on the Z axis, so Suction is appropriate

    def reset(self, env):
        super().reset(env)

        # Define the size and URDF for the stand
        stand_size = (0.05, 0.05, 0.005)  # Size of the stand
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Define the colors for the cylinders
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = ['red', 'green', 'blue', 'yellow', 'purple']

        # Define the size and template URDF for the cylinders
        cylinder_size = (0.04, 0.04, 0.08)  # Diameter and height for the cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'

        # Add cylinders
        objs = []
        for i, color in enumerate(colors):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Set the color for the cylinder
            color_rgb = utils.COLORS[color]
            # IMPORTANT: REPLACE THE TEMPLATE URDF
            replace = {'COLOR': color_rgb}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            objs.append(cylinder_id)

        # Define the target poses for the cylinders on the stand
        z_offset = cylinder_size[2]  # The height of each cylinder
        targ_poses = []
        for i in range(5):
            # The target pose is directly above the stand, with increasing z for each cylinder
            targ_pose = (stand_pose[0], (0, 0, stand_pose[0][2] + (i + 1) * z_offset))
            targ_poses.append(targ_pose)

        # Add goals for each cylinder
        for i in range(5):
            # The language goal describes the action to be performed
            if i == 0:
                base = 'stand'
            else:
                base = color_names[i - 1]
            language_goal = self.lang_template.format(color=color_names[i], base=base)
            # Add the goal for the current cylinder
            self.add_goal(objs=[objs[i]], matches=np.ones((1, 1)), targ_poses=[targ_poses[i]], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1 / 5,
                          language_goal=language_goal)

# Note: The code assumes that the `fill_template` method is available to replace placeholders in the URDF template.
# The `get_random_pose` method is used to get a valid random pose within the workspace bounds.
# The `add_goal` method is used to define the desired final state for each cylinder.