import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlTowerChallenge(Task):
    """
    Build a vertical stack of five differently colored bowls by precisely placing them on top of each other,
    in a sequence from largest at the bottom to smallest at the top.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to place 5 bowls, so 10 steps should be sufficient
        self.lang_template = "place the {color} bowl on top of the {prev_color} one"
        self.task_completed_desc = "done building the bowl tower."
        self.ee = Suction  # Use suction end-effector to pick and place bowls

    def reset(self, env):
        super().reset(env)

        # Define bowl sizes from largest to smallest
        bowl_sizes = [
            (0.18, 0.18, 0.08),  # Largest bowl
            (0.15, 0.15, 0.07),
            (0.12, 0.12, 0.06),
            (0.09, 0.09, 0.05),
            (0.06, 0.06, 0.04)   # Smallest bowl
        ]

        # Define bowl colors
        bowl_colors = ['blue', 'red', 'green', 'yellow', 'purple']

        # Load the bowl URDF
        bowl_urdf = 'bowl/bowl.urdf'

        # Initialize list to keep track of bowl object IDs and their poses
        bowl_ids = []
        bowl_poses = []

        # Add bowls to the environment
        for i, size in enumerate(bowl_sizes):
            # Get a random pose for the bowl
            pose = self.get_random_pose(env, size)
            # Get the color for the bowl
            color = utils.COLORS[bowl_colors[i]]
            # Add the bowl to the environment
            bowl_id = env.add_object(bowl_urdf, pose, 'rigid', color=color)
            # Store the object ID and pose
            bowl_ids.append(bowl_id)
            bowl_poses.append(pose)

        # Add goals for each bowl to be stacked on top of the previous one
        for i in range(1, len(bowl_sizes)):
            # Language goal for the current step
            lang_goal = self.lang_template.format(color=bowl_colors[i], prev_color=bowl_colors[i-1])
            # Calculate the target pose for the current bowl (on top of the previous one)
            prev_pose = bowl_poses[i-1]
            targ_pose = (prev_pose[0], (0, 0, 0, 1))  # Same x, y and fixed orientation; z will be adjusted
            # Adjust the z-coordinate for the target pose to stack on top of the previous bowl
            targ_pose[0][2] += bowl_sizes[i-1][2] / 2 + bowl_sizes[i][2] / 2

            # Add the goal for the current bowl
            self.add_goal(
                objs=[bowl_ids[i]],  # Current bowl
                matches=np.ones((1, 1)),  # Single bowl, single target
                targ_poses=[targ_pose],  # Target pose calculated above
                replace=False,  # Each bowl has a unique target
                rotations=False,  # No rotation needed, keep bowls aligned
                metric='pose',  # We are using pose metric for precise placement
                params=None,  # No additional parameters needed
                step_max_reward=1,  # Full reward for placing each bowl correctly
                language_goal=lang_goal  # Language goal for the current step
            )

# Instantiate the task
bowl_tower_challenge = BowlTowerChallenge()