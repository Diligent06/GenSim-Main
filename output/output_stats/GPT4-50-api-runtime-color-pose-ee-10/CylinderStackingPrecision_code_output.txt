import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderStackingPrecision(Task):
    """Stack three differently colored cylinders onto a stand, with each cylinder having a smaller diameter than the one below it, requiring precision in alignment to avoid toppling."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is set to twice the number of goals
        self.ee = Suction  # Using Suction end-effector for vertical lifting and placement
        self.lang_template = "stack the {color} cylinder on top of the {place}"
        self.task_completed_desc = "done stacking cylinders with precision."

    def reset(self, env):
        super().reset(env)

        # Define cylinder sizes (diameter, height)
        sizes = [(0.08, 0.04), (0.06, 0.04), (0.04, 0.04)]

        # Define cylinder colors
        colors = ['red', 'green', 'blue']
        color_rgb = [utils.COLORS[color] for color in colors]

        # Add stand
        stand_size = (0.1, 0.1, 0.005)  # Size of the stand
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_urdfs = []
        cylinder_poses = []
        for i, size in enumerate(sizes):
            # Generate cylinder size and pose
            diameter, height = size
            cylinder_size = (diameter, diameter, height)
            cylinder_pose = self.get_random_pose(env, cylinder_size)

            # Replace placeholders in URDF template
            replace = {'SIZE': cylinder_size, 'COLOR': color_rgb[i]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_urdfs.append(cylinder_urdf)
            cylinder_poses.append(cylinder_pose)

            # Add cylinder to environment
            env.add_object(cylinder_urdf, cylinder_pose)

        # Define target poses for cylinders on the stand
        targ_poses = [
            (stand_pose[0], stand_pose[1]),  # Bottom cylinder
            ((stand_pose[0][0], stand_pose[0][1], stand_pose[0][2] + sizes[0][1]), stand_pose[1]),  # Middle cylinder
            ((stand_pose[0][0], stand_pose[0][1], stand_pose[0][2] + sizes[0][1] + sizes[1][1]), stand_pose[1])  # Top cylinder
        ]

        # Add goals for stacking cylinders
        for i in range(3):
            # Language goal for each cylinder
            place = "stand" if i == 0 else f"{colors[i-1]} cylinder"
            language_goal = self.lang_template.format(color=colors[i], place=place)

            # Add goal for current cylinder
            self.add_goal(
                objs=[i],  # Object index (cylinder)
                matches=np.ones((1, 1)),  # Single object to single target
                targ_poses=[targ_poses[i]],  # Target pose for the cylinder
                replace=False,  # Unique matching between objects and targets
                rotations=False,  # No rotation needed, cylinders are symmetrical
                metric='pose',  # Pose metric for precision
                params=None,  # No additional parameters
                step_max_reward=1 / 3,  # Reward for each goal (1 divided by number of goals)
                language_goal=language_goal  # Language goal
            )