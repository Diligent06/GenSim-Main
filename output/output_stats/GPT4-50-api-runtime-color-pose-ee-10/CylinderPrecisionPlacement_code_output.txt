import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderPrecisionPlacement(Task):
    """Arrange five differently colored cylinders onto corresponding colored lines drawn on the tabletop,
    ensuring each cylinder is perfectly aligned with the respective line."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We have 5 goals, so max_steps is set to twice the number of goals
        self.ee = Suction  # Using Suction end-effector as we need to move objects on the Z axis

        # Task-specific language templates
        self.lang_template = "place the {color} cylinder on the {color} line"
        self.task_completed_desc = "done placing all cylinders."

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and lines
        n_cylinders = 5

        # Define cylinder size
        cylinder_size = (0.05, 0.05, 0.15)  # (radius, radius, height)

        # Define colors for cylinders and lines
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        np.random.shuffle(colors)  # Shuffle colors to randomize the task each time

        # Add lines and cylinders to the environment
        cylinders = []
        for i in range(n_cylinders):
            # Add line
            line_template = 'line/single-green-line-template.urdf'
            line_size = (0.005, 0.5, 0.001)  # (width, length, height)
            line_pose = self.get_random_pose(env, line_size)
            replace = {'COLOR': utils.COLORS[colors[i]]}
            line_urdf = self.fill_template(line_template, replace)
            env.add_object(line_urdf, line_pose, 'fixed')

            # Add cylinder
            cylinder_template = 'cylinder/cylinder-template.urdf'
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': utils.COLORS[colors[i]]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Define the language goal
            language_goal = self.lang_template.format(color=colors[i])

            # Add goal for placing the cylinder on the line
            # Since the line is thin and long, we only need to match the x, y coordinates and ignore rotation
            self.add_goal(objs=[cylinder_id], 
                          matches=np.int32([[1]]), 
                          targ_poses=[line_pose], 
                          replace=False, 
                          rotations=False, 
                          metric='pose', 
                          params=None, 
                          step_max_reward=1 / n_cylinders, 
                          language_goal=language_goal)

        # Set the progress threshold for task completion
        self.progress_threshold = 1.0