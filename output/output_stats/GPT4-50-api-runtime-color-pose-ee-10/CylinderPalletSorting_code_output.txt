import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderPalletSorting(Task):
    """Sort colored cylinders by placing them into designated zones on a pallet, with each zone corresponding to a specific color of the cylinders."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have 5 goals, so max_steps is twice the number of goals
        self.lang_template = "place the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done sorting cylinders."
        self.ee = Suction  # Using Suction end-effector as we need to move objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones
        n_cylinders = 5
        n_zones = 5

        # Define the size of the cylinders and zones
        cylinder_size = (0.04, 0.04, 0.1)  # (radius, radius, height)
        zone_size = (0.1, 0.1, 0)  # (x, y, z) - zones are flat

        # Add pallet
        pallet_urdf = 'pallet/pallet.urdf'
        pallet_pose = self.get_random_pose(env, (0.5, 0.5, 0))  # Pallet size is arbitrary for pose generation
        env.add_object(pallet_urdf, pallet_pose, 'fixed')

        # Define available colors
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [f"{color} cylinder" for color in colors]

        # Add zones to the pallet for each color
        zone_poses = []
        for i, color in enumerate(colors):
            zone_pose = self.get_random_pose(env, zone_size)
            zone_urdf = 'zone/zone.urdf'
            env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[color])
            zone_poses.append(zone_pose)

        # Add cylinders to the environment
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i, color in enumerate(colors):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Set the color for the cylinder
            replace = {'COLOR': utils.COLORS[color]}
            # IMPORTANT: REPLACE THE TEMPLATE URDF
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Add goal for each cylinder to be placed in the matching color zone
            language_goal = self.lang_template.format(color=color)
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_poses[i]], replace=True,
                          rotations=False, metric='zone', params=[(zone_poses[i], zone_size)], step_max_reward=1,
                          language_goal=language_goal)

        # Shuffle the cylinders to avoid always picking the same color first
        np.random.shuffle(cylinders)