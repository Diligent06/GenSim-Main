import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylindricalTowerConstruction(Task):
    """Build a vertical tower by stacking five differently colored cylinders on top of each other in a specified color order onto a designated zone on the table."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to stack 5 cylinders, so 10 steps should be sufficient
        self.lang_template = "stack the {color} cylinder"
        self.task_completed_desc = "done constructing the cylindrical tower."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the color order for the tower
        color_order = ['red', 'green', 'blue', 'yellow', 'purple']
        # Define the size of the cylinders
        cylinder_size = (0.05, 0.05, 0.1)  # (radius, radius, height)

        # Add the zone where the tower will be constructed
        zone_size = (0.15, 0.15, 0)  # (x_size, y_size, z_size)
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Add cylinders in the specified color order
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i, color_name in enumerate(color_order):
            # Generate the color for the cylinder
            color = utils.COLORS[color_name]
            # Generate a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)
            # Replace the placeholders in the URDF template
            replace = {'COLOR': color}
            # Create the URDF for the cylinder
            urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append(cylinder_id)

            # Define the language goal
            language_goal = self.lang_template.format(color=color_name)
            # Define the target pose for the cylinder, which is on top of the previous one in the zone
            target_pose = (zone_pose[0], zone_pose[1])  # Use the zone's x, y position and default orientation
            if i > 0:
                # For subsequent cylinders, increase the z-coordinate to stack them
                target_pose = (target_pose[0], (target_pose[1][0], target_pose[1][1], target_pose[1][2] + i * cylinder_size[2]))

            # Add the goal for the cylinder
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/5, language_goal=language_goal)

        # Set the number of steps to twice the number of goals
        self.max_steps = len(self.goals) * 2