import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlCylinderArrangement(Task):
    """Organize three differently colored cylinders by placing them upright inside a bowl without any of them touching the sides of the bowl."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 cylinders to place, so 6 steps should be sufficient
        self.lang_template = "place the {color} cylinder upright in the bowl"
        self.task_completed_desc = "all cylinders are arranged in the bowl."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the bowl size and add the bowl to the environment
        bowl_size = (0.18, 0.18, 0.06)  # x, y, z dimensions for the bowl
        bowl_pose = self.get_random_pose(env, bowl_size)
        bowl_urdf = 'bowl/bowl.urdf'
        env.add_object(bowl_urdf, bowl_pose, 'fixed')

        # Define cylinder size and template for URDF
        cylinder_size = (0.05, 0.05, 0.15)  # x, y, z dimensions for the cylinder
        cylinder_template = 'cylinder/cylinder-template.urdf'

        # Define colors for the cylinders
        colors = ['red', 'green', 'blue']
        cylinder_ids = []

        # Add cylinders to the environment
        for color in colors:
            # Generate a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Set the color for the cylinder
            color_rgb = utils.COLORS[color]
            # Replace the placeholders in the URDF template
            replace = {'COLOR': color_rgb}
            # Generate the URDF for the cylinder
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinder_ids.append(cylinder_id)

            # Add a language goal for each cylinder
            language_goal = self.lang_template.format(color=color)
            # Add a motion goal for each cylinder
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[bowl_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/3, language_goal=language_goal)

        # The task is to place all cylinders upright in the bowl without touching the sides
        # Since we have 3 cylinders, we divide the maximum reward by 3, giving each cylinder a third of the total reward