import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PaletteOrganization(Task):
    """Arrange colored cylinders on a zone marked with colored outlines matching their color."""

    def __init__(self):
        super().__init__()
        self.max_steps = 12  # We expect to call self.add_goal six times, so max_steps is twice that
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.lang_template = "put the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done organizing the palette."

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and their colors
        n_cylinders = 6
        cylinder_colors = ['red', 'blue', 'green', 'orange', 'yellow', 'purple']

        # Add the zone with colored outlines
        zone_size = (0.3, 0.3, 0)  # Flat zone
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Add cylinders
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i in range(n_cylinders):
            # Define the size and pose of the cylinder
            size = (0.05, 0.05, 0.1)  # Diameter, Diameter, Height
            pose = self.get_random_pose(env, size)

            # Get the color for the cylinder
            color_name = cylinder_colors[i]
            color = utils.COLORS[color_name]

            # Fill the URDF template with the cylinder's properties
            replace = {'COLOR': color, 'SIZE': size}
            urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append((cylinder_id, color_name))

        # Define target poses for each cylinder based on the color
        # Assuming the zone has colored outlines corresponding to cylinder colors
        for cylinder_id, color_name in cylinders:
            # The target pose is on the zone with the same color outline
            # We use the initial zone_pose and adjust the x, y coordinates accordingly
            # The z-coordinate is slightly above the zone to ensure the cylinder stands upright
            target_pose = (zone_pose[0], zone_pose[1])  # Same orientation as the zone
            target_translation = list(zone_pose[0])
            target_translation[2] += size[2] / 2  # Adjust z to be half the height of the cylinder

            # Create a language goal for the action
            language_goal = self.lang_template.format(color=color_name)

            # Add the goal for the cylinder to be in the correct zone
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[(target_translation, target_pose[1])],
                          replace=False, rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

        # The task is set up with cylinders and corresponding zones