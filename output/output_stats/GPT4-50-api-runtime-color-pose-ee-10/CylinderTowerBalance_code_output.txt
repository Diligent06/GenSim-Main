import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderTowerBalance(Task):
    """Sequentially stack three differently colored cylinders onto a stand, and then place a ball of a matching color on top of the tallest cylinder without knocking over the structure."""

    def __init__(self):
        super().__init__()
        self.max_steps = 8  # We have 4 objects to place, so max_steps is twice that number
        self.lang_template = "place the {color} {object} on the {target}"
        self.task_completed_desc = "done stacking the cylinder tower and balancing the ball."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders and the ball
        cylinder_colors = ['red', 'green', 'blue']
        ball_color = 'yellow'  # The ball will be yellow

        # Add the stand
        stand_size = (0.05, 0.05, 0.005)  # Size of the stand
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Add cylinders
        cylinder_urdf_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.04, 0.04, 0.12)  # Size of the cylinders
        cylinder_ids = []
        for i, color_name in enumerate(cylinder_colors):
            # Generate a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Generate the color for the cylinder
            color = utils.COLORS[color_name]
            # Fill the URDF template with the specific values
            replace = {'COLOR': color, 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_urdf_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinder_ids.append(cylinder_id)

            # Define the target pose for the cylinder (on top of the stand or the previous cylinder)
            target_pose = stand_pose if i == 0 else env.get_pose(cylinder_ids[i-1])
            target_pose = (target_pose[0], target_pose[1])  # We only need the position, not the orientation

            # Add the goal for placing the cylinder
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/4,
                          language_goal=self.lang_template.format(color=color_name, object='cylinder', target='stand' if i == 0 else 'cylinder'))

        # Add the ball
        ball_size = (0.04, 0.04, 0.04)  # Size of the ball
        ball_urdf_template = 'ball/ball-template.urdf'
        ball_pose = self.get_random_pose(env, ball_size)
        # Generate the color for the ball
        ball_color_rgb = utils.COLORS[ball_color]
        # Fill the URDF template with the specific values
        replace = {'COLOR': ball_color_rgb, 'SIZE': ball_size}
        ball_urdf = self.fill_template(ball_urdf_template, replace)
        # Add the ball to the environment
        ball_id = env.add_object(ball_urdf, ball_pose)

        # Define the target pose for the ball (on top of the tallest cylinder)
        target_pose = env.get_pose(cylinder_ids[-1])
        target_pose = (target_pose[0], target_pose[1])  # We only need the position, not the orientation
        # Adjust the z-coordinate to place the ball on top of the cylinder
        target_pose[0][2] += cylinder_size[2]

        # Add the goal for placing the ball
        self.add_goal(objs=[ball_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                      rotations=False, metric='pose', params=None, step_max_reward=1/4,
                      language_goal=self.lang_template.format(color=ball_color, object='ball', target='tallest cylinder'))