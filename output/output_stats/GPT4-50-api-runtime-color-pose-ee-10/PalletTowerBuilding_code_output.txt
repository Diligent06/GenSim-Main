import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PalletTowerBuilding(Task):
    """
    Construct a tower by vertically stacking differently colored cylinders on top of each other on a single pallet,
    ensuring the tower remains stable and upright.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will call self.add_goal 5 times, so max_steps is twice that
        self.lang_template = "stack the {color} cylinder on top of the tower"
        self.task_completed_desc = "done building the tower."
        self.ee = Suction  # Using Suction end-effector to move objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders to stack
        n_cylinders = 5

        # Define the size of the pallet and cylinders
        pallet_size = (0.3, 0.3, 0.02)  # x, y, z dimensions
        cylinder_size = (0.05, 0.05, 0.1)  # x, y, z dimensions

        # Add pallet to the environment
        pallet_urdf = 'pallet/pallet.urdf'
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object(pallet_urdf, pallet_pose, 'fixed')

        # Define colors for the cylinders
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        cylinder_urdf_template = 'cylinder/cylinder-template.urdf'

        # Initialize a list to store cylinder IDs and their target poses
        cylinder_ids = []
        target_poses = []

        # Add cylinders to the environment
        for i in range(n_cylinders):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Set the color for the cylinder
            color_rgb = utils.COLORS[colors[i]]
            # Replace the template URDF with the specific color and size
            replace = {'COLOR': color_rgb, 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_urdf_template, replace)
            # Add the cylinder to the environment and store its ID
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinder_ids.append(cylinder_id)
            # Define the target pose for the cylinder (directly above the previous one)
            target_pose = (pallet_pose[0], pallet_pose[1]) if i == 0 else target_poses[-1]
            target_pose = (target_pose[0], (target_pose[1][0], target_pose[1][1], target_pose[1][2] + cylinder_size[2]))
            target_poses.append(target_pose)

            # Add a goal for each cylinder
            language_goal = self.lang_template.format(color=colors[i])
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)