import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderColorMatching(Task):
    """Arrange cylinders of varying colors onto correspondingly colored zones within a defined area."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # Assuming we will have 2 goals, so max_steps is twice the number of goals
        self.lang_template = "place the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done arranging cylinders."
        self.ee = Suction  # Using Suction end-effector as we need to move objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones
        n_cylinders = 2
        n_zones = n_cylinders

        # Define cylinder size
        cylinder_size = (0.05, 0.05, 0.1)  # (radius, radius, height)

        # Define colors for cylinders and corresponding zones
        colors = ['red', 'green']  # Extendable for more colors
        color_goals = [utils.COLORS[color] for color in colors]

        # Add zones with corresponding colors
        zone_size = (0.15, 0.15, 0)  # (x_size, y_size, z_size)
        zone_urdf = 'zone/zone.urdf'
        zone_poses = []
        for color in color_goals:
            zone_pose = self.get_random_pose(env, zone_size)
            env.add_object(zone_urdf, zone_pose, 'fixed', color=color)
            zone_poses.append(zone_pose)

        # Add cylinders with corresponding colors
        cylinder_urdf_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i, color in enumerate(color_goals):
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': color, 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_urdf_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Define the language goal for placing each cylinder
            language_goal = self.lang_template.format(color=colors[i])

            # Add goal for each cylinder to be placed in the matching color zone
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_poses[i]],
                          replace=False, rotations=False, metric='pose', params=None,
                          step_max_reward=1, language_goal=language_goal)

        # Note: If more cylinders and zones are added, ensure to update self.max_steps accordingly