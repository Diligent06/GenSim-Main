import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PalletCylinderPrecision(Task):
    """Arrange five differently colored cylinders onto specific locations on the pallet."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to place 5 cylinders, so max_steps is twice the number of goals
        self.lang_template = "place the {color} cylinder on the {color} circle on the pallet"
        self.task_completed_desc = "all cylinders are placed correctly."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders
        cylinder_colors = ['red', 'blue', 'green', 'yellow', 'purple']
        # Define the size of the cylinders
        cylinder_size = (0.05, 0.05, 0.1)  # (radius, radius, height)

        # Add the pallet to the environment
        pallet_size = (0.3, 0.3, 0.05)  # (length, width, height)
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Add cylinders to the environment
        for color_name in cylinder_colors:
            # Generate the color RGB values
            color = utils.COLORS[color_name]

            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)

            # Fill the cylinder URDF template with the specific color and size
            cylinder_urdf = self.fill_template('cylinder/cylinder-template.urdf', {
                'COLOR': color,
                'SIZE': cylinder_size
            })

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, pose)

            # Define the target pose for the cylinder on the pallet
            # The target pose is a position on the pallet with the same color circle
            # For simplicity, we assume that the target positions are pre-defined and known
            # Here we just offset the cylinder's z-coordinate to be on top of the pallet
            target_pose = (pose[0], pallet_pose[1])  # Use the same orientation as the pallet

            # Create the language goal for placing this cylinder
            language_goal = self.lang_template.format(color=color_name)

            # Add the goal for this cylinder
            self.add_goal(
                objs=[cylinder_id],
                matches=np.ones((1, 1)),  # Each cylinder has one unique target
                targ_poses=[target_pose],  # Target pose on the pallet
                replace=False,  # Each cylinder has a unique place and cannot be replaced
                rotations=False,  # Rotation is not considered in this task
                metric='pose',  # We are using pose metric for precision placement
                params=None,  # No additional parameters needed
                step_max_reward=1,  # Full reward for placing each cylinder correctly
                language_goal=language_goal  # Language goal for the task
            )

# Instantiate the task
task = PalletCylinderPrecision()