import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedContainerArrangement(Task):
    """Arrange five differently colored cylinders inside a corresponding colored container."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call self.add_goal 5 times, so we set max_steps to twice that number.
        self.lang_template = "put the {color} cylinder in the {color} container"
        self.task_completed_desc = "done arranging cylinders in containers."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector.

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders and containers.
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [f"{color} cylinder" for color in colors]

        # Add containers with corresponding colors.
        container_size = (0.15, 0.15, 0.05)  # Length, Width, Height of the container.
        container_urdf = 'container/container-template.urdf'
        container_poses = []
        for color in colors:
            # Generate a random pose for the container.
            container_pose = self.get_random_pose(env, container_size)
            container_poses.append(container_pose)
            # Fill the container URDF template with size and color.
            replace = {'DIM': container_size, 'HALF': (container_size[0] / 2, container_size[1] / 2, container_size[2] / 2),
                       'COLOR': utils.COLORS[color]}
            container_urdf_filled = self.fill_template(container_urdf, replace)
            # Add the container to the environment.
            env.add_object(container_urdf_filled, container_pose, 'fixed')

        # Add cylinders with corresponding colors.
        cylinder_size = (0.02, 0.02, 0.08)  # Radius, Radius, Height of the cylinder.
        cylinder_urdf = 'cylinder/cylinder-template.urdf'
        for i, color in enumerate(colors):
            # Generate a random pose for the cylinder.
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Fill the cylinder URDF template with size and color.
            replace = {'DIM': cylinder_size, 'COLOR': utils.COLORS[color]}
            cylinder_urdf_filled = self.fill_template(cylinder_urdf, replace)
            # Add the cylinder to the environment.
            cylinder_id = env.add_object(cylinder_urdf_filled, cylinder_pose)
            # Define the language goal for placing the cylinder.
            language_goal = self.lang_template.format(color=color)
            # Add the goal for the cylinder to be placed in the corresponding container.
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[container_poses[i]], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/5,
                          language_goal=language_goal)

# Instantiate the task.
task = ColorCodedContainerArrangement()