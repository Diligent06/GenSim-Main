import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlHierarchyConstruction(Task):
    """Stack three differently-sized bowls into each other by size order."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is twice the number of goals
        self.lang_template = "stack the {color} bowl {position} in the hierarchy"
        self.task_completed_desc = "done stacking the bowls."
        self.ee = Suction  # Use Suction end-effector to lift bowls in Z axis

    def reset(self, env):
        super().reset(env)

        # Define bowl sizes (diameter, height)
        sizes = [(0.18, 0.08), (0.15, 0.06), (0.12, 0.04)]
        colors = ['red', 'green', 'blue']  # Define bowl colors
        positions = ['at the bottom', 'in the middle', 'on top']  # Define positions in the stack

        # Add bowls to the environment with random initial poses
        bowls = []
        for size, color in zip(sizes, colors):
            bowl_urdf = 'bowl/bowl.urdf'
            bowl_size = (size[0], size[0], size[1])  # Bowls are symmetric in x and y
            bowl_pose = self.get_random_pose(env, bowl_size)
            bowl_color = utils.COLORS[color]
            bowl_id = env.add_object(bowl_urdf, bowl_pose, color=bowl_color)
            bowls.append((bowl_id, bowl_pose))

        # Define the target poses for the bowls, starting with the largest at the bottom
        targ_poses = [bowls[0][1]]  # Bottom bowl uses its initial pose
        for i in range(1, len(bowls)):
            # Stack each bowl on top of the previous one
            x, y, z = targ_poses[i-1][0]
            z += sizes[i-1][1]  # Increment z by the height of the bowl below
            targ_poses.append(((x, y, z), (0, 0, 0, 1)))  # No rotation needed, quaternions for no rotation

        # Add goals for each bowl
        for i, (bowl_id, _) in enumerate(bowls):
            language_goal = self.lang_template.format(color=colors[i], position=positions[i])
            self.add_goal(objs=[bowl_id], matches=np.ones((1, 1)), targ_poses=[targ_poses[i]],
                          replace=False, rotations=False, metric='pose', params=None,
                          step_max_reward=1/3, language_goal=language_goal)

        # The task is to stack the bowls in size order without toppling