import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorDiscriminatedCylinderArrangement(Task):
    """Arrange differently colored cylinders into matching colored zones on a fixture."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call add_goal 5 times, so max_steps is set to twice that number
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.lang_template = "place the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done arranging the cylinders."

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and their colors
        n_cylinders = 5
        cylinder_colors = ['red', 'green', 'blue', 'yellow', 'purple']

        # Add the fixture with etched zones for the cylinders
        fixture_size = (0.3, 0.3, 0.01)  # Size of the fixture
        fixture_urdf = 'insertion/fixture.urdf'
        fixture_pose = self.get_random_pose(env, fixture_size)
        env.add_object(fixture_urdf, fixture_pose, 'fixed')

        # Add cylinders and their corresponding zones
        cylinder_size = (0.05, 0.05, 0.1)  # Size of the cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        zone_urdf = 'zone/zone.urdf'
        for i, color_name in enumerate(cylinder_colors):
            # Generate the color for the cylinder
            color = utils.COLORS[color_name]

            # Add the cylinder to the environment
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': color}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

            # Add the corresponding zone for the cylinder
            zone_pose = self.get_random_pose(env, cylinder_size)
            env.add_object(zone_urdf, zone_pose, 'fixed')

            # Define the language goal for placing the cylinder
            language_goal = self.lang_template.format(color=color_name)

            # Add the goal for the cylinder to be placed in the matching zone
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

        # The task is to arrange the cylinders so that each one stands upright and aligns with the zone boundaries
        # The cylinders must be placed in the zones with matching colors