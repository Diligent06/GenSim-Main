import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderCornerArrangement(Task):
    """Pick up three differently colored cylinders and place them upright inside a corner, in a specific left-to-right color order: red, green, blue."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 goals, so max_steps is set to twice the number of goals
        self.lang_template = "place the {color} cylinder in the corner"
        self.task_completed_desc = "done placing cylinders in the corner."
        self.ee = Suction  # Using Suction since we need to move objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define cylinder size and colors
        cylinder_size = (0.05, 0.05, 0.15)  # Diameter, Diameter, Height
        cylinder_colors = ['red', 'green', 'blue']
        cylinder_color_values = [utils.COLORS[color] for color in cylinder_colors]

        # Add corner
        corner_size = (0.15, 0.15, 0.05)  # Length, Width, Height
        corner_pose = self.get_random_pose(env, corner_size)
        corner_template = 'corner/corner-template.urdf'
        replace_corner = {'DIM': corner_size}
        corner_urdf = self.fill_template(corner_template, replace_corner)
        env.add_object(corner_urdf, corner_pose, 'fixed')

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_ids = []
        for i, color in enumerate(cylinder_colors):
            pose = self.get_random_pose(env, cylinder_size)
            replace_cylinder = {'COLOR': cylinder_color_values[i]}
            cylinder_urdf = self.fill_template(cylinder_template, replace_cylinder)
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinder_ids.append(cylinder_id)

        # Define target poses for cylinders inside the corner
        # Assuming the corner is placed such that the cylinders should be aligned along the y-axis
        target_positions = [
            (corner_pose[0][0] + 0.05, corner_pose[0][1] - 0.05, 0.075),  # Red cylinder
            (corner_pose[0][0] + 0.05, corner_pose[0][1], 0.075),          # Green cylinder
            (corner_pose[0][0] + 0.05, corner_pose[0][1] + 0.05, 0.075)   # Blue cylinder
        ]

        # Add goals for each cylinder
        for i, cylinder_id in enumerate(cylinder_ids):
            language_goal = self.lang_template.format(color=cylinder_colors[i])
            self.add_goal(
                objs=[cylinder_id],
                matches=np.int32([[1]]),
                targ_poses=[(target_positions[i], (0, 0, 0, 1))],  # No rotation needed, keep upright
                replace=False,
                rotations=False,
                metric='pose',
                params=None,
                step_max_reward=1 / len(cylinder_ids),  # Equal reward for each cylinder
                language_goal=language_goal
            )