import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderSortStand(Task):
    """
    Sort colored cylinders by placing them onto matching colored stands within a defined zone,
    testing the robot's precision and object recognition capabilities.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to call self.add_goal twice, so we set this to twice that number
        self.lang_template = "place the {color} cylinder on the {color} stand"
        self.task_completed_desc = "done sorting cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and stands
        n_cylinders = 2

        # Add goal zone
        zone_size = (0.12, 0.12, 0)  # Size of the zone
        zone_pose = self.get_random_pose(env, zone_size)  # Random pose within workspace bounds
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Define cylinder and stand sizes
        cylinder_size = (0.04, 0.04, 0.1)  # Diameter and height for the cylinder
        stand_size = (0.05, 0.05, 0.02)  # Size of the stand

        # Define colors for cylinders and stands
        colors = ['red', 'green']
        cylinder_colors = [utils.COLORS[color] for color in colors]
        stand_colors = [utils.COLORS[color] for color in colors]

        # Add cylinders and stands
        cylinders = []
        stands = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        stand_urdf = 'stacking/stand.urdf'
        for i in range(n_cylinders):
            # Add cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': cylinder_colors[i]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Add stand
            stand_pose = self.get_random_pose(env, stand_size)
            stand_id = env.add_object(stand_urdf, stand_pose, color=stand_colors[i])
            stands.append(stand_pose)  # We store the pose for the goal

            # Define the language goal
            language_goal = self.lang_template.format(color=colors[i])

            # Add goal for placing the cylinder on the stand
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[stand_pose],
                          replace=False, rotations=True, metric='pose', params=None,
                          step_max_reward=1, language_goal=language_goal)

        # Set the number of steps to twice the number of goals
        self.max_steps = len(cylinders) * 2