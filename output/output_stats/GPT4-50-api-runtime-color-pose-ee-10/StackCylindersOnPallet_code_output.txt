import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class StackCylindersOnPallet(Task):
    """Stack a set of five different colored cylinders on top of each other in a specific color order on a pallet."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to stack 5 cylinders, so 10 steps should be sufficient
        self.lang_template = "stack the {color} cylinder on top"
        self.task_completed_desc = "done stacking cylinders."
        self.ee = Suction  # Suction end-effector is needed to lift cylinders on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the color order for stacking the cylinders
        color_order = ['red', 'blue', 'green', 'yellow', 'purple']
        cylinder_colors = [utils.COLORS[color] for color in color_order]

        # Add pallet
        pallet_size = (0.3, 0.3, 0.02)  # x, y, z dimensions for the pallet size
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.05, 0.05, 0.1)  # x, y, z dimensions for the cylinder size
        cylinder_poses = []
        cylinders = []

        for i, color in enumerate(cylinder_colors):
            # Generate a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': color, 'SIZE': cylinder_size}
            # Generate the URDF for the cylinder with the specified color
            urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append(cylinder_id)
            cylinder_poses.append(pose)

        # Stack the cylinders on the pallet in the specified color order
        for i in range(len(cylinders)):
            # The target pose for each cylinder is on top of the previous one (or on the pallet for the first)
            if i == 0:
                # The first cylinder is placed on the pallet
                z_offset = pallet_size[2] / 2 + cylinder_size[2] / 2
            else:
                # Subsequent cylinders are placed on top of the previous one
                z_offset += cylinder_size[2]

            # The x, y coordinates are the same as the pallet's, and z is incremented for each cylinder
            target_pose = (pallet_pose[0], (0, 0, z_offset, 1))
            # Add the goal for the current cylinder
            self.add_goal(objs=[cylinders[i]], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1 / len(cylinders),
                          language_goal=self.lang_template.format(color=color_order[i]))

        # Set the language goal for the entire task
        self.language_goal = "Stack the cylinders in the following order: " + ", ".join(color_order)