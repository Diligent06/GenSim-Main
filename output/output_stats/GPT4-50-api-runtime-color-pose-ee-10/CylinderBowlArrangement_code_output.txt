import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderBowlArrangement(Task):
    """
    Arrange a set of five differently colored cylinders by inserting them vertically into corresponding colored bowls,
    ensuring that the cylinder does not topple over.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to arrange 5 cylinders, so max_steps is set to twice that number
        self.lang_template = "put the {color} cylinder in the {color} bowl"
        self.task_completed_desc = "done arranging the cylinders in the bowls."
        self.ee = Suction  # Using Suction end-effector as we need to move objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and bowls
        n_cylinders = 5
        n_bowls = 5

        # Define the size of the bowls and cylinders
        bowl_size = (0.12, 0.12, 0.06)  # (x, y, z) dimensions
        cylinder_size = (0.05, 0.05, 0.15)  # (x, y, z) dimensions

        # Define the URDF paths for the bowls and cylinders
        bowl_urdf = 'bowl/bowl.urdf'
        cylinder_template = 'cylinder/cylinder-template.urdf'

        # Generate random colors for the cylinders and corresponding bowls
        colors = ['red', 'green', 'blue', 'orange', 'yellow']
        np.random.shuffle(colors)  # Shuffle colors to ensure randomness

        # Add bowls to the environment
        bowl_poses = []
        for i in range(n_bowls):
            color = utils.COLORS[colors[i]]
            bowl_pose = self.get_random_pose(env, bowl_size)
            env.add_object(bowl_urdf, bowl_pose, 'fixed', color=color)
            bowl_poses.append(bowl_pose)

        # Add cylinders to the environment
        cylinders = []
        for i in range(n_cylinders):
            color = utils.COLORS[colors[i]]
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': color}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Define the language goal for each cylinder
            language_goal = self.lang_template.format(color=colors[i])

            # Add goal for each cylinder to be placed in the corresponding bowl
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[bowl_poses[i]],
                          replace=True, rotations=False, metric='pose', params=None,
                          step_max_reward=1, language_goal=language_goal)

        # The task is set up with cylinders and bowls added to the environment and goals defined for each cylinder