import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class StandCylinderRingToss(Task):
    """Stack a series of uniquely colored cylinders over corresponding colored stands, imitating a ring toss game."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to have 5 goals, so max_steps is twice the number of goals
        self.lang_template = "place the {color} cylinder on the {color} stand"
        self.task_completed_desc = "done stacking all cylinders on stands."
        self.ee = Suction  # Using Suction end-effector to lift cylinders vertically

    def reset(self, env):
        super().reset(env)

        # Define the number of stands and cylinders
        n_stands = 5
        n_cylinders = n_stands

        # Define the size of the stands and cylinders
        stand_size = (0.05, 0.05, 0.05)  # (x, y, z) dimensions
        cylinder_size = (0.04, 0.04, 0.15)  # (x, y, z) dimensions

        # Define the URDF for the stand and the template for the cylinder
        stand_urdf = 'stacking/stand.urdf'
        cylinder_template = 'cylinder/cylinder-template.urdf'

        # Define available colors
        colors = ['red', 'green', 'blue', 'yellow', 'purple']

        # Add stands and cylinders to the environment
        stands = []
        cylinders = []
        for i in range(n_stands):
            # Add stand
            stand_pose = self.get_random_pose(env, stand_size)
            stand_id = env.add_object(stand_urdf, stand_pose, 'fixed')
            stands.append((stand_id, stand_pose))

            # Add cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            color_name = colors[i]
            color_rgb = utils.COLORS[color_name]
            replace = {
                'COLOR': color_rgb,
                'SIZE': cylinder_size
            }
            # IMPORTANT: REPLACE THE TEMPLATE URDF
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append((cylinder_id, cylinder_pose))

            # Define the language goal
            language_goal = self.lang_template.format(color=color_name)

            # Add goal for placing the cylinder on the corresponding stand
            self.add_goal(
                objs=[cylinder_id],
                matches=np.ones((1, 1)),  # Each cylinder matches with one stand
                targ_poses=[stand_pose],  # Target pose is the pose of the corresponding stand
                replace=False,  # Cylinders should not replace each other
                rotations=False,  # Rotation is not considered in this task
                metric='pose',  # We use pose metric to check if the cylinder is placed correctly
                params=None,  # No additional parameters needed
                step_max_reward=1 / n_cylinders,  # Reward is evenly distributed across all cylinders
                language_goal=language_goal  # Language goal for the current cylinder
            )

        # Set the number of steps to twice the number of goals
        self.max_steps = n_cylinders * 2