import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderPlacementSequence(Task):
    """Arrange a sequence of colored cylinders on matching colored zones on the tabletop, following a specific order from smallest to largest diameter."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we have 5 cylinders to place, 2 steps per cylinder
        self.ee = Suction  # Suction end-effector is needed to lift cylinders
        self.lang_template = "place the {color} cylinder on the {color} zone"
        self.task_completed_desc = "done placing all cylinders in sequence."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and their sizes
        n_cylinders = 5
        diameters = np.linspace(0.02, 0.10, n_cylinders)  # Smallest to largest diameters

        # Define colors for cylinders and zones
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        np.random.shuffle(colors)  # Shuffle colors to randomize cylinder order

        # Add zones with matching colors to cylinders
        zone_size = (0.12, 0.12, 0)  # Zones are flat squares on the table
        zone_urdf = 'zone/zone.urdf'
        zone_poses = []
        for i in range(n_cylinders):
            zone_pose = self.get_random_pose(env, zone_size)
            env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[colors[i]])
            zone_poses.append(zone_pose)

        # Add cylinders with corresponding colors and sizes
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i in range(n_cylinders):
            size = (diameters[i], diameters[i], 0.15)  # Height is constant, diameter varies
            pose = self.get_random_pose(env, size)
            replace = {'DIM': size, 'HALF': (size[0] / 2, size[1] / 2, size[2] / 2)}
            color = utils.COLORS[colors[i]]
            # Replace the template URDF with the specific size and color
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, pose, color=color)
            cylinders.append(cylinder_id)

        # Add goals for placing cylinders on matching zones
        for i in range(n_cylinders):
            language_goal = self.lang_template.format(color=colors[i])
            self.add_goal(objs=[cylinders[i]], matches=np.int32([[1]]), targ_poses=[zone_poses[i]],
                          replace=False, rotations=True, metric='pose', params=None,
                          step_max_reward=1/n_cylinders, language_goal=language_goal)

# Note: The task assumes that the zones and cylinders are matched by index after shuffling.
# The cylinders are placed in increasing order of diameter, and the zones are placed randomly on the table.
# The Suction end-effector is used to pick up the cylinders, and the task is completed when all cylinders are placed correctly.