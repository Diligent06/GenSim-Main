import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlCylinderSymmetry(Task):
    """Arrange six equally-spaced, differently-colored cylinders around a centrally-placed bowl on the tabletop, creating a symmetrical pattern."""

    def __init__(self):
        super().__init__()
        self.max_steps = 12  # We have 6 cylinders to place, so max_steps is set to twice that number
        self.ee = Suction  # Using Suction end-effector as we need to move objects on the Z axis
        self.lang_template = "place the {color} cylinder at the {position} position around the bowl"
        self.task_completed_desc = "done arranging the cylinders symmetrically around the bowl."

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders
        cylinder_colors = ['red', 'green', 'blue', 'orange', 'yellow', 'purple']
        # Define the size of the bowl and cylinders
        bowl_size = (0.18, 0.18, 0.06)  # (x, y, z) dimensions
        cylinder_size = (0.05, 0.05, 0.15)  # (x, y, z) dimensions

        # Add the central bowl
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_pose = self.get_random_pose(env, bowl_size)
        env.add_object(bowl_urdf, bowl_pose, 'fixed')

        # Add six cylinders around the bowl
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_poses = []
        for i in range(6):
            # Calculate the angle and position for each cylinder
            angle = i * (2 * np.pi / 6)  # equally spaced in a circle
            x = bowl_pose[0][0] + 0.2 * np.cos(angle)  # offset from the bowl's x-coordinate
            y = bowl_pose[0][1] + 0.2 * np.sin(angle)  # offset from the bowl's y-coordinate
            z = 0.01  # slightly above the table to avoid collision
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_pose[0] = (x, y, z)  # override the random x, y with calculated values

            # Set the color for the cylinder
            color_name = cylinder_colors[i]
            color_rgb = utils.COLORS[color_name]

            # Replace the template URDF with the specific color
            replace = {'COLOR': color_rgb}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinder_poses.append((cylinder_pose, (0, 0, 0, 1)))  # No rotation needed, quaternions for identity

            # Add language goal for each cylinder
            position_description = f"{i+1}-th"
            language_goal = self.lang_template.format(color=color_name, position=position_description)

            # Add goal for placing the cylinder
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[(cylinder_pose[0], (0, 0, 0, 1))],
                          replace=False, rotations=False, metric='pose', params=None, step_max_reward=1/6,
                          symmetries=[0], language_goal=language_goal)  # Symmetry is not needed as the pose is fixed

        # The task is to place the cylinders in a symmetrical pattern around the bowl
        # Each cylinder has a unique color and position, and they should be equally spaced