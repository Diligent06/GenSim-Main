import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderZonePlacement(Task):
    """Arrange three cylinders of different colors inside three distinct zones on a tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 goals and we set max_steps to twice the number of goals
        self.ee = Suction  # We use Suction because we need to move objects on the Z axis

        # Language templates for the task
        self.lang_template = "place the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done placing cylinders in zones."

        # Additional initialization if needed
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define cylinder colors and corresponding zones
        colors = ['red', 'blue', 'green']
        zone_colors = ['red', 'blue', 'green']

        # Define cylinder size
        cylinder_size = (0.05, 0.05, 0.15)  # (radius, radius, height)

        # Add zones and cylinders to the environment
        zones = []
        cylinders = []
        for color in colors:
            # Add zone
            zone_size = (0.15, 0.15, 0)  # Zones are flat squares on the table
            zone_pose = self.get_random_pose(env, zone_size)
            zone_urdf = 'zone/zone.urdf'
            zone_id = env.add_object(zone_urdf, zone_pose, utils.COLORS[color], 'fixed')
            zones.append((zone_id, zone_pose))

            # Add cylinder
            cylinder_template = 'cylinder/cylinder-template.urdf'
            replace = {'COLOR': utils.COLORS[color]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append((cylinder_id, cylinder_pose))

            # Define the language goal
            language_goal = self.lang_template.format(color=color)

            # Add goal for each cylinder to be in the matching color zone
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_pose], replace=True,
                          rotations=False, metric='zone', params=[(zone_pose, zone_size)], step_max_reward=1/3,
                          language_goal=language_goal)

        # Shuffle the cylinders to ensure the task requires identification of the correct cylinder
        np.random.shuffle(cylinders)