import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorMatchingPyramid(Task):
    """
    Carefully place differently colored balls into corresponding colored bowls that are stacked in a pyramid,
    ensuring the structure's stability is maintained.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is set to twice the number of goals
        self.lang_template = "put the {color} ball in the {color} bowl"
        self.task_completed_desc = "done creating the color-matching pyramid."
        self.ee = Suction  # Using Suction end-effector as we need to move objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define colors for the balls and bowls
        ball_colors = ['red', 'green', 'blue']
        bowl_colors = ['red', 'green', 'blue']

        # Define sizes for the balls and bowls
        ball_size = (0.04, 0.04, 0.04)  # (x, y, z) dimensions
        bowl_size = (0.12, 0.12, 0.06)  # (x, y, z) dimensions

        # Add bowls in a pyramid structure
        bowls = []
        for i, color in enumerate(bowl_colors):
            bowl_pose = self.get_random_pose(env, bowl_size)
            bowl_urdf = 'bowl/bowl.urdf'
            bowl_id = env.add_object(bowl_urdf, bowl_pose, color=utils.COLORS[color])
            bowls.append((bowl_id, bowl_pose))

        # Add balls with corresponding colors
        balls = []
        for i, color in enumerate(ball_colors):
            ball_pose = self.get_random_pose(env, ball_size)
            ball_template = 'ball/ball-template.urdf'
            replace = {'COLOR': utils.COLORS[color]}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append((ball_id, ball_pose))

        # Define target poses for the balls to be placed in the corresponding colored bowls
        # The target pose is the pose of the bowl with an adjusted z-coordinate for the ball to be above the bowl
        for i, (ball_id, _) in enumerate(balls):
            color = ball_colors[i]
            # Find the corresponding bowl with the same color
            target_bowl_pose = next(pose for (bid, pose), bcolor in zip(bowls, bowl_colors) if bcolor == color)
            # Adjust the z-coordinate to place the ball above the bowl
            target_pose = (target_bowl_pose[0], (0, 0, target_bowl_pose[0][2] + ball_size[2]/2))
            language_goal = self.lang_template.format(color=color)
            # Add goal for placing the ball in the bowl
            self.add_goal(objs=[ball_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/3, language_goal=language_goal)

        # The task is to place each ball in the bowl with the matching color
        # The bowls are placed in a pyramid structure, and the balls must be placed carefully to maintain stability