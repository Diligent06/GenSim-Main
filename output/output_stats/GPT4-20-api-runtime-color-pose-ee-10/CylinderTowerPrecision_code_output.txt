import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderTowerPrecision(Task):
    """Stack five differently colored cylinders in a specific color order on a green stand without any cylinder falling or misaligning."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to stack 5 cylinders, so 10 steps should be sufficient
        self.lang_template = "stack the {color} cylinder"
        self.task_completed_desc = "done stacking the cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the color order for the cylinders
        color_order = ['red', 'blue', 'green', 'yellow', 'purple']
        cylinder_colors = [utils.COLORS[color] for color in color_order]

        # Add the green stand
        stand_size = (0.05, 0.05, 0.005)  # Size of the stand
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed', color=utils.COLORS['green'])

        # Add cylinders
        cylinder_size = (0.02, 0.02, 0.08)  # Diameter and height of the cylinder
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_poses = []
        cylinders = []

        for i, color in enumerate(cylinder_colors):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_poses.append(cylinder_pose)

            # Replace the template URDF with the specific color and size
            replace = {'COLOR': color, 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Define the language goal
            language_goal = self.lang_template.format(color=color_order[i])

            # Define the target pose for the cylinder on the stand
            # The target pose is directly above the stand with an increment in z for each cylinder
            target_pose = (stand_pose[0], (0, 0, stand_pose[0][2] + (i + 1) * cylinder_size[2]))

            # Add the goal for each cylinder
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/5,
                          language_goal=language_goal)

        # Set the task to be completed when all cylinders are stacked in the correct order
        self.goals[-1].update({'description': self.task_completed_desc})