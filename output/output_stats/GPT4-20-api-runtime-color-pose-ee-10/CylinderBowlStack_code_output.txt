import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderBowlStack(Task):
    """Arrange a set of three colored cylinders of different diameters inside a bowl without any of them falling over or touching the bowl's rim."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We expect to call self.add_goal three times, so we set max_steps to twice that number
        self.lang_template = "put the {color} cylinder in the bowl without touching the bowl's rim"
        self.task_completed_desc = "done stacking cylinders in the bowl."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the bowl properties
        bowl_size = (0.18, 0.18, 0.06)  # Size of the bowl (x, y, z)
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_pose = self.get_random_pose(env, bowl_size)
        env.add_object(bowl_urdf, bowl_pose, category='fixed')

        # Define the cylinders properties
        # We will create three cylinders with different diameters
        cylinder_sizes = [(0.05, 0.05, 0.1), (0.04, 0.04, 0.1), (0.03, 0.03, 0.1)]
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_colors = ['red', 'green', 'blue']  # Colors for the cylinders
        cylinder_poses = []  # To store the initial poses of the cylinders
        cylinder_objs = []  # To store the object IDs of the cylinders

        # Add cylinders to the environment
        for i in range(3):
            size = cylinder_sizes[i]
            color_name = cylinder_colors[i]
            color = utils.COLORS[color_name]  # Get the RGB values for the color
            pose = self.get_random_pose(env, size)
            replace = {'SIZE': size, 'COLOR': color}
            urdf = self.fill_template(cylinder_template, replace)
            obj_id = env.add_object(urdf, pose)
            cylinder_poses.append(pose)
            cylinder_objs.append(obj_id)

            # Add goal for each cylinder
            # The target pose is the same as the initial bowl pose, but we only need the position (x, y, z)
            # We don't need to specify the orientation (quaternion) since the cylinders are symmetrical around the z-axis
            language_goal = self.lang_template.format(color=color_name)
            self.add_goal(objs=[obj_id], matches=np.int32([[1]]), targ_poses=[(bowl_pose[0], None)], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/3, language_goal=language_goal)

        # Note: We set replace=False because each cylinder must go into a unique position within the bowl
        # We set rotations=False because the cylinders are symmetrical and rotation does not matter for the goal
        # The step_max_reward is 1/3 because we have three goals and each goal completion gives 1/3 of the total reward