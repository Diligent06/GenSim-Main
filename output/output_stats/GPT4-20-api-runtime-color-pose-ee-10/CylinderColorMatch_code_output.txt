import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderColorMatch(Task):
    """
    Arrange a set of colored cylinders into matching colored zones on the tabletop,
    ensuring that each cylinder stands upright within its respective area.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to call self.add_goal twice, so set max_steps to twice that number
        self.lang_template = "place the {color} cylinder in the matching {color} zone"
        self.task_completed_desc = "done arranging cylinders."
        self.ee = Suction  # Use Suction end-effector to pick and place cylinders vertically

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones
        n_cylinders = 2

        # Define cylinder size and color
        cylinder_size = (0.04, 0.04, 0.1)  # Diameter, Diameter, Height
        cylinder_colors = ['red', 'green']  # Define the colors for the cylinders

        # Add cylinders to the environment
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for color in cylinder_colors:
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Get the color RGB values using the utils.COLORS dictionary
            color_rgb = utils.COLORS[color]
            # Replace the placeholders in the URDF template
            replace = {'COLOR': color_rgb}
            # Generate the URDF for the cylinder
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder object to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append((cylinder_id, color))

        # Add zones to the environment
        zone_size = (0.1, 0.1, 0)  # Length, Width, (Height is not needed for zones)
        zone_urdf = 'zone/zone.urdf'
        for cylinder_id, color in cylinders:
            # Get a random pose for the zone
            zone_pose = self.get_random_pose(env, zone_size)
            # Get the color RGB values using the utils.COLORS dictionary
            color_rgb = utils.COLORS[color]
            # Add the zone object to the environment with the same color as the cylinder
            env.add_object(zone_urdf, zone_pose, 'fixed', color=color_rgb)

            # Define the language goal for placing the cylinder in the zone
            language_goal = self.lang_template.format(color=color)
            # Add the goal for the cylinder to be placed in the zone
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1,
                          language_goal=language_goal)

# Instantiate the task
task = CylinderColorMatch()