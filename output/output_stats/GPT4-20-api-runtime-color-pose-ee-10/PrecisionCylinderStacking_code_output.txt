import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionCylinderStacking(Task):
    """Stack a series of increasingly smaller colored cylinders onto a larger base cylinder without toppling the structure."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to stack up to 5 cylinders, so 10 steps should be sufficient
        self.lang_template = "stack the {color} cylinder on top of the {base_color} one"
        self.task_completed_desc = "done precision cylinder stacking."
        self.ee = Suction  # Use suction end-effector for precise vertical stacking

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders to stack and their sizes
        n_cylinders = 5
        base_size = 0.1  # Base cylinder size
        size_decrement = 0.01  # Size decrement for each smaller cylinder

        # Define the base cylinder
        base_urdf = 'cylinder/cylinder-template.urdf'
        base_pose = self.get_random_pose(env, (base_size, base_size, base_size))
        base_color = utils.COLORS['blue']  # Base cylinder color
        replace = {'SIZE': base_size, 'COLOR': base_color}
        base_cylinder_urdf = self.fill_template(base_urdf, replace)
        base_cylinder_id = env.add_object(base_cylinder_urdf, base_pose, 'fixed')

        # Initialize list to keep track of cylinder IDs and their target poses
        cylinder_ids = []
        target_poses = []

        # Add increasingly smaller cylinders
        for i in range(1, n_cylinders):
            # Decrease size for each cylinder
            size = base_size - i * size_decrement
            color_name = np.random.choice(list(utils.COLORS.keys()))
            color = utils.COLORS[color_name]  # Random color for the cylinder

            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, (size, size, size))

            # Fill in the URDF template for the cylinder
            replace = {'SIZE': size, 'COLOR': color}
            cylinder_urdf = self.fill_template(base_urdf, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinder_ids.append(cylinder_id)

            # Define the target pose for the cylinder (directly on top of the previous one)
            target_pose = (base_pose[0], base_pose[1])  # Same position as base, but will be adjusted in height
            target_poses.append(target_pose)

            # Add language goal for each cylinder
            language_goal = self.lang_template.format(color=color_name, base_color='blue')
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

            # Update the base pose to be the pose of the new top cylinder
            base_pose = (base_pose[0][0], base_pose[0][1], base_pose[0][2] + size, base_pose[1])

        # Add a stand for the base cylinder to sit on
        stand_size = (0.15, 0.15, 0.02)  # Stand size
        stand_urdf = 'stand/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, 'fixed')

        # The task is to stack all cylinders on the base cylinder, which is on the stand
        # The target pose for the base cylinder is the stand's pose adjusted for the cylinder's height
        base_target_pose = (stand_pose[0][0], stand_pose[0][1], stand_pose[0][2] + base_size/2, stand_pose[1])
        self.add_goal(objs=[base_cylinder_id], matches=np.int32([[1]]), targ_poses=[base_target_pose], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1/n_cylinders,
                      language_goal=self.lang_template.format(color='blue', base_color='stand'))