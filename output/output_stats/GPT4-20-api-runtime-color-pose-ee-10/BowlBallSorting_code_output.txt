import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlBallSorting(Task):
    """Sort a set of colored balls into their corresponding colored bowls."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to call self.add_goal twice, so we set max_steps to twice that number
        self.lang_template = "put the {color} ball in the {color} bowl"
        self.task_completed_desc = "done sorting balls into bowls."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the number of bowls and balls
        n_bowls = 3
        n_balls = n_bowls

        # Define the size of the bowls and balls
        bowl_size = (0.18, 0.18, 0.06)  # (x, y, z) dimensions
        ball_size = (0.04, 0.04, 0.04)  # (x, y, z) dimensions

        # Define the URDF paths for the bowls and balls
        bowl_urdf = 'bowl/bowl.urdf'
        ball_template = 'ball/ball-template.urdf'

        # Initialize lists to store the poses and colors of the bowls and balls
        bowl_poses = []
        ball_colors = []
        ball_ids = []

        # Define available colors
        colors = ['red', 'green', 'blue']

        # Add bowls to the environment
        for i in range(n_bowls):
            # Get a random pose for the bowl
            bowl_pose = self.get_random_pose(env, obj_size=bowl_size)
            # Add the bowl to the environment with a fixed color
            env.add_object(bowl_urdf, bowl_pose, 'fixed', color=utils.COLORS[colors[i]])
            # Store the pose of the bowl
            bowl_poses.append(bowl_pose)

        # Add balls to the environment
        for i in range(n_balls):
            # Get a random pose for the ball
            ball_pose = self.get_random_pose(env, obj_size=ball_size)
            # Define the color for the ball
            color = utils.COLORS[colors[i]]
            ball_colors.append(color)
            # Replace the color in the ball URDF template
            replace = {'COLOR': color}
            # IMPORTANT: REPLACE THE TEMPLATE URDF with `fill_template`
            ball_urdf = self.fill_template(ball_template, replace)
            # Add the ball to the environment
            ball_id = env.add_object(ball_urdf, ball_pose)
            # Store the ID of the ball
            ball_ids.append(ball_id)

        # Define the goals for sorting the balls into the bowls
        for i in range(n_balls):
            # Define the language goal for the current ball
            language_goal = self.lang_template.format(color=colors[i])
            # Add the goal for the current ball to be in the corresponding bowl
            self.add_goal(objs=[ball_ids[i]], matches=np.int32([[1]]), targ_poses=[bowl_poses[i]],
                          replace=False, rotations=False, metric='pose', params=None,
                          step_max_reward=1, language_goal=language_goal)

        # The task is set up with each ball having a corresponding goal to be placed in a bowl of the same color