import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class HeightOrderedCylinderPlacement(Task):
    """Arrange five cylinders of different colors and heights into a descending order of height within five designated zones marked on the tabletop, ensuring that each cylinder's color matches the color of its zone."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to place each cylinder, so 5 steps, and double for safety
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction gripper
        self.lang_template = "place the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done placing all cylinders in height order."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones
        n_cylinders = 5
        n_zones = 5

        # Define cylinder colors and corresponding zones
        cylinder_colors = ['red', 'green', 'blue', 'yellow', 'purple']
        zone_colors = ['red', 'green', 'blue', 'yellow', 'purple']
        np.random.shuffle(zone_colors)  # Shuffle zone colors for variability

        # Add cylinders with varying heights
        cylinders = []
        heights = np.linspace(0.1, 0.2, n_cylinders)  # Heights between 0.1 and 0.2 meters
        np.random.shuffle(heights)  # Shuffle heights for variability
        for i in range(n_cylinders):
            # Define the size and pose of the cylinder
            size = (0.05, 0.05, heights[i])  # Diameter 0.1m, height as per the heights array
            pose = self.get_random_pose(env, size)
            color = utils.COLORS[cylinder_colors[i]]

            # Add cylinder object
            cylinder_urdf = 'cylinder/cylinder-template.urdf'
            replace = {'SIZE': size, 'COLOR': color}
            urdf = self.fill_template(cylinder_urdf, replace)
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append((cylinder_id, heights[i], cylinder_colors[i]))

        # Sort cylinders by height in descending order
        cylinders.sort(key=lambda x: x[1], reverse=True)

        # Add zones
        zone_size = (0.07, 0.07, 0)  # Zones are slightly larger than the cylinder base
        for i, color_name in enumerate(zone_colors):
            # Define the pose of the zone
            zone_pose = self.get_random_pose(env, zone_size)
            color = utils.COLORS[color_name]

            # Add zone object
            zone_urdf = 'zone/zone.urdf'
            env.add_object(zone_urdf, zone_pose, 'fixed', color=color)

            # Define the goal for each cylinder
            cylinder_id, _, cylinder_color = cylinders[i]
            language_goal = self.lang_template.format(color=cylinder_color)
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_pose],
                          replace=False, rotations=False, metric='zone', params=[(zone_pose, zone_size)],
                          step_max_reward=1/n_cylinders, language_goal=language_goal)