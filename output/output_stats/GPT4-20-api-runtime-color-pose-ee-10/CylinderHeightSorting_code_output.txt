import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderHeightSorting(Task):
    """Arrange five cylindrical objects of varying heights into ascending order on a single green line marked on the tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to move each cylinder once and have some buffer
        self.ee = Suction  # Suction end-effector is suitable for picking up cylinders
        self.lang_template = "sort the cylinders on the green line by height in ascending order"
        self.task_completed_desc = "done sorting cylinders by height."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Add a single green line to the environment
        line_size = (0.6, 0.05, 0.001)  # Size of the line
        line_pose = self.get_random_pose(env, line_size)  # Random pose for the line
        line_urdf = 'line/single-green-line-template.urdf'
        env.add_object(line_urdf, line_pose, 'fixed')  # Add the line as a fixed object

        # Define the number of cylinders and their heights
        n_cylinders = 5
        heights = np.linspace(0.05, 0.25, n_cylinders)  # Heights from 0.05 to 0.25 meters
        np.random.shuffle(heights)  # Shuffle the heights to randomize initial placement

        # Add cylinders with varying heights
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i in range(n_cylinders):
            # Define the size of the cylinder based on its height
            size = (0.04, 0.04, heights[i])  # Diameter is fixed, height varies
            pose = self.get_random_pose(env, size)  # Get a random pose for the cylinder
            color = utils.COLORS['silver']  # Color of the cylinder
            replace = {'SIZE': size, 'COLOR': color}
            urdf = self.fill_template(cylinder_template, replace)  # Fill the URDF template
            cylinder_id = env.add_object(urdf, pose)  # Add the cylinder to the environment
            cylinders.append((cylinder_id, heights[i]))  # Keep track of the cylinder and its height

        # Sort the cylinders by height to define the target order
        cylinders.sort(key=lambda x: x[1])

        # Define the target poses along the green line for sorted cylinders
        line_x, line_y, _ = line_pose[0]  # Get the x, y coordinates of the line's pose
        spacing = 0.1  # Spacing between cylinders
        start_x = line_x - line_size[0] / 2 + spacing  # Starting x-coordinate
        targ_poses = []
        for i in range(n_cylinders):
            # Calculate the x-coordinate for each cylinder's target pose
            x = start_x + i * spacing
            # The target pose has the same y and z-coordinates as the line, and no rotation
            targ_poses.append(((x, line_y, heights[i] / 2), (0, 0, 0, 1)))

        # Add a single goal for sorting all cylinders
        self.add_goal(objs=[cyl[0] for cyl in cylinders], matches=np.eye(n_cylinders),
                      targ_poses=targ_poses, replace=True, rotations=False,
                      metric='pose', params=None, step_max_reward=1,
                      language_goal=self.lang_template)