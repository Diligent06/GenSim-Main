import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionPlacementPyramid(Task):
    """Create a color-graded pyramid by placing smaller objects on top of larger ones,
    arranging five different colored cylinders in a 2-2-1 formation, with the largest at the base
    and the smallest at the top, coordinating the colors from darkest at the bottom to lightest at the top."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We will have 5 placement goals, so set max_steps to twice the number of goals
        self.lang_template = "place the {color} cylinder on the {position} position"
        self.task_completed_desc = "done creating the precision placement pyramid."
        self.ee = Suction  # Use Suction end-effector to move objects on the Z axis
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define cylinder colors from darkest to lightest
        colors = ['brown', 'red', 'orange', 'yellow', 'white']
        color_rgb = [utils.COLORS[color] for color in colors]

        # Define cylinder sizes from largest to smallest
        sizes = [(0.08, 0.08, 0.04),  # Base cylinders
                 (0.06, 0.06, 0.04),  # Middle cylinders
                 (0.04, 0.04, 0.04)]  # Top cylinder

        # Add target zone
        zone_size = (0.3, 0.3, 0)  # Define a large enough zone to contain the pyramid
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_poses = []
        for i, size in enumerate(sizes):
            for j in range(2 if i < 2 else 1):  # Add 2 cylinders for base and middle, 1 for top
                pose = self.get_random_pose(env, size)
                replace = {'DIM': size, 'COLOR': color_rgb[i * 2 + j]}
                urdf = self.fill_template(cylinder_template, replace)
                cylinder_id = env.add_object(urdf, pose)
                cylinder_poses.append((cylinder_id, pose))

        # Define target poses for the cylinders
        # Base level positions
        base_positions = [(zone_pose[0][0] - 0.05, zone_pose[0][1] - 0.05, zone_pose[0][2] + sizes[0][2]),
                          (zone_pose[0][0] + 0.05, zone_pose[0][1] - 0.05, zone_pose[0][2] + sizes[0][2])]
        # Middle level positions
        middle_positions = [(zone_pose[0][0] - 0.025, zone_pose[0][1] + 0.025, zone_pose[0][2] + sizes[0][2] + sizes[1][2]),
                            (zone_pose[0][0] + 0.025, zone_pose[0][1] + 0.025, zone_pose[0][2] + sizes[0][2] + sizes[1][2])]
        # Top level position
        top_position = [(zone_pose[0][0], zone_pose[0][1] + 0.05, zone_pose[0][2] + sizes[0][2] + sizes[1][2] + sizes[2][2])]

        # Combine all target positions
        target_positions = base_positions + middle_positions + top_position

        # Add goals for each cylinder
        for i, (cylinder_id, _) in enumerate(cylinder_poses):
            position_name = "base" if i < 2 else "middle" if i < 4 else "top"
            language_goal = self.lang_template.format(color=colors[i], position=position_name)
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_positions[i]],
                          replace=False, rotations=True, metric='pose', params=None,
                          step_max_reward=1 / len(cylinder_poses), language_goal=language_goal)