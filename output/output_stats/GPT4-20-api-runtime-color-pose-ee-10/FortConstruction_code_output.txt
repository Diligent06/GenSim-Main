import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class FortConstruction(Task):
    """Construct a fort within a marked zone by placing a base layer of evenly spaced blue blocks,
    a second layer of green blocks, and a red block at the top center, while keeping the structure
    within the zone boundary and stable."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is twice that
        self.lang_template = "build a fort with {color} blocks"
        self.task_completed_desc = "done constructing the fort."
        self.ee = Suction  # We need to move objects on the Z axis, so we use Suction
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the size and pose of the goal zone
        zone_size = (0.3, 0.3, 0)  # A square zone
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Define block sizes and colors
        block_size = (0.04, 0.04, 0.04)  # Uniform size for all blocks
        blue_color = utils.COLORS['blue']
        green_color = utils.COLORS['green']
        red_color = utils.COLORS['red']

        # Add blue blocks for the base layer
        blue_blocks = []
        for _ in range(4):  # We want 4 blue blocks
            block_pose = self.get_random_pose(env, block_size)
            block_id = env.add_object('stacking/block.urdf', block_pose, color=blue_color)
            blue_blocks.append(block_id)

        # Add green blocks for the second layer
        green_blocks = []
        for _ in range(2):  # We want 2 green blocks
            block_pose = self.get_random_pose(env, block_size)
            block_id = env.add_object('stacking/block.urdf', block_pose, color=green_color)
            green_blocks.append(block_id)

        # Add the red block for the top center
        red_block_pose = self.get_random_pose(env, block_size)
        red_block_id = env.add_object('stacking/block.urdf', red_block_pose, color=red_color)

        # Define target poses for the blocks within the zone
        # Base layer of blue blocks evenly spaced
        blue_target_poses = [
            (utils.apply(zone_pose, (0.1, 0.1, 0.02)), zone_pose[1]),
            (utils.apply(zone_pose, (-0.1, 0.1, 0.02)), zone_pose[1]),
            (utils.apply(zone_pose, (0.1, -0.1, 0.02)), zone_pose[1]),
            (utils.apply(zone_pose, (-0.1, -0.1, 0.02)), zone_pose[1])
        ]

        # Second layer of green blocks
        green_target_poses = [
            (utils.apply(zone_pose, (0, 0.1, 0.06)), zone_pose[1]),
            (utils.apply(zone_pose, (0, -0.1, 0.06)), zone_pose[1])
        ]

        # Top center red block
        red_target_pose = (utils.apply(zone_pose, (0, 0, 0.1)), zone_pose[1])

        # Add goals for each layer
        # Goal for base layer of blue blocks
        self.add_goal(objs=blue_blocks, matches=np.ones((4, 4)), targ_poses=blue_target_poses, replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3,
                      language_goal=self.lang_template.format(color='blue'))

        # Goal for second layer of green blocks
        self.add_goal(objs=green_blocks, matches=np.ones((2, 2)), targ_poses=green_target_poses, replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3,
                      language_goal=self.lang_template.format(color='green'))

        # Goal for top center red block
        self.add_goal(objs=[red_block_id], matches=np.ones((1, 1)), targ_poses=[red_target_pose], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3,
                      language_goal=self.lang_template.format(color='red'))