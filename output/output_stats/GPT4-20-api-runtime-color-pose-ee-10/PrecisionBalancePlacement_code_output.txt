import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionBalancePlacement(Task):
    """Place a set number of balls, each with a specified color, onto the convex surface of an inverted bowl without allowing any to fall off."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we want to place 5 balls, 2 steps per ball (pick and place)
        self.lang_template = "place the {color} ball on the inverted bowl"
        self.task_completed_desc = "done placing all balls on the bowl."
        self.ee = Suction  # Suction is needed to pick up the balls
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Add an inverted bowl to the environment
        bowl_size = (0.18, 0.18, 0.06)  # Approximate size of the bowl
        bowl_pose = self.get_random_pose(env, bowl_size)
        bowl_urdf = 'bowl/bowl.urdf'
        env.add_object(bowl_urdf, bowl_pose, 'fixed')

        # Define the number and colors of balls to be placed
        n_balls = 5
        ball_colors = ['red', 'blue', 'green', 'yellow', 'purple']
        ball_size = (0.04, 0.04, 0.04)  # Approximate size of the balls

        # Add balls to the environment
        ball_template = 'ball/ball-template.urdf'
        for i in range(n_balls):
            color_name = ball_colors[i]
            color_rgb = utils.COLORS[color_name]
            ball_pose = self.get_random_pose(env, ball_size)
            replace = {'COLOR': color_rgb}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose)
            
            # Define the language goal for placing each ball
            language_goal = self.lang_template.format(color=color_name)
            
            # Add a goal for each ball to be placed on the bowl
            # The target pose is the same as the bowl pose, but we don't need to specify rotation for the balls
            self.add_goal(objs=[ball_id], matches=np.ones((1, 1)), targ_poses=[(bowl_pose[0], None)], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_balls,
                          language_goal=language_goal)

# Instantiate the task
task = PrecisionBalancePlacement()