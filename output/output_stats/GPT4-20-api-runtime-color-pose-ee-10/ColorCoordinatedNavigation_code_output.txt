import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Spatula

class ColorCoordinatedNavigation(Task):
    """
    Navigate around stationary container obstacles to sort colored balls into matching colored bowls on the tabletop,
    with each bowl accepting only one ball.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to call self.add_goal twice, so we set this to twice that number.
        self.lang_template = "put the {color} ball in the {color} bowl"
        self.task_completed_desc = "done sorting the colored balls."
        self.ee = Spatula  # We use Spatula as we are moving objects in a 2D plane.
        self.primitive = primitives.push  # We use the push primitive for this task.
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the colors available for the balls and bowls.
        colors = ['red', 'green', 'blue', 'yellow', 'purple', 'orange']

        # Randomly select two different colors for the balls and bowls.
        selected_colors = np.random.choice(colors, 2, replace=False)

        # Add two bowls with the selected colors.
        bowl_size = (0.12, 0.12, 0)  # Bowls are flat on the z-axis.
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_poses = []
        for color in selected_colors:
            bowl_pose = self.get_random_pose(env, bowl_size)
            env.add_object(bowl_urdf, bowl_pose, 'fixed', color=utils.COLORS[color])
            bowl_poses.append(bowl_pose)

        # Add two balls with the selected colors.
        ball_size = (0.04, 0.04, 0.04)  # Diameter of the ball is 0.04.
        ball_template = 'ball/ball-template.urdf'
        balls = []
        for color in selected_colors:
            ball_pose = self.get_random_pose(env, ball_size)
            replace = {'COLOR': utils.COLORS[color]}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append(ball_id)

        # Add stationary container obstacles.
        container_size = (0.1, 0.1, 0.1)  # Containers are cubes.
        container_template = 'container/container-template.urdf'
        n_containers = 3
        for _ in range(n_containers):
            container_pose = self.get_random_pose(env, container_size)
            container_urdf = self.fill_template(container_template, {'DIM': container_size})
            env.add_object(container_urdf, container_pose, 'fixed')

        # Define goals for sorting balls into matching colored bowls.
        for i, color in enumerate(selected_colors):
            language_goal = self.lang_template.format(color=color)
            # The target pose for each ball is the pose of the matching colored bowl.
            self.add_goal(objs=[balls[i]], matches=np.ones((1, 1)), targ_poses=[bowl_poses[i]],
                          replace=False, rotations=False, metric='pose', params=None,
                          step_max_reward=1, language_goal=language_goal)

# Instantiate the task.
task = ColorCoordinatedNavigation()