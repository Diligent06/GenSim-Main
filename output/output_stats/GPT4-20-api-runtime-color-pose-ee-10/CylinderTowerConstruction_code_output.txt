import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderTowerConstruction(Task):
    """Stack five cylinders of varying colors into a vertical tower on top of a stand."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We have 5 cylinders to stack, so 10 steps should be sufficient
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction gripper
        self.lang_template = "stack the {color} cylinder on the tower"
        self.task_completed_desc = "done constructing the cylinder tower."

    def reset(self, env):
        super().reset(env)

        # Define the size and pose of the stand
        stand_size = (0.15, 0.15, 0.02)  # Size of the stand
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Define cylinder properties
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.05, 0.05, 0.1)  # Diameter and height of the cylinder
        cylinder_colors = ['red', 'green', 'blue', 'yellow', 'purple']  # Cylinder colors

        # Add cylinders and define their goals
        z_offset = cylinder_size[2] / 2  # Half the height of the cylinder
        for i in range(5):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Set the color of the cylinder
            color_name = cylinder_colors[i]
            color_rgb = utils.COLORS[color_name]
            # Replace the template URDF with the specific color
            replace = {'COLOR': (color_rgb[0], color_rgb[1], color_rgb[2])}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            
            # Define the target pose for the cylinder, stacked on the stand
            target_pose = (stand_pose[0], stand_pose[1])  # Same x, y as the stand, z is incremented
            target_pose[0][2] += z_offset + i * cylinder_size[2]  # Increment z for each cylinder
            
            # Define the language goal
            language_goal = self.lang_template.format(color=color_name)
            
            # Add the goal for the current cylinder
            self.add_goal(objs=[cylinder_id], 
                          matches=np.ones((1, 1)), 
                          targ_poses=[target_pose], 
                          replace=False, 
                          rotations=True, 
                          metric='pose', 
                          params=None, 
                          step_max_reward=1 / 5, 
                          language_goal=language_goal)

        # Set the progress metric
        self.progress = 0