import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils

class ColorCodedCylinderArrangement(Task):
    """
    Sort five differently colored cylinders on a tabletop by placing each into matching colored zones
    without overlapping, creating a color gradient from one side of the zone to the other.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Set to twice the number of goals for safety
        self.ee = Suction  # Use suction end-effector to pick up cylinders

        # Descriptions for language grounding
        self.lang_template = "put the {color} cylinder in the matching {color} zone"
        self.task_completed_desc = "done sorting cylinders."

    def reset(self, env):
        super().reset(env)

        # Define colors for cylinders and zones
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [f"{color} cylinder" for color in colors]

        # Add zones with matching colors
        zone_size = (0.1, 0.1, 0)  # Flat zones
        zone_urdf = 'zone/zone.urdf'
        zone_poses = []
        for color in colors:
            zone_pose = self.get_random_pose(env, zone_size)
            env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[color])
            zone_poses.append(zone_pose)

        # Add cylinders with matching colors
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.02, 0.02, 0.1)  # Diameter and height for the cylinder
        cylinders = []
        for i, color in enumerate(colors):
            # Generate a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Set the color for the cylinder
            replace = {'COLOR': utils.COLORS[color]}
            # Create the URDF using the template
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Define the language goal for each cylinder
            language_goal = self.lang_template.format(color=color)

            # Add goal for each cylinder to be in the matching color zone
            self.add_goal(objs=[cylinder_id], 
                          matches=np.int32([[1]]), 
                          targ_poses=[zone_poses[i]],  # Target pose is the matching zone pose
                          replace=False, 
                          rotations=False,  # Rotation is not considered for this task
                          metric='zone', 
                          params=[(zone_poses[i], zone_size)],  # Parameters for the zone
                          step_max_reward=1 / len(colors),  # Reward is split across all cylinders
                          language_goal=language_goal)