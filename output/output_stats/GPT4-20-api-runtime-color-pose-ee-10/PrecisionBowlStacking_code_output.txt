import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionBowlStacking(Task):
    """
    Stack a specific sequence of colored bowls inside each other without toppling,
    creating a nested set from largest to smallest, ensuring each bowl is placed
    with its opening facing upwards.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We will have 2 goals, so max_steps is twice that
        self.lang_template = "stack the {color} bowl inside the {inner_color} one"
        self.task_completed_desc = "done stacking bowls."
        self.ee = Suction  # Using Suction end-effector to lift bowls on Z axis

    def reset(self, env):
        super().reset(env)

        # Define the sequence of bowl colors from largest to smallest
        bowl_colors = ['red', 'green', 'blue', 'yellow']
        bowl_sizes = [(0.18, 0.18, 0.08),  # Largest bowl
                      (0.15, 0.15, 0.06),  # Medium bowl
                      (0.12, 0.12, 0.04),  # Small bowl
                      (0.09, 0.09, 0.02)]  # Smallest bowl

        # Add bowls to the environment with decreasing sizes
        bowls = []
        for i, color in enumerate(bowl_colors):
            # Get a random pose for the bowl ensuring it's within the workspace bounds
            pose = self.get_random_pose(env, bowl_sizes[i])
            # Use the bowl URDF file for the object
            bowl_urdf = 'bowl/bowl.urdf'
            # Add the bowl to the environment and store its ID
            bowl_id = env.add_object(bowl_urdf, pose, color=utils.COLORS[color])
            bowls.append((bowl_id, pose))

        # Define goals for stacking the bowls
        for i in range(len(bowls) - 1):
            # The target pose for the current bowl is the position of the next smaller bowl
            # with an adjusted z-coordinate to stack on top
            target_pose = list(bowls[i + 1][1])
            target_pose[0][2] += bowl_sizes[i][2]  # Adjust z-coordinate

            # Define the language goal for this step
            language_goal = self.lang_template.format(color=bowl_colors[i], inner_color=bowl_colors[i + 1])

            # Add the goal for stacking the current bowl into the next smaller one
            self.add_goal(objs=[bowls[i][0]],  # Object ID of the current bowl
                          matches=np.ones((1, 1)),  # Single match since one bowl per step
                          targ_poses=[tuple(target_pose)],  # Target pose for the bowl
                          replace=False,  # Each bowl has a unique target
                          rotations=False,  # Rotation is not considered in this task
                          metric='pose',  # We are using pose metric for precision placement
                          params=None,  # No additional parameters needed
                          step_max_reward=1,  # Full reward for completing this step
                          language_goal=language_goal)  # Language goal for this step