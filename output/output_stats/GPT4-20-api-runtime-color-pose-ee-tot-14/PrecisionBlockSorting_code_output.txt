import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionBlockSorting(Task):
    """Sort differently colored blocks into corresponding colored zones on a pallet."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we have 5 blocks to sort, 2 steps per block (pick & place)
        self.lang_template = "place the {color} block in the {color} zone"
        self.task_completed_desc = "done sorting all blocks."
        self.ee = Suction  # Use Suction end-effector for precise Z-axis control

    def reset(self, env):
        super().reset(env)

        # Define the number of blocks and zones
        n_blocks = 5
        n_zones = 5

        # Add pallet (fixed base where zones will be placed)
        pallet_size = (0.3, 0.3, 0.02)  # Size of the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Define block size
        block_size = (0.04, 0.04, 0.04)  # Size of the blocks

        # Define available colors
        colors = ['red', 'green', 'blue', 'yellow', 'purple']

        # Add zones and blocks to the environment
        zones = []
        blocks = []
        for i in range(n_blocks):
            # Add colored zone
            zone_urdf = 'zone/zone.urdf'
            zone_pose = self.get_random_pose(env, block_size)
            zone_color = utils.COLORS[colors[i]]  # Get the RGB values for the color
            zone_id = env.add_object(zone_urdf, zone_pose, 'fixed', color=zone_color)
            zones.append((zone_id, zone_pose))

            # Add colored block
            block_urdf = 'stacking/block.urdf'
            block_pose = self.get_random_pose(env, block_size)
            block_color = utils.COLORS[colors[i]]  # Get the RGB values for the color
            block_id = env.add_object(block_urdf, block_pose, color=block_color)
            blocks.append((block_id, block_pose))

            # Define the language goal for each block
            language_goal = self.lang_template.format(color=colors[i])

            # Add goal for each block to be placed in the corresponding zone
            self.add_goal(objs=[block_id],
                          matches=np.ones((1, 1)),  # Each block matches with one zone
                          targ_poses=[zone_pose],  # Target pose is the pose of the corresponding zone
                          replace=False,  # Blocks should not replace other blocks
                          rotations=False,  # No need for rotation in placement
                          metric='pose',  # Evaluate based on the pose of the block
                          params=None,  # No additional parameters needed
                          step_max_reward=1 / n_blocks,  # Reward is evenly distributed across blocks
                          language_goal=language_goal)  # Language goal for the current block