import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BallSortIntoColoredBoxes(Task):
    """Sort a set of colored balls into corresponding colored boxes arranged in a line on the tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to sort 5 balls, so 10 steps should be sufficient
        self.ee = Suction  # We use suction to pick up balls
        self.lang_template = "put the {color} ball in the {color} box"
        self.task_completed_desc = "done sorting balls into boxes."

    def reset(self, env):
        super().reset(env)

        # Define the number of balls and boxes
        n_balls = 5
        n_boxes = 5

        # Define the colors available
        colors = ['red', 'green', 'blue', 'yellow', 'purple']

        # Define the size of the balls and boxes
        ball_size = (0.04, 0.04, 0.04)  # (x, y, z) dimensions
        box_size = (0.1, 0.1, 0.05)  # (x, y, z) dimensions

        # Load URDF templates for balls and boxes
        ball_urdf_template = 'ball/ball-template.urdf'
        box_urdf_template = 'box/box-template.urdf'

        # Initialize lists to store object IDs and target poses
        ball_ids = []
        box_poses = []

        # Add boxes to the environment
        for i, color in enumerate(colors):
            # Generate a random pose for the box
            box_pose = self.get_random_pose(env, box_size)
            box_poses.append(box_pose)

            # Fill in the URDF template for the box
            replace = {'SIZE': box_size, 'COLOR': utils.COLORS[color]}
            box_urdf = self.fill_template(box_urdf_template, replace)

            # Add the box to the environment
            env.add_object(box_urdf, box_pose, 'fixed')

        # Add balls to the environment
        for i, color in enumerate(colors):
            # Generate a random pose for the ball
            ball_pose = self.get_random_pose(env, ball_size)

            # Fill in the URDF template for the ball
            replace = {'SIZE': ball_size, 'COLOR': utils.COLORS[color]}
            ball_urdf = self.fill_template(ball_urdf_template, replace)

            # Add the ball to the environment
            ball_id = env.add_object(ball_urdf, ball_pose)
            ball_ids.append(ball_id)

            # Define the language goal for sorting this ball
            language_goal = self.lang_template.format(color=color)

            # Add the sorting goal for this ball
            self.add_goal(objs=[ball_id], matches=np.int32([[1]]), targ_poses=[box_poses[i]], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_balls,
                          language_goal=language_goal)

        # The task is set up with each ball having a corresponding box of the same color