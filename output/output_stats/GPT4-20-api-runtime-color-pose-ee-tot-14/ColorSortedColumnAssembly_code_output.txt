import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorSortedColumnAssembly(Task):
    """Build a vertical column by stacking differently colored cylinders on top of one another in a predefined color sequence on a designated zone on the tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to stack 5 cylinders, so 10 steps should be sufficient
        self.lang_template = "stack the {color} cylinder"
        self.task_completed_desc = "done stacking the cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so Suction is appropriate

    def reset(self, env):
        super().reset(env)

        # Define the color sequence for the column
        color_sequence = ['red', 'green', 'blue', 'yellow', 'purple']
        n_cylinders = len(color_sequence)

        # Add the zone where the column will be assembled
        zone_size = (0.1, 0.1, 0)  # Size of the zone
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Add cylinders with the specified colors
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.05, 0.05, 0.1)  # Size of the cylinder
        cylinder_poses = []
        cylinder_ids = []

        for i, color_name in enumerate(color_sequence):
            # Get the color RGB values
            color = utils.COLORS[color_name]

            # Generate a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)

            # Fill the URDF template with the cylinder's properties
            replace = {'COLOR': color, 'SIZE': cylinder_size}
            urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinder_ids.append(cylinder_id)
            cylinder_poses.append(pose)

            # Define the language goal for stacking this cylinder
            language_goal = self.lang_template.format(color=color_name)

            # Calculate the target pose for the cylinder in the column
            # The x, y coordinates are the same as the zone, and z is incremented with each cylinder
            target_pose = (zone_pose[0], (0, 0, 0, 1))  # We don't need to specify rotation for cylinders

            # Add the goal for this cylinder
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

        # Set the initial positions of the cylinders to be the target positions for the next cylinder in the sequence
        for i in range(n_cylinders - 1):
            env.move_object(cylinder_ids[i + 1], cylinder_poses[i])

        # The last cylinder's initial position is already set to be above the zone