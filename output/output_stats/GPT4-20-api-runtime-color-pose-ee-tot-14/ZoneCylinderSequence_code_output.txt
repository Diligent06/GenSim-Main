import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ZoneCylinderSequence(Task):
    """Place a sequence of differently colored cylinders into corresponding color-coded zones on the tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we have 5 cylinders to place, 2 steps per cylinder
        self.lang_template = "place the {color} cylinder in the {color} zone"
        self.task_completed_desc = "all cylinders placed in the correct zones."
        self.ee = Suction  # Using Suction end-effector as we need to move objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones
        n_cylinders = 5

        # Define cylinder size
        cylinder_size = (0.04, 0.04, 0.1)  # (radius, radius, height)

        # Define colors for cylinders and zones
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        np.random.shuffle(colors)  # Shuffle colors to randomize the order

        # Add zones and cylinders to the environment
        for i in range(n_cylinders):
            # Add zone
            zone_size = (0.1, 0.1, 0)  # Zones are 2D, so z-size is 0
            zone_pose = self.get_random_pose(env, zone_size)
            zone_urdf = 'zone/zone.urdf'
            env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[colors[i]])

            # Add cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_template = 'cylinder/cylinder-template.urdf'
            replace = {'SIZE': cylinder_size, 'COLOR': utils.COLORS[colors[i]]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

            # Define the language goal
            language_goal = self.lang_template.format(color=colors[i])

            # Add goal for placing the cylinder in the correct zone
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_pose], replace=False,
                          rotations=False, metric='zone', params=[(zone_pose, zone_size)], step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

# Instantiate the task
task = ZoneCylinderSequence()