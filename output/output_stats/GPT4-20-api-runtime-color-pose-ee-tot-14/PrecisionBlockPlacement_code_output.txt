import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionBlockPlacement(Task):
    """
    Arrange five blocks of varying colors onto the corresponding colored zones on the pallet,
    aligning them perfectly within the zone boundaries without stacking.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Set to twice the number of goals
        self.ee = Suction  # Use Suction end-effector to move blocks on the Z axis
        self.lang_template = "place the {color} block onto the {color} zone"
        self.task_completed_desc = "done placing all blocks."

    def reset(self, env):
        super().reset(env)

        # Define the colors for the blocks and zones
        block_colors = ['red', 'green', 'blue', 'yellow', 'purple']
        zone_colors = block_colors.copy()  # Same colors for zones

        # Add pallet
        pallet_size = (0.3, 0.3, 0.02)  # Size of the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)
        pallet_urdf = 'pallet/pallet.urdf'
        env.add_object(pallet_urdf, pallet_pose, 'fixed')

        # Add blocks and zones
        block_size = (0.04, 0.04, 0.04)  # Size of the blocks
        zone_size = (0.05, 0.05, 0)  # Size of the zones (no height)
        block_urdf = 'stacking/block.urdf'
        zone_urdf = 'zone/zone.urdf'

        blocks = []
        zones = []
        for i, color in enumerate(block_colors):
            # Add block
            block_pose = self.get_random_pose(env, block_size)
            block_color = utils.COLORS[color]
            block_id = env.add_object(block_urdf, block_pose, color=block_color)
            blocks.append((block_id, block_color))

            # Add zone
            zone_pose = self.get_random_pose(env, zone_size)
            zone_color = utils.COLORS[color]
            zone_id = env.add_object(zone_urdf, zone_pose, color=zone_color)
            zones.append((zone_id, zone_pose))

        # Add goals for each block to be placed in the corresponding zone
        for block, block_color in blocks:
            # Find the zone with the matching color
            zone_pose = next(zone_pose for zone_id, zone_pose in zones if env.get_object_color(zone_id) == block_color)
            # Define the language goal
            color_name = [name for name, color in utils.COLORS.items() if color == block_color][0]
            language_goal = self.lang_template.format(color=color_name)
            # Add the goal
            self.add_goal(objs=[block], matches=np.int32([[1]]), targ_poses=[zone_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/5,
                          language_goal=language_goal)

        # Set the initial state of the environment
        self.state_init(env)