import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BoxLidPlacement(Task):
    """Pick up five small boxes of varying colors and place them as lids on top of five identically colored cylinders standing upright, ensuring a stable and precise fit."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to place 5 lids, so max_steps is set to twice the number of placements
        self.lang_template = "place the {color} box on top of the {color} cylinder"
        self.task_completed_desc = "done placing all box lids."
        self.ee = Suction  # Using Suction end-effector for picking and placing in the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the number of boxes and cylinders
        n_objects = 5

        # Define the size of the boxes (lids) and cylinders
        box_size = (0.06, 0.06, 0.02)  # x, y, z dimensions for the box
        cylinder_size = (0.05, 0.05, 0.1)  # x, y, z dimensions for the cylinder

        # Define the URDF templates for the boxes and cylinders
        box_template = 'box/box-template.urdf'
        cylinder_template = 'cylinder/cylinder-template.urdf'

        # Available colors for the objects
        colors = ['blue', 'red', 'green', 'orange', 'yellow']

        # Create and place boxes and cylinders
        for i in range(n_objects):
            color_name = colors[i]
            color_rgb = utils.COLORS[color_name]

            # Create and place the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace_cylinder = {'COLOR': color_rgb, 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_template, replace_cylinder)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

            # Create and place the box (lid)
            box_pose = self.get_random_pose(env, box_size)
            replace_box = {'COLOR': color_rgb, 'SIZE': box_size}
            box_urdf = self.fill_template(box_template, replace_box)
            box_id = env.add_object(box_urdf, box_pose)

            # Define the target pose for the box, which is on top of the cylinder
            target_pose = (cylinder_pose[0], (0, 0, 0, 1))  # Same x, y and zero rotation since it's a lid

            # Define the language goal
            language_goal = self.lang_template.format(color=color_name)

            # Add the goal for placing the box on the cylinder
            self.add_goal(objs=[box_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / n_objects,
                          language_goal=language_goal)

        # Set the primitive for the task
        self.primitive = primitives.pick_place