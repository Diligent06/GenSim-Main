import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderLineArrangement(Task):
    """
    Arrange five differently colored cylinders along a single green line,
    ensuring each cylinder is equidistant from its neighbors.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to arrange 5 cylinders, so 10 steps should be sufficient.
        self.lang_template = "place the {color} cylinder on the green line equidistant from its neighbors"
        self.task_completed_desc = "done arranging the cylinders."
        self.ee = Suction  # We use Suction since we need to lift cylinders along the Z axis.

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and their colors.
        n_cylinders = 5
        cylinder_colors = ['red', 'blue', 'green', 'yellow', 'purple']

        # Add a single green line to the environment.
        line_size = (0.75, 0.02, 0.001)  # Length, width, height of the line.
        line_pose = self.get_random_pose(env, line_size)  # Get a random pose for the line.
        line_urdf = 'line/single-green-line-template.urdf'
        env.add_object(line_urdf, line_pose, 'fixed')  # Add the line as a fixed object.

        # Add cylinders to the environment.
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.02, 0.02, 0.1)  # Diameter and height of the cylinder.
        cylinder_ids = []
        for i in range(n_cylinders):
            # Get a random pose for the cylinder.
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Get the color for the cylinder.
            color = utils.COLORS[cylinder_colors[i]]
            # Fill the URDF template with the cylinder's size and color.
            replace = {'COLOR': color, 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment.
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinder_ids.append(cylinder_id)

        # Calculate the positions for the cylinders on the line.
        # We want them to be equidistant and aligned with the line.
        line_x, line_y, _ = line_pose[0]  # Get the x, y coordinates of the line.
        spacing = line_size[0] / (n_cylinders + 1)  # Calculate spacing between cylinders.
        target_positions = [(line_x + (i + 1) * spacing, line_y, 0.05) for i in range(n_cylinders)]

        # Add goals for each cylinder.
        for idx, cylinder_id in enumerate(cylinder_ids):
            # Define the language goal for placing this cylinder.
            language_goal = self.lang_template.format(color=cylinder_colors[idx])
            # Define the target pose for this cylinder.
            target_pose = (target_positions[idx], (0, 0, 0, 1))  # We don't need to rotate the cylinders.
            # Add the goal for this cylinder.
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose],
                          replace=True, rotations=False, metric='pose', params=None,
                          step_max_reward=1 / n_cylinders, language_goal=language_goal)