import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CornerCylinderStacking(Task):
    """Sequentially stack three differently colored cylinders next to each other in a corner."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is twice that number
        self.ee = Suction  # Using Suction end-effector as we need to move objects on the Z axis
        self.lang_template = "stack the {color} cylinder in the corner"
        self.task_completed_desc = "done stacking cylinders in the corner."

    def reset(self, env):
        super().reset(env)

        # Define cylinder size and colors
        cylinder_size = (0.05, 0.05, 0.15)  # Diameter, Diameter, Height
        cylinder_colors = ['red', 'green', 'blue']  # Colors for the cylinders

        # Add corner
        corner_size = (0.05, 0.05, 0.15)  # Width, Depth, Height
        corner_pose = self.get_random_pose(env, corner_size)
        corner_template = 'corner/corner-template.urdf'
        replace = {'DIM': corner_size}
        corner_urdf = self.fill_template(corner_template, replace)
        env.add_object(corner_urdf, corner_pose, 'fixed')

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_poses = []
        cylinders = []
        for i, color_name in enumerate(cylinder_colors):
            # Generate color
            color = utils.COLORS[color_name]

            # Generate pose
            pose = self.get_random_pose(env, cylinder_size)

            # Fill template and add object
            replace = {'COLOR': color}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append(cylinder_id)
            cylinder_poses.append(pose)

            # Add goal for each cylinder
            language_goal = self.lang_template.format(color=color_name)
            # Target pose is next to the previous cylinder, touching both walls of the corner
            target_pose = (corner_pose[0], corner_pose[1]) if i == 0 else (cylinder_poses[i-1][0], corner_pose[1])
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/3,
                          language_goal=language_goal)

        # Set the task description
        self.lang_goals = [self.lang_template.format(color=color) for color in cylinder_colors]

    def additional_reset(self, env):
        """Additional reset function which can be used to reset internal states."""
        pass

# Instantiate the task
task = CornerCylinderStacking()