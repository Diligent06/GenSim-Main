import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderTowerConstruction(Task):
    """Stack five differently colored cylinders on top of each other in size-descending order on a designated zone on the tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to stack 5 cylinders, so 10 steps should be sufficient
        self.lang_template = "stack the {color} cylinder"
        self.task_completed_desc = "done constructing the cylinder tower."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and their sizes in descending order
        n_cylinders = 5
        cylinder_sizes = [(0.08 - 0.01 * i, 0.08 - 0.01 * i, 0.04) for i in range(n_cylinders)]

        # Define available colors
        colors = ['red', 'orange', 'yellow', 'green', 'blue']

        # Add the zone where the cylinders will be stacked
        zone_size = (0.15, 0.15, 0)  # Size of the zone
        zone_pose = self.get_random_pose(env, zone_size)  # Random pose for the zone
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Add cylinders
        cylinders = []
        for i in range(n_cylinders):
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_sizes[i])

            # Define the cylinder color
            color = utils.COLORS[colors[i]]

            # Define the cylinder size and URDF template
            size = cylinder_sizes[i]
            template = 'cylinder/cylinder-template.urdf'
            replace = {'DIM': size, 'HALF': (size[0] / 2, size[1] / 2, size[2] / 2), 'COLOR': color}

            # Fill the URDF template with the cylinder properties
            urdf = self.fill_template(template, replace)

            # Add the cylinder object to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append(cylinder_id)

        # Define the target poses for each cylinder, stacked on top of each other
        z_offset = 0.02  # Half the height of the smallest cylinder to start
        targ_poses = []
        for size in cylinder_sizes:
            z_offset += size[2]  # Increment z_offset by the height of the next cylinder
            targ_poses.append((zone_pose[0], (0, 0, z_offset)))

        # Add goals for each cylinder
        for i, cylinder_id in enumerate(cylinders):
            # Define the language goal for the current cylinder
            language_goal = self.lang_template.format(color=colors[i])

            # Add the goal for the current cylinder
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[targ_poses[i]],
                          replace=False, rotations=True, metric='pose', params=None,
                          step_max_reward=1 / n_cylinders, language_goal=language_goal)