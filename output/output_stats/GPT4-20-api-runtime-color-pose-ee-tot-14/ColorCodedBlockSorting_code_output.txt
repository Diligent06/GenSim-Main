import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedBlockSorting(Task):
    """Sort blocks by color onto specific zones on a pallet, arranging them in a single layer without stacking."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have at most 5 blocks to sort, thus 10 steps should be sufficient.
        self.lang_template = "put the {color} block in the matching {color} zone"
        self.task_completed_desc = "done sorting blocks by color."
        self.ee = Suction  # Using Suction as we need to move blocks on the Z axis to place them on the pallet.

    def reset(self, env):
        super().reset(env)

        # Define the number of blocks and zones.
        n_blocks = 5
        n_zones = 5

        # Add pallet.
        pallet_size = (0.3, 0.3, 0.02)  # Size of the pallet.
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Define available colors.
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_goals = {}

        # Add zones for each color on the pallet.
        for color in colors:
            zone_size = (0.06, 0.06, 0)  # Size of the zone.
            # Ensure the zone is placed on the pallet by offsetting its pose.
            zone_pose = (np.array(pallet_pose[0]) + np.random.uniform(-0.1, 0.1, size=2).tolist() + [0.01], pallet_pose[1])
            env.add_object('zone/zone.urdf', zone_pose, 'fixed', color=utils.COLORS[color])
            color_goals[color] = zone_pose

        # Add blocks and assign goals for sorting.
        block_size = (0.04, 0.04, 0.04)  # Size of the block.
        for i in range(n_blocks):
            # Randomly choose a color for the block.
            block_color = np.random.choice(colors)
            block_pose = self.get_random_pose(env, block_size)
            block_id = env.add_object('stacking/block.urdf', block_pose, color=utils.COLORS[block_color])

            # Define the language goal.
            language_goal = self.lang_template.format(color=block_color)

            # Add goal for the block to be in the zone of the same color.
            self.add_goal(objs=[block_id],
                          matches=np.ones((1, 1)),  # Single block to single zone.
                          targ_poses=[color_goals[block_color]],  # Target pose is the pose of the zone.
                          replace=False,  # Each block has a unique zone.
                          rotations=False,  # Rotation is not considered in this task.
                          metric='zone',  # We are using zones to specify the goal.
                          params=None,  # No additional parameters needed.
                          step_max_reward=1,  # Full reward for placing the block correctly.
                          language_goal=language_goal)