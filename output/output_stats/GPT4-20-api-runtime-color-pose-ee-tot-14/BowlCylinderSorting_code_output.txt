import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlCylinderSorting(Task):
    """Sort colored cylinders by placing each one into a bowl with a matching color."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to call self.add_goal twice, so we set this to twice that number
        self.lang_template = "put the {color} cylinder in the {color} bowl"
        self.task_completed_desc = "done sorting cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the number of bowls and cylinders
        n_bowls = 2
        n_cylinders = 2

        # Define the size of the bowls and cylinders
        bowl_size = (0.12, 0.12, 0.06)  # x, y, z dimensions
        cylinder_size = (0.05, 0.05, 0.15)  # x, y, z dimensions

        # Define the URDFs for the bowls and cylinders
        bowl_urdf = 'bowl/bowl.urdf'
        cylinder_template = 'cylinder/cylinder-template.urdf'

        # Randomly select colors for the bowls and cylinders
        colors = ['red', 'green', 'blue', 'yellow', 'purple', 'orange']
        selected_colors = np.random.choice(colors, n_bowls, replace=False)

        # Add bowls to the environment with random poses and matching colors
        bowl_poses = []
        for i in range(n_bowls):
            color_name = selected_colors[i]
            color_rgb = utils.COLORS[color_name]
            bowl_pose = self.get_random_pose(env, bowl_size)
            env.add_object(bowl_urdf, bowl_pose, color=color_rgb)
            bowl_poses.append(bowl_pose)

        # Add cylinders to the environment with random poses and matching colors
        cylinders = []
        for i in range(n_cylinders):
            color_name = selected_colors[i]
            color_rgb = utils.COLORS[color_name]
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': color_rgb}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append((cylinder_id, color_name))

        # Add goals for each cylinder to be placed in the matching colored bowl
        for cylinder_id, color_name in cylinders:
            # Find the target bowl pose with the same color
            target_bowl_pose = next(pose for pose, color in zip(bowl_poses, selected_colors) if color == color_name)
            language_goal = self.lang_template.format(color=color_name)
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_bowl_pose],
                          replace=False, rotations=False, metric='pose', params=None, step_max_reward=1,
                          language_goal=language_goal)