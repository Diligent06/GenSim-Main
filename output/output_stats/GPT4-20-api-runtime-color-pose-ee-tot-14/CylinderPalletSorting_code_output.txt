import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderPalletSorting(Task):
    """
    Sort cylinders of varying sizes by stacking them onto matching size zones on a pallet,
    ensuring each cylinder fits within its designated outline.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we have 5 cylinders to sort, 2 steps per cylinder
        self.lang_template = "place the {color} cylinder on the matching size zone on the pallet"
        self.task_completed_desc = "done sorting all cylinders."
        self.ee = Suction  # Suction is needed to pick and place cylinders vertically
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and pallet zones
        n_cylinders = 5
        n_zones = n_cylinders  # Each cylinder has a matching zone

        # Define cylinder sizes (diameter, height)
        cylinder_sizes = [(0.04, 0.08), (0.05, 0.08), (0.06, 0.08), (0.07, 0.08), (0.08, 0.08)]

        # Add pallet
        pallet_size = (0.3, 0.3, 0.02)  # Size of the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)
        pallet_urdf = 'pallet/pallet.urdf'
        env.add_object(pallet_urdf, pallet_pose, 'fixed')

        # Shuffle cylinder sizes to randomize the task each reset
        np.random.shuffle(cylinder_sizes)

        # Add cylinders and define their zones on the pallet
        cylinder_urdf_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i in range(n_cylinders):
            size = cylinder_sizes[i]
            color_name = np.random.choice(list(utils.COLORS.keys()))
            color = utils.COLORS[color_name]

            # Generate a random pose for the cylinder
            pose = self.get_random_pose(env, size)

            # Fill in the URDF template for the cylinder
            replace = {'SIZE': size, 'COLOR': color}
            cylinder_urdf = self.fill_template(cylinder_urdf_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append((cylinder_id, size, color_name))

            # Define the target zone for the cylinder on the pallet
            zone_pose = (pallet_pose[0], pallet_pose[1])  # Use pallet pose as reference

            # Add a goal for each cylinder
            language_goal = self.lang_template.format(color=color_name)
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / n_cylinders,
                          language_goal=language_goal)

        # Note: In a more complex implementation, we would calculate the exact positions on the pallet for each zone
        # and match cylinders to zones based on size. For simplicity, we're using the pallet pose as the target for all.