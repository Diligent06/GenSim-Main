import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BallPyramidConstruction(Task):
    """Build a stable pyramid using a specific number of colored balls."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is twice that
        self.lang_template = "build a pyramid with the {color} ball on {position}"
        self.task_completed_desc = "done constructing the ball pyramid."
        self.ee = Suction  # Suction is needed to pick up balls and place them in 3D space

    def reset(self, env):
        super().reset(env)

        # Define the number of balls for each layer of the pyramid (1 + 2 + 3 = 6)
        n_balls = 6

        # Define ball colors
        ball_colors = ['red', 'green', 'blue', 'yellow', 'purple', 'orange']
        color_rgb = [utils.COLORS[color] for color in ball_colors]

        # Define ball size (all balls will have the same size for simplicity)
        ball_size = (0.04, 0.04, 0.04)  # Diameter of the ball

        # Add balls to the environment
        ball_urdf = 'ball/ball-template.urdf'
        balls = []
        for i in range(n_balls):
            ball_pose = self.get_random_pose(env, ball_size)
            ball_id = env.add_object(ball_urdf, ball_pose, color=color_rgb[i])
            balls.append(ball_id)

        # Define target poses for the balls to form a pyramid
        # Base layer positions (3 balls)
        base_positions = [(0.5, -0.1, 0.04), (0.55, 0, 0.04), (0.5, 0.1, 0.04)]
        # Middle layer positions (2 balls)
        middle_positions = [(0.525, -0.05, 0.08), (0.525, 0.05, 0.08)]
        # Top layer position (1 ball)
        top_position = [(0.525, 0, 0.12)]

        # Combine all target positions
        target_positions = base_positions + middle_positions + top_position

        # Add goals for each ball
        for i in range(n_balls):
            # Define the language goal for placing the ball
            position = "the base" if i < 3 else "the middle" if i < 5 else "the top"
            language_goal = self.lang_template.format(color=ball_colors[i], position=position)

            # Add the goal for the current ball
            self.add_goal(objs=[balls[i]], matches=np.ones((1, 1)), targ_poses=[target_positions[i]],
                          replace=False, rotations=False, metric='pose', params=None,
                          step_max_reward=1 / n_balls, language_goal=language_goal)

# Instantiate the task
task = BallPyramidConstruction()