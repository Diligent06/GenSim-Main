import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderPalletArrangement(Task):
    """Arrange six differently colored cylinders onto a pallet, with each cylinder standing upright in a distinct zone marked on the pallet surface."""

    def __init__(self):
        super().__init__()
        self.max_steps = 12  # We have 6 goals and we set max_steps to twice the number of goals
        self.ee = Suction  # We use Suction because we need to move objects on the Z axis
        self.lang_template = "place the {color} cylinder in the {color} zone on the pallet"
        self.task_completed_desc = "done arranging cylinders on the pallet."

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders
        cylinder_colors = ['red', 'blue', 'green', 'orange', 'yellow', 'purple']
        np.random.shuffle(cylinder_colors)  # Shuffle to ensure random order

        # Add pallet
        pallet_size = (0.6, 0.4, 0.1)  # Size of the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Add cylinders and zones
        cylinder_size = (0.05, 0.05, 0.1)  # Size of the cylinders
        zone_size = (0.1, 0.1, 0)  # Size of the zones
        cylinders = []
        zones = []

        for i, color_name in enumerate(cylinder_colors):
            # Add cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_template = 'cylinder/cylinder-template.urdf'
            replace = {'COLOR': utils.COLORS[color_name]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Add zone
            zone_pose = self.get_random_pose(env, zone_size)
            env.add_object('zone/zone.urdf', zone_pose, 'fixed')
            zones.append(zone_pose)

            # Define the language goal
            language_goal = self.lang_template.format(color=color_name)

            # Add goal for each cylinder to be placed in the corresponding zone
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_pose], replace=True,
                          rotations=False, metric='zone', params=[(zone_pose, zone_size)], step_max_reward=1/6,
                          language_goal=language_goal)

        # Note: We set replace=True because each zone can only have one cylinder
        # and rotations=False because the cylinders are symmetric and upright placement is not affected by rotation.