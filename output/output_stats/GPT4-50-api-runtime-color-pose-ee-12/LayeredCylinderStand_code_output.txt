import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class LayeredCylinderStand(Task):
    """Stack a set of three differently sized and colored cylinders onto a stand,
    with the largest at the bottom and the smallest at the top."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is twice that
        self.lang_template = "put the {color} cylinder on the {place}"
        self.task_completed_desc = "done stacking cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use Suction

    def reset(self, env):
        super().reset(env)

        # Define the sizes for the cylinders (largest to smallest)
        sizes = [
            (0.08, 0.08, 0.12),  # Large cylinder
            (0.06, 0.06, 0.09),  # Medium cylinder
            (0.04, 0.04, 0.06)   # Small cylinder
        ]

        # Define the colors for the cylinders
        colors = [
            utils.COLORS['red'],    # Large cylinder
            utils.COLORS['green'],  # Medium cylinder
            utils.COLORS['blue']    # Small cylinder
        ]

        # Add the stand
        stand_size = (0.15, 0.15, 0.02)  # Size of the stand
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Add cylinders and store their IDs
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_ids = []
        for i in range(3):
            # Generate a random pose for the cylinder
            pose = self.get_random_pose(env, sizes[i])
            replace = {
                'DIM': sizes[i],
                'HALF': tuple(size / 2 for size in sizes[i]),
                'COLOR': colors[i]
            }
            # Fill in the cylinder URDF template
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinder_ids.append(cylinder_id)

        # Define the target poses for the cylinders on the stand
        # The cylinders are stacked with the largest at the bottom and the smallest at the top
        targ_poses = [
            (stand_pose[0], stand_pose[1]),  # Bottom cylinder
            (utils.apply(stand_pose, (0, 0, sizes[0][2])), stand_pose[1]),  # Middle cylinder
            (utils.apply(stand_pose, (0, 0, sizes[0][2] + sizes[1][2])), stand_pose[1])  # Top cylinder
        ]

        # Add goals for each cylinder
        for i in range(3):
            # Define the language goal for placing the cylinder
            place = "bottom" if i == 0 else "middle" if i == 1 else "top"
            language_goal = self.lang_template.format(color=colors[i], place=place)
            # Add the goal for the current cylinder
            self.add_goal(
                objs=[cylinder_ids[i]],
                matches=np.ones((1, 1)),
                targ_poses=[targ_poses[i]],
                replace=False,
                rotations=True,
                metric='pose',
                params=None,
                step_max_reward=1 / 3,
                language_goal=language_goal
            )