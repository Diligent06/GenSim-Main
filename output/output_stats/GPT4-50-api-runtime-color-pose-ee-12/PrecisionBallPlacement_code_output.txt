import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionBallPlacement(Task):
    """Place a set of three different colored balls into the corresponding colored bowls."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 balls to place, so 6 steps should be sufficient (2x the number of goals)
        self.ee = Suction  # Using Suction end-effector to pick up and place balls
        self.lang_template = "place the {color} ball in the {color} bowl"
        self.task_completed_desc = "done placing all balls in the corresponding bowls."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the colors for the balls and bowls
        ball_colors = ['red', 'green', 'blue']
        bowl_colors = ['red', 'green', 'blue']
        np.random.shuffle(ball_colors)  # Shuffle to randomize the order of the balls

        # Add bowls to the environment
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_size = (0.12, 0.12, 0.06)  # Approximate size of the bowl
        bowl_poses = []
        for color in bowl_colors:
            bowl_pose = self.get_random_pose(env, bowl_size)
            env.add_object(bowl_urdf, bowl_pose, category='fixed', color=utils.COLORS[color])
            bowl_poses.append(bowl_pose)

        # Add balls to the environment
        ball_template = 'ball/ball-template.urdf'
        ball_size = (0.04, 0.04, 0.04)  # Approximate size of the ball
        balls = []
        for color in ball_colors:
            ball_pose = self.get_random_pose(env, ball_size)
            replace = {'COLOR': utils.COLORS[color]}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append(ball_id)

        # Create goals for each ball to be placed in the matching colored bowl
        for i, color in enumerate(ball_colors):
            language_goal = self.lang_template.format(color=color)
            # Find the index of the bowl that matches the ball's color
            bowl_index = bowl_colors.index(color)
            # Add goal for the ball to be in the corresponding bowl
            self.add_goal(objs=[balls[i]], matches=np.int32([[1]]), targ_poses=[bowl_poses[bowl_index]],
                          replace=False, rotations=True, metric='pose', params=None, step_max_reward=1/3,
                          language_goal=language_goal)

        # The task is set up with each ball having a goal to be placed in a bowl of matching color