import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class SequentialBowlStacking(Task):
    """Stack a series of differently colored bowls into a single tower with descending size order."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have 5 bowls to stack and 5 steps to place them
        self.lang_template = "stack the {color} bowl on top of the {target_color} bowl"
        self.task_completed_desc = "done stacking all bowls."
        self.ee = Suction  # Using Suction end-effector as we need to move objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the colors and sizes for the bowls
        bowl_colors = ['red', 'orange', 'yellow', 'green', 'blue']
        bowl_sizes = [(0.18, 0.18, 0.08), (0.15, 0.15, 0.07), (0.12, 0.12, 0.06),
                      (0.09, 0.09, 0.05), (0.06, 0.06, 0.04)]  # Descending order of size

        # Add bowls to the environment
        bowls = []
        for i in range(len(bowl_colors)):
            color = utils.COLORS[bowl_colors[i]]
            size = bowl_sizes[i]
            bowl_pose = self.get_random_pose(env, size)
            bowl_urdf = 'bowl/bowl.urdf'
            bowl_id = env.add_object(bowl_urdf, bowl_pose, 'rigid', color=color)
            bowls.append((bowl_id, bowl_pose, size))

        # Create stacking goals for each bowl, starting from the second-smallest up to the largest
        for i in range(1, len(bowls)):
            # Current bowl to stack
            bowl_id, _, _ = bowls[i]
            # Target (place to stack the current bowl on)
            _, target_pose, target_size = bowls[i-1]
            # Adjust the z-coordinate for the target pose to account for the stacked height
            target_pose = (target_pose[0], (target_pose[1][0], target_pose[1][1], target_pose[1][2] + target_size[2]))

            # Define the language goal for the current step
            language_goal = self.lang_template.format(color=bowl_colors[i], target_color=bowl_colors[i-1])

            # Add the goal for the current step
            self.add_goal(objs=[bowl_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1.0/len(bowls),
                          language_goal=language_goal)

        # Set the first bowl as the base (no need to move it, so no goal added for it)