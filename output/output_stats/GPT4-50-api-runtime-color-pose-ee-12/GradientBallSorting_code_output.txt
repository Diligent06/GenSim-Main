import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class GradientBallSorting(Task):
    """Arrange balls with distinct shades into matching bowls."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call add_goal 5 times, so max_steps is set to twice that number
        self.lang_template = "put the {color} ball in the matching bowl"
        self.task_completed_desc = "done sorting all gradient balls."
        self.ee = Suction  # We need to move balls on the Z axis, so we use the Suction end-effector
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of balls and bowls
        n_balls = 5
        n_bowls = 5

        # Define the shades of the balls from lightest to darkest
        shades = ['silver', 'gray', 'blue', 'indigo', 'black']

        # Add bowls to the environment
        bowl_size = (0.12, 0.12, 0.06)  # Size of the bowls
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_poses = []
        for i in range(n_bowls):
            # Generate a random pose for each bowl
            bowl_pose = self.get_random_pose(env, bowl_size)
            # Add the bowl to the environment
            env.add_object(bowl_urdf, bowl_pose, 'fixed')
            bowl_poses.append(bowl_pose)

        # Add balls to the environment
        ball_size = (0.04, 0.04, 0.04)  # Size of the balls
        ball_template = 'ball/ball-template.urdf'
        balls = []
        for i in range(n_balls):
            # Generate a random pose for each ball
            ball_pose = self.get_random_pose(env, ball_size)
            # Define the color of the ball based on the shade
            color = utils.COLORS[shades[i]]
            # IMPORTANT: REPLACE THE TEMPLATE URDF with `fill_template`
            replace = {'COLOR': color}
            ball_urdf = self.fill_template(ball_template, replace)
            # Add the ball to the environment
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append(ball_id)

        # Define the goals for each ball to be placed in the matching bowl
        for i in range(n_balls):
            # Define the language goal for each ball
            language_goal = self.lang_template.format(color=shades[i])
            # Add the goal for the ball to be placed in the corresponding bowl
            self.add_goal(objs=[balls[i]], matches=np.int32([[1]]), targ_poses=[bowl_poses[i]], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_balls,
                          language_goal=language_goal)

        # The task is set up with balls and bowls added to the environment and goals defined for sorting