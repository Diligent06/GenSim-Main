import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderArrayColorMatch(Task):
    """Arrange a set of differently colored cylinders into corresponding colored zones on the tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have 5 cylinders and 5 zones, so max_steps is twice the number of add_goal calls
        self.lang_template = "put the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done arranging cylinders."
        self.ee = Suction  # Suction is needed as we have to lift the cylinders

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones
        n_cylinders = 5
        n_zones = n_cylinders  # Each cylinder has a corresponding zone

        # Define cylinder size
        cylinder_size = (0.04, 0.04, 0.12)  # (radius, radius, height)

        # Define zone size
        zone_size = (0.12, 0.12, 0)  # (x, y, z) where z is 0 because it's a flat zone

        # Cylinder template path
        cylinder_template = 'cylinder/cylinder-template.urdf'

        # Zone URDF path
        zone_urdf = 'zone/zone.urdf'

        # Available colors
        colors = ['red', 'green', 'blue', 'yellow', 'purple']

        # Shuffle colors to ensure randomness
        np.random.shuffle(colors)

        # Add cylinders and zones to the environment
        cylinders = []
        zones = []
        for i in range(n_cylinders):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)

            # Get a random pose for the zone
            zone_pose = self.get_random_pose(env, zone_size)

            # Set the color for the cylinder and the zone
            color = utils.COLORS[colors[i]]

            # Fill in the cylinder URDF template with the color and size
            replace = {'COLOR': color, 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Add the zone to the environment
            env.add_object(zone_urdf, zone_pose, 'fixed', color=color)
            zones.append(zone_pose)

            # Define the language goal
            language_goal = self.lang_template.format(color=colors[i])

            # Add the goal for the cylinder to be in the corresponding zone
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_pose], replace=True,
                          rotations=False, metric='zone', params=[(zone_pose, zone_size)], step_max_reward=1,
                          language_goal=language_goal)

        # Set the task description
        self.task_desc = f"Arrange the cylinders into the matching colored zones. There are {n_cylinders} cylinders."

# Create an instance of the task
task = CylinderArrayColorMatch()