import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedCylinderArrangement(Task):
    """Arrange five differently colored cylinders into a specific sequence on the table."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We have 5 cylinders, so 10 steps should be enough
        self.ee = Suction  # We need to move objects on the Z axis, so we use Suction
        self.lang_template = "place the {color} cylinder on the {position} position"
        self.task_completed_desc = "all cylinders are arranged in the correct sequence."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the sequence of colors for the cylinders
        color_sequence = ['red', 'green', 'blue', 'yellow', 'purple']
        n_cylinders = len(color_sequence)

        # Define the size of the cylinders
        cylinder_size = (0.05, 0.05, 0.1)  # (radius, radius, height)

        # Add cylinders to the environment
        cylinders = []
        for i in range(n_cylinders):
            color_name = color_sequence[i]
            color_rgb = utils.COLORS[color_name]
            pose = self.get_random_pose(env, cylinder_size)
            cylinder_urdf = 'cylinder/cylinder-template.urdf'
            replace = {'COLOR': color_rgb, 'SIZE': cylinder_size}
            urdf = self.fill_template(cylinder_urdf, replace)
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append((cylinder_id, pose))

        # Add a line to indicate the correct sequence placement
        line_size = (0.25, 0.005, 0.005)  # (length, width, height)
        line_pose = ((0.5, 0, 0.001), (0, 0, 0, 1))  # Centered on the table, slightly above it
        line_urdf = 'line/single-green-line-template.urdf'
        replace = {'SIZE': line_size}
        urdf = self.fill_template(line_urdf, replace)
        env.add_object(urdf, line_pose, 'fixed')

        # Define the target poses for the cylinders, spaced along the line
        spacing = line_size[0] / (n_cylinders + 1)
        start_x = line_pose[0][0] - line_size[0] / 2 + spacing
        target_poses = []
        for i in range(n_cylinders):
            x = start_x + i * spacing
            y = line_pose[0][1]
            z = line_pose[0][2] + cylinder_size[2] / 2  # Place them standing up
            target_poses.append(((x, y, z), (0, 0, 0, 1)))  # No rotation needed, standing upright

        # Add goals for each cylinder
        for i, (cylinder_id, _) in enumerate(cylinders):
            color_name = color_sequence[i]
            language_goal = self.lang_template.format(color=color_name, position=utils.ordinal(i + 1))
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_poses[i]],
                          replace=True, rotations=False, metric='pose', params=None,
                          step_max_reward=1 / n_cylinders, language_goal=language_goal)

# Note: The code assumes that the `fill_template` function replaces placeholders in the URDF file
# with the specified values, and that `get_random_pose` provides a valid random pose within the
# specified bounds. The `add_goal` function is used to specify the task goals, with the `replace`
# parameter set to True to allow each cylinder to be placed in any target pose.