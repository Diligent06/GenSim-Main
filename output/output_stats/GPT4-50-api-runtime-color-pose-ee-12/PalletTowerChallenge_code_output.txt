import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PalletTowerChallenge(Task):
    """
    Build a tower by stacking one blue cylinder and two red boxes alternately on a single pallet,
    ensuring that the cylinder rests on the bottom and is capped by the boxes with the final structure remaining stable.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is set to twice that number
        self.lang_template = "stack one {object1} and two {object2} on the {object3}"
        self.task_completed_desc = "done building the tower."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors and sizes for the objects
        blue_color = utils.COLORS['blue']  # RGB for blue
        red_color = utils.COLORS['red']    # RGB for red
        pallet_size = (0.3, 0.3, 0.05)     # Size of the pallet
        cylinder_size = (0.05, 0.05, 0.1)  # Size of the cylinder
        box_size = (0.05, 0.05, 0.05)      # Size of the boxes

        # Add pallet
        pallet_urdf = 'pallet/pallet.urdf'
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object(pallet_urdf, pallet_pose, category='fixed')

        # Add blue cylinder
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_pose = self.get_random_pose(env, cylinder_size)
        replace_cylinder = {'COLOR': blue_color}
        cylinder_urdf = self.fill_template(cylinder_template, replace_cylinder)
        cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

        # Add red boxes
        box_template = 'box/box-template.urdf'
        box_ids = []
        for _ in range(2):
            box_pose = self.get_random_pose(env, box_size)
            replace_box = {'COLOR': red_color}
            box_urdf = self.fill_template(box_template, replace_box)
            box_id = env.add_object(box_urdf, box_pose)
            box_ids.append(box_id)

        # Define target poses for the objects on the pallet
        # The cylinder is at the bottom, so its z-coordinate is slightly above the pallet's top surface
        cylinder_target_pose = [(pallet_pose[0][0], pallet_pose[0][1], pallet_pose[0][2] + 0.05), (0, 0, 0, 1)]
        # The boxes are stacked on top of the cylinder, so their z-coordinates are offset by the cylinder's height
        box_target_poses = [
            (pallet_pose[0][0], pallet_pose[0][1], pallet_pose[0][2] + 0.15),  # First box on top of the cylinder
            (pallet_pose[0][0], pallet_pose[0][1], pallet_pose[0][2] + 0.2)    # Second box on top of the first box
        ]

        # Add goals
        # Goal 1: Place the cylinder on the pallet
        self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[cylinder_target_pose], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3,
                      language_goal=self.lang_template.format(object1="blue cylinder", object2="red boxes", object3="pallet"))

        # Goal 2 and 3: Place the first and second box on top of the cylinder
        for i, box_id in enumerate(box_ids):
            self.add_goal(objs=[box_id], matches=np.ones((1, 1)), targ_poses=[box_target_poses[i]], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/3,
                          language_goal=self.lang_template.format(object1="blue cylinder", object2="red boxes", object3="pallet"))