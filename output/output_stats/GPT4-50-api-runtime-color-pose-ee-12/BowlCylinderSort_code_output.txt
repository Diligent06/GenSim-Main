import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlCylinderSort(Task):
    """Sort five cylinders of varying colors into two different colored bowls, ensuring that the bowls only contain cylinders of matching color."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Set to twice the number of goals
        self.lang_template = "put the {color} cylinders in the {bowl_color} bowl"
        self.task_completed_desc = "done sorting cylinders."
        self.ee = Suction  # Use Suction end-effector to move cylinders on the Z axis
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and bowls
        n_cylinders = 5
        n_bowls = 2

        # Define the size of the bowls and cylinders
        bowl_size = (0.15, 0.15, 0.06)  # (x, y, z) dimensions
        cylinder_size = (0.05, 0.05, 0.15)  # (x, y, z) dimensions

        # Define the colors for the cylinders and bowls
        cylinder_colors = ['red', 'green', 'blue', 'yellow', 'purple']
        bowl_colors = ['orange', 'cyan']

        # Add bowls to the environment
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_poses = []
        for color in bowl_colors:
            bowl_pose = self.get_random_pose(env, bowl_size)
            env.add_object(bowl_urdf, bowl_pose, 'fixed', color=utils.COLORS[color])
            bowl_poses.append(bowl_pose)

        # Add cylinders to the environment
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for color in cylinder_colors:
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': utils.COLORS[color]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append((cylinder_id, color))

        # Define goals for sorting cylinders into bowls with matching colors
        for bowl_pose, bowl_color in zip(bowl_poses, bowl_colors):
            # Find cylinders that match the bowl's color
            matching_cylinders = [cid for cid, color in cylinders if color == bowl_color]
            if matching_cylinders:
                # Create a language goal for the matching color
                language_goal = self.lang_template.format(color=bowl_color, bowl_color=bowl_color)
                # Add a goal for each matching cylinder
                for cylinder_id in matching_cylinders:
                    self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[bowl_pose],
                                  replace=False, rotations=True, metric='pose', params=None,
                                  step_max_reward=1/n_cylinders, language_goal=language_goal)

        # Note: In this task, we assume that the colors of the cylinders match the colors of the bowls.
        # If the colors do not match, the task description would need to specify how to sort them.