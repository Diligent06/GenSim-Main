import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlTowerPrecision(Task):
    """Construct a vertical tower by carefully placing three bowls of different colors
    (red, green, blue) upside-down on top of each other in size-descending order,
    on a marked zone on the tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 goals and we set max_steps to twice the number of goals
        self.lang_template = "place the {color} bowl {position} on the {target_color} bowl"
        self.task_completed_desc = "done constructing the bowl tower."
        self.ee = Suction  # Using Suction end-effector to lift the bowls on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define bowl colors and sizes in descending order
        bowl_colors = ['blue', 'green', 'red']
        bowl_sizes = [(0.18, 0.18, 0.08), (0.15, 0.15, 0.06), (0.12, 0.12, 0.04)]

        # Add target zone
        zone_size = (0.20, 0.20, 0)  # Size of the zone to place the bowls
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Add bowls and set their initial random poses
        bowls = []
        for i, color in enumerate(bowl_colors):
            bowl_urdf = 'bowl/bowl.urdf'
            bowl_pose = self.get_random_pose(env, bowl_sizes[i])
            bowl_color = utils.COLORS[color]
            bowl_id = env.add_object(bowl_urdf, bowl_pose, color=bowl_color)
            bowls.append((bowl_id, bowl_pose))

        # Define the target poses for the bowls
        # The target pose for the largest bowl (blue) is the zone_pose
        # The target poses for the other bowls are on top of the previous bowl
        targ_poses = [zone_pose]
        for i in range(1, len(bowl_sizes)):
            # The target pose is above the center of the previous bowl
            prev_bowl_pose = targ_poses[i-1]
            x, y, z = prev_bowl_pose[0]
            z += bowl_sizes[i-1][2]  # Add the height of the previous bowl to the z-coordinate
            targ_poses.append(((x, y, z), prev_bowl_pose[1]))

        # Add goals for placing the bowls in the correct order
        for i, (bowl_id, _) in enumerate(bowls):
            # Language goal describes the action to be performed
            if i == 0:
                position = "first"
                target_color = "zone"
            else:
                position = "on top of the " + bowl_colors[i-1]
                target_color = bowl_colors[i-1]
            language_goal = self.lang_template.format(color=bowl_colors[i], position=position, target_color=target_color)

            # Add the goal with the corresponding target pose
            self.add_goal(objs=[bowl_id], matches=np.ones((1, 1)), targ_poses=[targ_poses[i]],
                          replace=False, rotations=False, metric='pose', params=None,
                          step_max_reward=1/3, language_goal=language_goal)

# Instantiate the task
task = BowlTowerPrecision()