import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedContainerization(Task):
    """Arrange four differently colored cylinders into a container, ensuring each cylinder is placed vertically and in the color order from left to right as red, green, blue, and yellow."""

    def __init__(self):
        super().__init__()
        self.max_steps = 8  # We have 4 objects to place, so 8 steps should be sufficient
        self.lang_template = "put the {color} cylinder in the container"
        self.task_completed_desc = "done color-coded containerization."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors and their order for the cylinders
        colors = ['red', 'green', 'blue', 'yellow']
        color_names = ['red cylinder', 'green cylinder', 'blue cylinder', 'yellow cylinder']

        # Add container box.
        container_size = self.get_random_size(0.3, 0.3, 0.1, 0.1, 0.05, 0.05)  # Random size within bounds
        container_pose = self.get_random_pose(env, container_size)  # Random collision-free pose
        container_template = 'container/container-template.urdf'
        replace = {'DIM': container_size, 'HALF': (container_size[0] / 2, container_size[1] / 2, container_size[2] / 2)}
        container_urdf = self.fill_template(container_template, replace)
        env.add_object(container_urdf, container_pose, 'fixed')

        # Add cylinders.
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i, color in enumerate(colors):
            # Define the size and pose of the cylinder
            size = (0.05, 0.05, 0.1)  # Fixed size for all cylinders
            pose = self.get_random_pose(env, size)
            color_rgb = utils.COLORS[color]  # Get the RGB values for the color

            # Replace the placeholders in the URDF template
            replace = {'COLOR': color_rgb}
            urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append(cylinder_id)

        # Define the target poses for each cylinder within the container
        # The cylinders should be placed in the order red, green, blue, yellow from left to right
        targ_x_positions = np.linspace(-container_size[0] / 4, container_size[0] / 4, 4)
        targ_poses = []
        for x_offset in targ_x_positions:
            # Target pose is the same height and orientation as the container, but with a specific x offset
            targ_pose = ((container_pose[0][0] + x_offset, container_pose[0][1], container_pose[0][2] + size[2] / 2),
                         container_pose[1])
            targ_poses.append(targ_pose)

        # Add goals for each cylinder
        for i, cylinder_id in enumerate(cylinders):
            language_goal = self.lang_template.format(color=color_names[i])
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[targ_poses[i]], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / len(cylinders),
                          language_goal=language_goal)

# Instantiate the task
task = ColorCodedContainerization()