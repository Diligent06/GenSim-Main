import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderBowlArrangement(Task):
    """
    Arrange a set of five differently colored cylinders inside a large bowl,
    ensuring they are placed upright and ordered by color gradient from the center to the edge.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to arrange 5 cylinders, so 10 steps should be sufficient.
        self.lang_template = "put the {color} cylinder in the bowl, ordered by color gradient"
        self.task_completed_desc = "done arranging the cylinders."
        self.ee = Suction  # We need to move cylinders on the Z axis, so we use the Suction end-effector.

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders, ordered by gradient.
        cylinder_colors = ['red', 'orange', 'yellow', 'green', 'blue']
        color_names = ['red', 'orange', 'yellow', 'green', 'blue']

        # Add a large bowl to the environment.
        bowl_size = (0.18, 0.18, 0.06)  # Size of the bowl (x, y, z).
        bowl_pose = self.get_random_pose(env, bowl_size)  # Random pose for the bowl.
        bowl_urdf = 'bowl/bowl.urdf'
        env.add_object(bowl_urdf, bowl_pose, 'fixed')  # Add the bowl as a fixed object.

        # Add cylinders to the environment.
        cylinder_size = (0.05, 0.05, 0.1)  # Size of the cylinders (x, y, z).
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i, color in enumerate(cylinder_colors):
            pose = self.get_random_pose(env, cylinder_size)  # Random pose for the cylinder.
            replace = {'COLOR': utils.COLORS[color]}  # Replace color in the URDF template.
            cylinder_urdf = self.fill_template(cylinder_template, replace)  # Fill the URDF template.
            cylinder_id = env.add_object(cylinder_urdf, pose)  # Add the cylinder to the environment.
            cylinders.append(cylinder_id)  # Keep track of the cylinder IDs.

        # Define the target poses for the cylinders inside the bowl.
        # We want them to be placed upright, so we don't need to change the orientation.
        targ_poses = []
        for i in range(len(cylinders)):
            # Calculate the target position based on the bowl's center and the gradient order.
            x_offset = (i - len(cylinders) / 2) * 0.02
            y_offset = 0
            z_offset = bowl_size[2] / 2 + cylinder_size[2] / 2  # Place cylinder above the bowl's bottom.
            targ_pose = (bowl_pose[0][0] + x_offset, bowl_pose[0][1] + y_offset, bowl_pose[0][2] + z_offset)
            targ_poses.append((targ_pose, (0, 0, 0, 1)))  # We keep the orientation fixed (upright).

        # Add goals for each cylinder.
        for i, cylinder_id in enumerate(cylinders):
            language_goal = self.lang_template.format(color=color_names[i])
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[targ_poses[i]],
                          replace=True, rotations=False, metric='pose', params=None,
                          step_max_reward=1 / len(cylinders), language_goal=language_goal)

# Instantiate the task.
task = CylinderBowlArrangement()