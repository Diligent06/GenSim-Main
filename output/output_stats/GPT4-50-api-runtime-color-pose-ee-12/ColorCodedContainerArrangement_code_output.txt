import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedContainerArrangement(Task):
    """Arrange a set of five colored boxes inside a single container, with the boxes' colors matching the sequence of colored lines drawn inside the container."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call self.add_goal 5 times, so we set max_steps to twice that number
        self.lang_template = "put the {color} box on the {color} line in the container"
        self.task_completed_desc = "done arranging the colored boxes."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the colors for the boxes and lines
        box_colors = ['red', 'blue', 'green', 'yellow', 'purple']
        np.random.shuffle(box_colors)  # Shuffle the colors to ensure a random sequence

        # Add container box
        container_size = (0.3, 0.3, 0.05)  # Define the size of the container
        container_pose = self.get_random_pose(env, container_size)  # Get a random pose for the container
        container_template = 'container/container-template.urdf'
        replace = {'DIM': container_size, 'HALF': (container_size[0] / 2, container_size[1] / 2, container_size[2] / 2)}
        container_urdf = self.fill_template(container_template, replace)
        env.add_object(container_urdf, container_pose, 'fixed')

        # Add colored lines inside the container
        line_template = 'line/single-green-line-template.urdf'
        line_poses = []
        for i, color in enumerate(box_colors):
            line_size = (0.02, 0.02, 0.001)  # Define the size of the line
            line_pose = (container_pose[0][0], container_pose[0][1] - 0.1 + i * 0.05, container_pose[0][2] + 0.001)
            line_color = utils.COLORS[color]  # Get the RGB value for the line color
            replace = {'COLOR': line_color}
            line_urdf = self.fill_template(line_template, replace)
            env.add_object(line_urdf, (line_pose, container_pose[1]), 'fixed')
            line_poses.append((line_pose, container_pose[1]))  # Store the pose for later use in goals

        # Add boxes
        box_template = 'box/box-template.urdf'
        boxes = []
        for color in box_colors:
            box_size = (0.05, 0.05, 0.05)  # Define the size of the box
            box_pose = self.get_random_pose(env, box_size)  # Get a random pose for the box
            box_color = utils.COLORS[color]  # Get the RGB value for the box color
            replace = {'COLOR': box_color}
            box_urdf = self.fill_template(box_template, replace)
            box_id = env.add_object(box_urdf, box_pose)
            boxes.append(box_id)

        # Add goals for each box to be placed on the corresponding colored line
        for i, (box_id, line_pose) in enumerate(zip(boxes, line_poses)):
            color = box_colors[i]
            language_goal = self.lang_template.format(color=color)
            self.add_goal(objs=[box_id], matches=np.int32([[1]]), targ_poses=[line_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1,
                          language_goal=language_goal)

# Instantiate the task
task = ColorCodedContainerArrangement()