import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class FixtureStackingChallenge(Task):
    """Stack a blue bowl, a red L-shaped block, and a green cylinder sequentially upon a stand."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 objects to stack, so 6 steps should be sufficient
        self.lang_template = "stack the {object} on top of the {base}"
        self.task_completed_desc = "done stacking."
        self.ee = Suction  # Use suction end-effector to pick and place objects

    def reset(self, env):
        super().reset(env)

        # Define the sizes of the objects
        bowl_size = (0.12, 0.12, 0.06)  # x, y, z dimensions
        ell_size = (0.08, 0.04, 0.02)   # x, y, z dimensions
        cylinder_size = (0.04, 0.04, 0.08)  # x, y, z dimensions
        stand_size = (0.15, 0.15, 0.02)  # x, y, z dimensions

        # Add stand
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Add blue bowl
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_pose = self.get_random_pose(env, bowl_size)
        bowl_id = env.add_object(bowl_urdf, bowl_pose, color=utils.COLORS['blue'])

        # Add red L-shaped block
        ell_urdf = 'insertion/ell.urdf'
        ell_pose = self.get_random_pose(env, ell_size)
        ell_id = env.add_object(ell_urdf, ell_pose, color=utils.COLORS['red'])

        # Add green cylinder
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_pose = self.get_random_pose(env, cylinder_size)
        replace = {'DIM': cylinder_size, 'HALF': (cylinder_size[0] / 2, cylinder_size[1] / 2, cylinder_size[2] / 2)}
        cylinder_urdf = self.fill_template(cylinder_template, replace)
        cylinder_id = env.add_object(cylinder_urdf, cylinder_pose, color=utils.COLORS['green'])

        # Define target poses for stacking
        # The bowl is already at the base, so we stack the ell and cylinder on top of it
        ell_target_pose = (stand_pose[0], stand_pose[1])  # Same pose as stand but will be placed on top
        cylinder_target_pose = (stand_pose[0], stand_pose[1])  # Same pose as stand but will be placed on top of ell

        # Add goals for stacking the objects
        # Goal: place the red L-shaped block on the blue bowl
        self.add_goal(objs=[ell_id], matches=np.ones((1, 1)), targ_poses=[ell_target_pose], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3,
                      language_goal=self.lang_template.format(object='red L-shaped block', base='blue bowl'))

        # Goal: place the green cylinder on the red L-shaped block
        self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[cylinder_target_pose], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3,
                      language_goal=self.lang_template.format(object='green cylinder', base='red L-shaped block'))

        # Note: The blue bowl is already placed as the base, so no need to add a goal for it