import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlCylinderTower(Task):
    """
    Stack three differently colored cylinders within a bowl without toppling,
    then place a differently colored ball on top of the cylinder tower.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 8  # We have 4 goals, so max_steps is twice that number
        self.lang_template = "stack the {object} in the {container}"
        self.task_completed_desc = "done stacking the cylinder tower and placing the ball."
        self.ee = Suction  # We need to move objects on the Z axis, so we use Suction

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders and the ball
        cylinder_colors = [utils.COLORS['red'], utils.COLORS['green'], utils.COLORS['blue']]
        ball_color = utils.COLORS['yellow']

        # Add the bowl
        bowl_size = (0.18, 0.18, 0.06)  # x, y, z dimensions for the bowl
        bowl_pose = self.get_random_pose(env, bowl_size)
        bowl_urdf = 'bowl/bowl.urdf'
        env.add_object(bowl_urdf, bowl_pose, 'fixed')

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.05, 0.05, 0.15)  # x, y, z dimensions for the cylinders
        cylinders = []
        for i in range(3):
            pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': cylinder_colors[i]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append((cylinder_id, pose))

        # Add the ball on top of the cylinders
        ball_size = (0.04, 0.04, 0.04)  # x, y, z dimensions for the ball
        ball_pose = self.get_random_pose(env, ball_size)
        ball_template = 'ball/ball-template.urdf'
        replace = {'COLOR': ball_color}
        ball_urdf = self.fill_template(ball_template, replace)
        ball_id = env.add_object(ball_urdf, ball_pose)

        # Define the target poses for the cylinders and the ball within the bowl
        # The cylinders are stacked on top of each other, and the ball is on top
        targ_poses = []
        z_offset = 0.15  # Height of each cylinder
        for i in range(3):
            targ_poses.append((bowl_pose[0], bowl_pose[1] + (0, 0, z_offset * i)))

        # Add the ball's target pose on top of the cylinders
        ball_targ_pose = (bowl_pose[0], bowl_pose[1] + (0, 0, z_offset * 3))

        # Add goals for each cylinder
        for i in range(3):
            language_goal = self.lang_template.format(object=f"cylinder {i+1}", container="bowl")
            self.add_goal(objs=[cylinders[i][0]], matches=np.ones((1, 1)), targ_poses=[targ_poses[i]],
                          replace=False, rotations=True, metric='pose', params=None,
                          step_max_reward=1/4, language_goal=language_goal)

        # Add goal for the ball
        language_goal = self.lang_template.format(object="ball", container="on top of the cylinder tower")
        self.add_goal(objs=[ball_id], matches=np.ones((1, 1)), targ_poses=[ball_targ_pose],
                      replace=False, rotations=True, metric='pose', params=None,
                      step_max_reward=1/4, language_goal=language_goal)