import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedCylinderSorting(Task):
    """Pick up and sort five differently colored cylinders by placing each of them upright in designated zones marked with matching colors on the table surface."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call self.add_goal 5 times, so we set this to twice that number
        self.lang_template = "place the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done sorting all cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and available colors
        n_cylinders = 5
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = ['red', 'green', 'blue', 'yellow', 'purple']

        # Add cylinders with different colors
        cylinder_size = (0.04, 0.04, 0.12)  # Diameter, Diameter, Height
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []

        for i in range(n_cylinders):
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)
            # Get the color for the cylinder
            color = utils.COLORS[colors[i]]
            # Fill the URDF template with the cylinder's properties
            replace = {'DIM': cylinder_size, 'COLOR': color}
            urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append((cylinder_id, color_names[i]))

        # Add zones with matching colors for the cylinders
        zone_size = (0.1, 0.1, 0)  # Length, Width, Height (zones are flat)
        zone_urdf = 'zone/zone.urdf'
        zones = []

        for i, color_name in enumerate(color_names):
            # Get a random pose for the zone
            zone_pose = self.get_random_pose(env, zone_size)
            # Get the color for the zone
            color = utils.COLORS[color_name]
            # Add the zone to the environment
            env.add_object(zone_urdf, zone_pose, 'fixed', color=color)
            zones.append(zone_pose)

        # Define the goals for each cylinder to be placed in the matching color zone
        for cylinder, color_name in cylinders:
            # Find the index of the zone that matches the cylinder's color
            zone_idx = color_names.index(color_name)
            # Define the language goal
            language_goal = self.lang_template.format(color=color_name)
            # Add the goal for the cylinder to be placed in the matching zone
            self.add_goal(objs=[cylinder], matches=np.int32([[1]]), targ_poses=[zones[zone_idx]], replace=True,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

        # The task is set up with cylinders and matching zones, and goals are defined for sorting