import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderZoneSorting(Task):
    """Arrange five colored cylinders into corresponding color-coded zones on a tabletop, 
    ensuring each cylinder is standing vertically within its designated zone."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call self.add_goal 5 times, so set max_steps to twice that number
        self.ee = Suction  # Use Suction end-effector to pick and place cylinders vertically

        # Define the language template for the task
        self.lang_template = "place the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done sorting cylinders into zones."

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones
        n_cylinders = 5
        n_zones = 5

        # Define cylinder size and zone size
        cylinder_size = (0.05, 0.05, 0.15)  # (radius, radius, height)
        zone_size = (0.15, 0.15, 0)  # (x_size, y_size, z_size)

        # Define available colors
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [color for color in colors]  # For language description

        # Shuffle colors to avoid always picking an object of the same color
        np.random.shuffle(colors)

        # Add cylinders with corresponding colors
        cylinders = []
        for i in range(n_cylinders):
            color = colors[i]
            rgb = utils.COLORS[color]  # Get the RGB values for the color
            pose = self.get_random_pose(env, cylinder_size)  # Get a random pose for the cylinder
            replace = {'COLOR': rgb}
            cylinder_urdf = self.fill_template('cylinder/cylinder-template.urdf', replace)
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append((cylinder_id, color))

        # Add zones with corresponding colors
        zones = []
        for i in range(n_zones):
            color = colors[i]
            rgb = utils.COLORS[color]  # Get the RGB values for the color
            pose = self.get_random_pose(env, zone_size)  # Get a random pose for the zone
            replace = {'COLOR': rgb}
            zone_urdf = self.fill_template('zone/zone.urdf', replace)
            env.add_object(zone_urdf, pose, 'fixed')
            zones.append((pose, color))

        # Add goals for each cylinder to be in the matching color zone
        for cylinder, cylinder_color in cylinders:
            # Find the corresponding zone pose for the cylinder color
            zone_pose = next(zone_pose for zone_pose, zone_color in zones if zone_color == cylinder_color)
            language_goal = self.lang_template.format(color=cylinder_color)
            self.add_goal(
                objs=[cylinder],  # The cylinder to move
                matches=np.int32([[1]]),  # Each cylinder matches one zone
                targ_poses=[zone_pose],  # The target pose is the zone pose
                replace=False,  # Each cylinder has a unique zone
                rotations=False,  # No rotation needed, cylinders stand vertically
                metric='zone',  # We are placing into zones
                params=[(zone_pose, zone_size)],  # Parameters for the zone
                step_max_reward=1,  # Full reward for each correct placement
                language_goal=language_goal  # Language goal for the task
            )