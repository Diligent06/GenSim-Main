import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderSortStand(Task):
    """Sort five differently colored cylinders by stacking them on a stand in a specific color order from bottom to top."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call self.add_goal 5 times, so we set this to twice that number
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.lang_template = "stack the {color} cylinder on the {position} position on the stand"
        self.task_completed_desc = "done sorting cylinders."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the order of colors for the cylinders from bottom to top
        color_order = ['red', 'orange', 'yellow', 'green', 'blue']
        n_cylinders = len(color_order)

        # Add stand.
        stand_size = (0.05, 0.05, 0.15)  # x, y, z dimensions for the stand size
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Add cylinders.
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.02, 0.02, 0.08)  # x, y, z dimensions for the cylinder size
        cylinders = []
        for i, color_name in enumerate(color_order):
            # Generate a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Get the color RGB values
            color = utils.COLORS[color_name]
            # Replace the template URDF with the specific color and size
            replace = {'COLOR': color, 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

        # Define the target poses for each cylinder on the stand
        z_offset = 0.04  # Half the height of a cylinder to stack them
        for i, cylinder_id in enumerate(cylinders):
            # Calculate the z-coordinate for each cylinder's target pose on the stand
            z_pos = stand_pose[0][2] + (i + 0.5) * z_offset
            # The target pose is directly above the center of the stand
            target_pose = ((stand_pose[0][0], stand_pose[0][1], z_pos), (0, 0, 0, 1))
            # Define the language goal for this step
            position = ['bottom', 'second', 'middle', 'fourth', 'top'][i]
            language_goal = self.lang_template.format(color=color_order[i], position=position)
            # Add the goal for this cylinder
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)