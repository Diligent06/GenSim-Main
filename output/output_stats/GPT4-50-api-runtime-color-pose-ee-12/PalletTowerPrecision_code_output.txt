import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PalletTowerPrecision(Task):
    """Construct a tower by precisely stacking a sequence of five differently colored boxes on top of each other on a designated zone on a pallet."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to stack 5 boxes, so 10 steps should be sufficient
        self.lang_template = "stack the {color} box on top of the {place} box"
        self.task_completed_desc = "done constructing the tower."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors for the boxes
        box_colors = ['red', 'green', 'blue', 'orange', 'yellow']
        color_names = ['red', 'green', 'blue', 'orange', 'yellow']

        # Add pallet
        pallet_size = (0.3, 0.3, 0.05)  # Size of the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)  # Random pose for the pallet
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Add zone on the pallet where the boxes will be stacked
        zone_size = (0.07, 0.07, 0)  # Size of the zone
        zone_pose = (pallet_pose[0], pallet_pose[1])  # Zone pose is on the pallet
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Add boxes
        box_size = (0.06, 0.06, 0.06)  # Size of the boxes
        box_template = 'box/box-template.urdf'
        boxes = []
        for i, color in enumerate(box_colors):
            # Get a random pose for the box
            box_pose = self.get_random_pose(env, box_size)
            # Set the color for the box
            box_color = utils.COLORS[color]
            # Fill the URDF template with the box size and color
            replace = {'SIZE': box_size, 'COLOR': box_color}
            box_urdf = self.fill_template(box_template, replace)
            # Add the box to the environment
            box_id = env.add_object(box_urdf, box_pose)
            boxes.append(box_id)

            # Define the language goal
            if i == 0:
                place = 'pallet'
            else:
                place = color_names[i - 1]
            language_goal = self.lang_template.format(color=color, place=place)

            # Define the target pose for the box, which is on top of the previous box or the zone
            if i == 0:
                targ_pose = zone_pose
            else:
                # The target pose is above the previous box
                targ_pose = (boxes[i - 1].pose[0], boxes[i - 1].pose[1] + (0, 0, box_size[2]))

            # Add the goal for the current box
            self.add_goal(objs=[box_id], matches=np.ones((1, 1)), targ_poses=[targ_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1 / len(boxes),
                          language_goal=language_goal)

        # Set the primitive to be used for this task
        self.primitive = primitives.pick_place