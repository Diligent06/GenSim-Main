import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedContainerOrganization(Task):
    """Pick up five differently colored cylinders and place them upright into five matching colored zones within a single large container, maintaining spatial separation between each cylinder."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We have 5 objects to place, so 10 steps should be sufficient
        self.lang_template = "put the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done organizing the cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction gripper

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones
        n_objects = 5

        # Define the colors available
        colors = ['blue', 'red', 'green', 'orange', 'yellow']
        color_names = [f"{color} cylinder" for color in colors]

        # Add container box
        container_size = (0.35, 0.35, 0.05)  # Large enough to fit all cylinders and zones
        container_pose = self.get_random_pose(env, container_size)
        container_template = 'container/container-template.urdf'
        replace = {'DIM': container_size, 'HALF': (container_size[0] / 2, container_size[1] / 2, container_size[2] / 2)}
        container_urdf = self.fill_template(container_template, replace)
        env.add_object(container_urdf, container_pose, 'fixed')

        # Add cylinders and zones
        objects = []
        zone_poses = []
        for i in range(n_objects):
            # Add cylinder
            cylinder_size = (0.05, 0.05, 0.15)  # Diameter, Diameter, Height
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_template = 'cylinder/cylinder-template.urdf'
            replace = {'DIM': cylinder_size, 'HALF': (cylinder_size[0] / 2, cylinder_size[1] / 2, cylinder_size[2] / 2),
                       'COLOR': utils.COLORS[colors[i]]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            objects.append(cylinder_id)

            # Add zone
            zone_size = (0.07, 0.07, 0)  # Slightly larger than the cylinder base
            zone_pose = self.get_random_pose(env, zone_size)
            zone_urdf = 'zone/zone.urdf'
            replace = {'COLOR': utils.COLORS[colors[i]]}
            zone_urdf = self.fill_template(zone_urdf, replace)
            env.add_object(zone_urdf, zone_pose, 'fixed')
            zone_poses.append(zone_pose)

            # Define the language goal
            language_goal = self.lang_template.format(color=colors[i])

            # Add goal for each cylinder to be in the matching zone
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / n_objects,
                          language_goal=language_goal)

        # Ensure the zones are within the container
        for zone_pose in zone_poses:
            assert container_pose[0][0] < zone_pose[0][0] < container_pose[0][0] + container_size[0], "Zone x-coordinate is out of container bounds"
            assert container_pose[0][1] < zone_pose[0][1] < container_pose[0][1] + container_size[1], "Zone y-coordinate is out of container bounds"
            assert zone_pose[0][2] == container_pose[0][2] + container_size[2], "Zone z-coordinate should be at the container's top surface"