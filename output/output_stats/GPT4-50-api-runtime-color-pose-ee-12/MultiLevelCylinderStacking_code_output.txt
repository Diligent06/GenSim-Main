import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class MultiLevelCylinderStacking(Task):
    """
    Construct a multi-level structure by stacking two cylinders of different colors on a pallet,
    placing a box on top of them, and then capping the structure with a smaller cylinder.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have three main steps, so max_steps is twice that
        self.lang_template = "stack the {object} on the {place}"
        self.task_completed_desc = "done stacking the multi-level structure."
        self.ee = Suction  # We need to move objects on the Z axis, so we use Suction

    def reset(self, env):
        super().reset(env)

        # Define colors for the cylinders and box
        color_cylinder1 = utils.COLORS['blue']
        color_cylinder2 = utils.COLORS['red']
        color_box = utils.COLORS['green']
        color_small_cylinder = utils.COLORS['yellow']

        # Define sizes for the cylinders and box
        size_cylinder = (0.04, 0.04, 0.12)  # Diameter, Diameter, Height
        size_box = (0.12, 0.12, 0.04)  # Length, Width, Height
        size_small_cylinder = (0.02, 0.02, 0.06)  # Diameter, Diameter, Height

        # Add pallet
        pallet_size = (0.3, 0.3, 0.02)  # Length, Width, Height
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Add first cylinder
        cylinder_template = 'cylinder/cylinder-template.urdf'
        replace_cylinder = {'DIM': size_cylinder}
        cylinder_urdf1 = self.fill_template(cylinder_template, replace_cylinder)
        cylinder_pose1 = self.get_random_pose(env, size_cylinder)
        cylinder_id1 = env.add_object(cylinder_urdf1, cylinder_pose1, color=color_cylinder1)

        # Add second cylinder
        cylinder_urdf2 = self.fill_template(cylinder_template, replace_cylinder)
        cylinder_pose2 = self.get_random_pose(env, size_cylinder)
        cylinder_id2 = env.add_object(cylinder_urdf2, cylinder_pose2, color=color_cylinder2)

        # Add box
        box_template = 'box/box-template.urdf'
        replace_box = {'DIM': size_box}
        box_urdf = self.fill_template(box_template, replace_box)
        box_pose = self.get_random_pose(env, size_box)
        box_id = env.add_object(box_urdf, box_pose, color=color_box)

        # Add small cylinder
        replace_small_cylinder = {'DIM': size_small_cylinder}
        small_cylinder_urdf = self.fill_template(cylinder_template, replace_small_cylinder)
        small_cylinder_pose = self.get_random_pose(env, size_small_cylinder)
        small_cylinder_id = env.add_object(small_cylinder_urdf, small_cylinder_pose, color=color_small_cylinder)

        # Define target poses on the pallet for the cylinders and box
        target_pose_cylinder1 = (pallet_pose[0], pallet_pose[1])
        target_pose_cylinder2 = (pallet_pose[0], pallet_pose[1])
        target_pose_box = (pallet_pose[0], pallet_pose[1])
        target_pose_small_cylinder = (pallet_pose[0], pallet_pose[1])

        # Add goals
        # Goal 1: Place the first cylinder on the pallet
        self.add_goal(objs=[cylinder_id1], matches=np.ones((1, 1)), targ_poses=[target_pose_cylinder1],
                      replace=False, rotations=True, metric='pose', params=None, step_max_reward=1/3,
                      language_goal=self.lang_template.format(object='blue cylinder', place='pallet'))

        # Goal 2: Place the second cylinder on the pallet next to the first one
        self.add_goal(objs=[cylinder_id2], matches=np.ones((1, 1)), targ_poses=[target_pose_cylinder2],
                      replace=False, rotations=True, metric='pose', params=None, step_max_reward=1/3,
                      language_goal=self.lang_template.format(object='red cylinder', place='next to the blue cylinder'))

        # Goal 3: Place the box on top of the cylinders
        self.add_goal(objs=[box_id], matches=np.ones((1, 1)), targ_poses=[target_pose_box],
                      replace=False, rotations=True, metric='pose', params=None, step_max_reward=1/3,
                      language_goal=self.lang_template.format(object='green box', place='on top of the cylinders'))

        # Goal 4: Cap the structure with the small cylinder
        self.add_goal(objs=[small_cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose_small_cylinder],
                      replace=False, rotations=True, metric='pose', params=None, step_max_reward=1/3,
                      language_goal=self.lang_template.format(object='yellow small cylinder', place='on top of the green box'))