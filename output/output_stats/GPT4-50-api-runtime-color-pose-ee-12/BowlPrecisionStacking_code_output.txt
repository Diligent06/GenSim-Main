import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlPrecisionStacking(Task):
    """
    Stack two bowls of different colors on top of each other on a flat surface,
    with a green ball placed inside the bottom bowl before stacking the second bowl,
    ensuring the ball does not roll out during the process.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We have two main goals, so max_steps is twice that
        self.ee = Suction  # Use Suction end-effector to lift bowls and ball
        self.lang_template = "stack the {color1} bowl on top of the {color2} bowl with the green ball inside"
        self.task_completed_desc = "done stacking the bowls with the ball inside."

    def reset(self, env):
        super().reset(env)

        # Define the colors for the two bowls
        bowl_colors = ['red', 'blue']  # Two different colors for the bowls
        ball_color = 'green'  # Color for the ball

        # Add the first bowl (bottom bowl)
        bowl_size = (0.12, 0.12, 0.06)  # Size of the bowl
        bowl_urdf = 'bowl/bowl.urdf'
        bottom_bowl_pose = self.get_random_pose(env, bowl_size)
        bottom_bowl_id = env.add_object(bowl_urdf, bottom_bowl_pose, 'rigid', color=utils.COLORS[bowl_colors[0]])

        # Add the green ball inside the first bowl
        ball_size = (0.04, 0.04, 0.04)  # Size of the ball
        ball_template = 'ball/ball-template.urdf'
        ball_pose = bottom_bowl_pose  # Place the ball inside the bottom bowl
        ball_pose[0][2] += bowl_size[2] / 2  # Adjust z-coordinate to be inside the bowl
        replace = {'COLOR': utils.COLORS[ball_color]}
        ball_urdf = self.fill_template(ball_template, replace)
        ball_id = env.add_object(ball_urdf, ball_pose, 'rigid')

        # Add the second bowl (top bowl)
        top_bowl_pose = self.get_random_pose(env, bowl_size)
        top_bowl_id = env.add_object(bowl_urdf, top_bowl_pose, 'rigid', color=utils.COLORS[bowl_colors[1]])

        # Define the target pose for the top bowl to be stacked on the bottom bowl
        top_bowl_target_pose = bottom_bowl_pose
        top_bowl_target_pose[0][2] += bowl_size[2]  # Adjust z-coordinate to be on top of the bottom bowl

        # Define the language goal
        language_goal = self.lang_template.format(color1=bowl_colors[1], color2=bowl_colors[0])

        # Add the goal for stacking the top bowl on the bottom bowl with the ball inside
        self.add_goal(objs=[top_bowl_id], matches=np.ones((1, 1)), targ_poses=[top_bowl_target_pose],
                      replace=False, rotations=True, metric='pose', params=None, step_max_reward=1,
                      language_goal=language_goal)

        # Note: The ball is not explicitly included in the goal since it's already inside the bottom bowl
        # and the task is to stack the top bowl without the ball rolling out.