import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderPalletSorting(Task):
    """Sort red and green cylinders onto corresponding colored pallets."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to call self.add_goal twice, so set max_steps to twice that number
        self.lang_template = "put the {color} cylinders on the {color} pallet"
        self.task_completed_desc = "done sorting cylinders."
        self.ee = Suction  # Use Suction end-effector to pick and place cylinders

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders to sort
        n_cylinders = 2  # One red and one green cylinder

        # Define cylinder size
        cylinder_size = (0.05, 0.05, 0.15)  # (radius, radius, height)

        # Define pallet size
        pallet_size = (0.3, 0.3, 0.02)  # (length, width, height)

        # Add red pallet
        red_pallet_pose = self.get_random_pose(env, pallet_size)
        red_pallet_urdf = 'pallet/pallet.urdf'
        env.add_object(red_pallet_urdf, red_pallet_pose, 'fixed', color=utils.COLORS['red'])

        # Add green pallet
        green_pallet_pose = self.get_random_pose(env, pallet_size)
        green_pallet_urdf = 'pallet/pallet.urdf'
        env.add_object(green_pallet_urdf, green_pallet_pose, 'fixed', color=utils.COLORS['green'])

        # Add cylinders and set their goals
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i in range(n_cylinders):
            # Alternate colors
            color_name = 'red' if i % 2 == 0 else 'green'
            color_rgb = utils.COLORS[color_name]

            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)

            # Fill in the cylinder URDF template
            replace = {'COLOR': color_rgb}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

            # Set the target pallet pose based on the cylinder color
            target_pallet_pose = red_pallet_pose if color_name == 'red' else green_pallet_pose

            # Define the language goal
            language_goal = self.lang_template.format(color=color_name)

            # Add the goal for the cylinder
            self.add_goal(objs=[cylinder_id], 
                          matches=np.int32([[1]]), 
                          targ_poses=[target_pallet_pose], 
                          replace=False, 
                          rotations=False,  # Cylinders should remain upright, so no rotation needed
                          metric='pose', 
                          params=None, 
                          step_max_reward=1,  # Only one goal per cylinder, so max reward is 1
                          language_goal=language_goal)

        # The task is set up with two cylinders and two pallets, each cylinder has a goal to be placed on the matching colored pallet.