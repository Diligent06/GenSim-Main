import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderTowerBalance(Task):
    """Construct a tower by stacking three differently colored cylindrical objects on top of each other on a flat surface of the stand, and then carefully balance a ball on top of the completed tower."""

    def __init__(self):
        super().__init__()
        self.max_steps = 8  # We expect to add 4 goals, so max_steps is twice that number
        self.lang_template = "stack the {color} cylinder"
        self.task_completed_desc = "done constructing the cylinder tower."
        self.ee = Suction  # Use Suction end-effector to move objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define colors for the cylinders
        colors = ['red', 'green', 'blue']
        color_names = ['red cylinder', 'green cylinder', 'blue cylinder']
        cylinder_colors = [utils.COLORS[color] for color in colors]

        # Define the size for the cylinders
        cylinder_size = (0.05, 0.05, 0.1)  # (radius, radius, height)

        # Add base (stand) to the environment
        base_size = (0.15, 0.15, 0.005)  # (x, y, z) dimensions
        base_urdf = 'stacking/stand.urdf'
        base_pose = self.get_random_pose(env, base_size)
        env.add_object(base_urdf, base_pose, category='fixed')

        # Add cylinders to the environment
        cylinder_urdf = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i in range(3):
            pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': cylinder_colors[i]}
            urdf = self.fill_template(cylinder_urdf, replace)
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append(cylinder_id)

        # Add ball to the environment
        ball_size = (0.025, 0.025, 0.025)  # (radius, radius, radius)
        ball_urdf = 'ball/ball-template.urdf'
        ball_pose = self.get_random_pose(env, ball_size)
        replace = {'COLOR': utils.COLORS['gold']}  # Gold colored ball
        urdf = self.fill_template(ball_urdf, replace)
        ball_id = env.add_object(urdf, ball_pose)

        # Define target poses for the cylinders on the stand
        # The cylinders are stacked on top of each other, so their x, y coordinates are the same
        x, y, _ = base_pose[0]
        z_offset = 0.1  # Height of each cylinder
        target_poses = [
            [(x, y, z_offset * i), (0, 0, 0, 1)] for i in range(1, 4)
        ]

        # Add goals for stacking cylinders
        for i in range(3):
            language_goal = self.lang_template.format(color=color_names[i])
            self.add_goal(
                objs=[cylinders[i]],
                matches=np.ones((1, 1)),
                targ_poses=[target_poses[i]],
                replace=False,
                rotations=True,
                metric='pose',
                params=None,
                step_max_reward=1/4,
                language_goal=language_goal
            )

        # Add goal for balancing the ball on top of the tower
        ball_target_pose = [(x, y, z_offset * 3), (0, 0, 0, 1)]  # On top of the third cylinder
        language_goal = "balance the gold ball on top of the tower"
        self.add_goal(
            objs=[ball_id],
            matches=np.ones((1, 1)),
            targ_poses=[ball_target_pose],
            replace=False,
            rotations=False,  # Ball does not need to be rotated
            metric='pose',
            params=None,
            step_max_reward=1/4,
            language_goal=language_goal
        )