import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlOnPalletArrangement(Task):
    """Strategically place three different colored bowls on specific locations on a pallet,
    ensuring that each bowl is aligned with its designated zone marker without any overlap."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is set to twice that number
        self.lang_template = "place the {color} bowl on the {color} zone on the pallet"
        self.task_completed_desc = "done placing all bowls on the pallet."
        self.ee = Suction  # Using Suction end-effector to lift bowls in Z axis

    def reset(self, env):
        super().reset(env)

        # Define bowl colors
        bowl_colors = ['red', 'green', 'blue']
        bowl_color_names = ['red', 'green', 'blue']
        bowl_urdf = 'bowl/bowl.urdf'

        # Define bowl size (all bowls are the same size)
        bowl_size = (0.15, 0.15, 0.07)  # (x, y, z) dimensions

        # Add pallet
        pallet_size = (0.6, 0.6, 0.2)  # (x, y, z) dimensions
        pallet_pose = self.get_random_pose(env, pallet_size)
        pallet_urdf = 'pallet/pallet.urdf'
        env.add_object(pallet_urdf, pallet_pose, 'fixed')

        # Add zone markers on the pallet for bowl placement
        zone_urdf = 'zone/zone.urdf'
        zone_size = (0.2, 0.2, 0)  # (x, y, z) dimensions, flat zones
        zone_poses = []
        for i in range(3):
            # Generate zone poses on the pallet surface
            zone_pose = self.get_random_pose(env, zone_size)
            env.add_object(zone_urdf, zone_pose, 'fixed')
            zone_poses.append(zone_pose)

        # Add bowls and define goals
        for i, color in enumerate(bowl_colors):
            # Assign a random pose to the bowl
            bowl_pose = self.get_random_pose(env, bowl_size)
            # Assign a color to the bowl
            bowl_color = utils.COLORS[color]
            # Add bowl to the environment
            bowl_id = env.add_object(bowl_urdf, bowl_pose, color=bowl_color)

            # Define the language goal
            language_goal = self.lang_template.format(color=bowl_color_names[i])

            # Add goal for placing the bowl on the correct zone
            self.add_goal(objs=[bowl_id],
                          matches=np.int32([[1]]),  # Each bowl has a unique zone
                          targ_poses=[zone_poses[i]],  # Target pose is the zone pose
                          replace=False,  # Bowls cannot be placed in the same zone
                          rotations=False,  # Rotation is not considered in this task
                          metric='pose',  # We are using pose metric for placement
                          params=None,  # No additional parameters needed
                          step_max_reward=1,  # Full reward for placing each bowl correctly
                          language_goal=language_goal)  # Language goal for the task