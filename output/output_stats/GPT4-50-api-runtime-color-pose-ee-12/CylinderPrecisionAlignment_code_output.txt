import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderPrecisionAlignment(Task):
    """Align a sequence of five differently colored cylinders on a straight green line."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10
        self.lang_template = "align the {color} cylinder on the green line"
        self.task_completed_desc = "done aligning cylinders."
        self.ee = Suction  # Use Suction end-effector to pick and place cylinders vertically
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define colors for the cylinders
        colors = ['red', 'blue', 'green', 'yellow', 'purple']
        color_names = [utils.COLORS[color] for color in colors]

        # Add the green line to the environment
        line_size = (0.35, 0.005, 0.005)  # Size of the line
        line_pose = self.get_random_pose(env, line_size)  # Random pose for the line
        line_template = 'line/single-green-line-template.urdf'
        replace = {'DIM': line_size}
        line_urdf = self.fill_template(line_template, replace)
        env.add_object(line_urdf, line_pose, 'fixed')

        # Add cylinders to the environment
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.02, 0.02, 0.08)  # Diameter and height of the cylinder
        cylinder_poses = []
        for i, color_name in enumerate(color_names):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': color_name}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinder_poses.append(cylinder_pose)

            # Define the target pose for the cylinder on the green line
            # The target pose has the same orientation as the initial pose and is centered on the line
            target_pose = (line_pose[0], cylinder_pose[1])

            # Add goal for each cylinder
            language_goal = self.lang_template.format(color=colors[i])
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=True,
                          rotations=False, metric='pose', params=None, step_max_reward=1/5,
                          language_goal=language_goal)

        # Set the max steps to twice the number of goals
        self.max_steps = len(cylinder_poses) * 2