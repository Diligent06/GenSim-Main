import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionBowlStacking(Task):
    """Stack a set of three different colored bowls inside each other without toppling."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is twice the number of goals
        self.lang_template = "stack the {color} bowl"
        self.task_completed_desc = "done stacking bowls."
        self.ee = Suction  # Using Suction since we need to move objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define bowl sizes (large, medium, small)
        bowl_sizes = [(0.18, 0.18, 0.08), (0.15, 0.15, 0.06), (0.12, 0.12, 0.04)]
        bowl_urdf = 'bowl/bowl.urdf'

        # Define bowl colors
        colors = ['red', 'green', 'blue']
        color_rgb = [utils.COLORS[color] for color in colors]

        # Add bowls to the environment with random initial poses
        bowls = []
        for i, size in enumerate(bowl_sizes):
            pose = self.get_random_pose(env, size)
            bowl_id = env.add_object(bowl_urdf, pose, color=color_rgb[i])
            bowls.append((bowl_id, pose))

        # Define target poses for the bowls (stacked inside each other)
        # The largest bowl is at the bottom, so its target pose is its initial pose
        # The medium and small bowls are stacked on top, so their target poses are adjusted in z-axis
        targ_poses = [bowls[0][1]]  # The largest bowl's target pose is its initial pose
        for i in range(1, len(bowls)):
            # Adjust the z-coordinate for the target pose to stack the bowls
            x, y, z = bowls[i-1][1][0]
            z += bowl_sizes[i-1][2] / 2 + bowl_sizes[i][2] / 2  # Stack on top of the previous bowl
            targ_poses.append(((x, y, z), bowls[i][1][1]))

        # Add goals for each bowl
        for i, (bowl_id, _) in enumerate(bowls):
            language_goal = self.lang_template.format(color=colors[i])
            self.add_goal(objs=[bowl_id], matches=np.ones((1, 1)), targ_poses=[targ_poses[i]],
                          replace=False, rotations=False, metric='pose', params=None,
                          step_max_reward=1/3, language_goal=language_goal)

# Instantiate the task
task = PrecisionBowlStacking()