import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class StackingRingTower(Task):
    """Sequentially stack five differently colored cylinders to form a vertical tower on a designated zone."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to stack 5 rings, so 10 steps should be sufficient
        self.lang_template = "stack the {color} ring on the tower"
        self.task_completed_desc = "done stacking the ring tower."
        self.ee = Suction  # Use suction end-effector to pick and place cylinders vertically

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders in the specified sequence
        color_sequence = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = ['red', 'green', 'blue', 'yellow', 'purple']
        colors = [utils.COLORS[name] for name in color_sequence]

        # Define the size of the cylinders
        cylinder_height = 0.04  # Fixed height for all cylinders
        cylinder_radius = 0.05  # Fixed radius for all cylinders

        # Add the target zone where the tower will be built
        zone_size = (0.2, 0.2, 0)  # Zone size, with no height since it's a 2D zone
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Initialize a list to store the cylinder IDs
        cylinder_ids = []

        # Add cylinders to the environment
        for i, color in enumerate(colors):
            # Generate a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, (cylinder_radius*2, cylinder_radius*2, cylinder_height))

            # Define the cylinder size and color for the URDF template
            replace = {
                'DIM': (cylinder_radius, cylinder_height),
                'COLOR': color,
            }

            # Fill in the URDF template and add the object
            cylinder_urdf = self.fill_template('cylinder/cylinder-template.urdf', replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinder_ids.append(cylinder_id)

            # Define the target pose for the cylinder, stacking them on top of each other
            target_pose = (zone_pose[0], zone_pose[1])  # Same orientation as the zone
            target_pose[0][2] += (i + 1) * cylinder_height  # Increment the z-coordinate for stacking

            # Add the goal for each cylinder
            language_goal = self.lang_template.format(color=color_names[i])
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/5,
                          language_goal=language_goal)

        # Set the primitive to be used for this task
        self.primitive = primitives.pick_place