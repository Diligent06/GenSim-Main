import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedCylinderPlacement(Task):
    """Arrange five differently colored cylinders on corresponding colored zones on a pallet, ensuring each cylinder stands upright without any support."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We have 5 cylinders to place, so 10 steps should be sufficient
        self.lang_template = "place the {color} cylinder on the {color} zone"
        self.task_completed_desc = "all cylinders placed correctly."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define cylinder and zone sizes
        cylinder_size = (0.05, 0.05, 0.15)  # (x, y, z) dimensions
        zone_size = (0.07, 0.07, 0)  # Zones are flat, so z dimension is 0

        # Add pallet
        pallet_size = (0.35, 0.35, 0.02)  # (x, y, z) dimensions
        pallet_pose = self.get_random_pose(env, pallet_size)
        pallet_urdf = 'pallet/pallet.urdf'
        env.add_object(pallet_urdf, pallet_pose, 'fixed')

        # Define colors for cylinders and corresponding zones
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        cylinder_urdf_template = 'cylinder/cylinder-template.urdf'
        zone_urdf = 'zone/zone.urdf'

        # Add cylinders and zones
        cylinders = []
        zones = []
        for color in colors:
            # Add cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': utils.COLORS[color]}
            cylinder_urdf = self.fill_template(cylinder_urdf_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append((cylinder_id, cylinder_pose))

            # Add zone
            zone_pose = self.get_random_pose(env, zone_size)
            zone_color = utils.COLORS[color]
            zone_id = env.add_object(zone_urdf, zone_pose, color=zone_color)
            zones.append((zone_id, zone_pose))

        # Add goals for each cylinder to be placed in the matching color zone
        for cylinder, zone in zip(cylinders, zones):
            cylinder_id, _ = cylinder
            _, zone_pose = zone
            color_name = color.capitalize()
            language_goal = self.lang_template.format(color=color_name)
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / len(cylinders),
                          language_goal=language_goal)

# Note: The actual implementation of the `fill_template` function is not provided in the reference code.
# It is assumed to be a method of the Task class that replaces placeholders in the URDF template with actual values.