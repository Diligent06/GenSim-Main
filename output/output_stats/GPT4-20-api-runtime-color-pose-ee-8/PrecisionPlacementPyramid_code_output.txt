import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionPlacementPyramid(Task):
    """Build a pyramid with a base of four alternating color cylinders and a single color ball at the top, on a designated zone without the structure toppling over."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We will have 5 placement goals, so max_steps is set to twice that number
        self.lang_template = "build a pyramid with {object} on the {location}"
        self.task_completed_desc = "done building the precision placement pyramid."
        self.ee = Suction  # Using Suction end-effector as we need to move objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders and the ball
        cylinder_colors = [utils.COLORS['red'], utils.COLORS['blue'], utils.COLORS['green'], utils.COLORS['yellow']]
        ball_color = utils.COLORS['orange']

        # Add the zone where the pyramid will be built
        zone_size = (0.24, 0.24, 0)  # Size of the zone
        zone_pose = self.get_random_pose(env, zone_size)  # Random pose within the workspace bounds
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Add cylinders with alternating colors
        cylinder_urdf = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.04, 0.04, 0.08)  # Size of the cylinder
        cylinders = []
        for i in range(4):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Set the color for the cylinder
            replace = {'COLOR': cylinder_colors[i]}
            # Create the URDF with the specified color
            urdf = self.fill_template(cylinder_urdf, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, cylinder_pose)
            cylinders.append(cylinder_id)

        # Add the ball on top of the pyramid
        ball_urdf = 'ball/ball-template.urdf'
        ball_size = (0.04, 0.04, 0.04)  # Size of the ball
        ball_pose = self.get_random_pose(env, ball_size)
        replace = {'COLOR': ball_color}
        urdf = self.fill_template(ball_urdf, replace)
        ball_id = env.add_object(urdf, ball_pose)

        # Define the target poses for the cylinders and the ball on the zone
        # The cylinders are placed at the corners of a square on the zone
        # The ball is placed at the center of the square on top of the cylinders
        base_height = 0.08  # Height of the cylinders
        ball_height = 0.12  # Additional height for the ball to be on top of the cylinders
        offsets = [(-0.04, -0.04, base_height), (0.04, -0.04, base_height),
                   (0.04, 0.04, base_height), (-0.04, 0.04, base_height),
                   (0, 0, ball_height)]  # Offsets from the center of the zone
        target_poses = [utils.apply(zone_pose, offset) for offset in offsets]

        # Add goals for each cylinder and the ball
        for i, cylinder_id in enumerate(cylinders):
            language_goal = self.lang_template.format(object=f"cylinder {i+1}", location="designated zone")
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_poses[i]], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/5, language_goal=language_goal)

        # Add goal for the ball
        language_goal = self.lang_template.format(object="ball", location="top of the pyramid")
        self.add_goal(objs=[ball_id], matches=np.ones((1, 1)), targ_poses=[target_poses[-1]], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1/5, language_goal=language_goal)