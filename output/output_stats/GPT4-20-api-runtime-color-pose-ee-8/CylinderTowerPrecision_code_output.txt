import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderTowerPrecision(Task):
    """Arrange three cylinders of increasing diameters in a vertical stack on a marked zone."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is twice that number
        self.ee = Suction  # Use Suction end-effector to move objects on the Z axis
        self.lang_template = "stack the {color} cylinder on the {target_color} zone"
        self.task_completed_desc = "done stacking the cylinders."

    def reset(self, env):
        super().reset(env)

        # Define the sizes for the cylinders (diameter, height)
        sizes = [(0.08, 0.04), (0.06, 0.04), (0.04, 0.04)]  # Large, medium, small

        # Define the colors for the cylinders
        colors = ['red', 'green', 'blue']
        color_rgb = [utils.COLORS[color] for color in colors]

        # Add target zone
        zone_size = (0.15, 0.15, 0)  # Size of the zone
        zone_pose = self.get_random_pose(env, zone_size)  # Random pose for the zone
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')  # Add the zone to the environment

        # Add cylinders
        cylinder_urdf_template = 'cylinder/cylinder-template.urdf'
        cylinder_poses = []
        cylinders = []
        for i, size in enumerate(sizes):
            # Generate a random pose for the cylinder
            pose = self.get_random_pose(env, size)
            cylinder_poses.append(pose)

            # Replace the template URDF with the specific size and color for this cylinder
            replace = {'DIM': size, 'COLOR': color_rgb[i]}
            cylinder_urdf = self.fill_template(cylinder_urdf_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append(cylinder_id)

        # Define the target poses for the cylinders
        # The target pose is the same as the zone pose but with increasing z-offsets
        z_offset = 0.04  # Height of each cylinder
        targ_poses = [
            (zone_pose[0], zone_pose[1]),
            (zone_pose[0], (zone_pose[1][0], zone_pose[1][1], zone_pose[1][2] + z_offset)),
            (zone_pose[0], (zone_pose[1][0], zone_pose[1][1], zone_pose[1][2] + 2 * z_offset))
        ]

        # Add goals for each cylinder
        for i, cylinder_id in enumerate(cylinders):
            # Language goal for the current cylinder
            language_goal = self.lang_template.format(color=colors[i], target_color='green')

            # Add the goal for the current cylinder
            self.add_goal(
                objs=[cylinder_id],
                matches=np.ones((1, 1)),  # Each cylinder has only one correct place
                targ_poses=[targ_poses[i]],  # Target pose for the current cylinder
                replace=False,  # Cylinders should not be replaced once placed
                rotations=True,  # Allow rotations
                metric='pose',  # Use pose metric for precision
                params=None,  # No additional parameters needed
                step_max_reward=1 / len(cylinders),  # Reward is split across all cylinders
                language_goal=language_goal  # Language goal for the current step
            )