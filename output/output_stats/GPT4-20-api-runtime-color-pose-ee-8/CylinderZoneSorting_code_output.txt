import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderZoneSorting(Task):
    """Sort five cylinders of different colors into five designated zones based on color matching."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to sort 5 cylinders, so 10 steps should be sufficient
        self.lang_template = "place the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done sorting cylinders."
        self.ee = Suction  # Use suction end-effector to pick and place cylinders

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones
        n_cylinders = 5
        n_zones = 5

        # Define cylinder size
        cylinder_size = (0.04, 0.04, 0.1)  # (radius, radius, height)

        # Define zone size
        zone_size = (0.1, 0.1, 0)  # (x_length, y_length, z_height)

        # Define available colors
        colors = ['red', 'green', 'blue', 'yellow', 'purple']

        # Shuffle colors to avoid always picking the same color sequence
        np.random.shuffle(colors)

        # Add cylinders with different colors
        cylinders = []
        for i in range(n_cylinders):
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)
            # Define the color of the cylinder
            color = utils.COLORS[colors[i]]
            # Define the URDF template and replacements
            cylinder_template = 'cylinder/cylinder-template.urdf'
            replace = {'COLOR': color, 'SIZE': cylinder_size}
            # Fill the URDF template with the replacements
            urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder object to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append(cylinder_id)

        # Add zones with matching colors to the cylinders
        for i in range(n_zones):
            # Get a random pose for the zone
            zone_pose = self.get_random_pose(env, zone_size)
            # Define the color of the zone
            zone_color = utils.COLORS[colors[i]]
            # Add the zone object to the environment
            env.add_object('zone/zone.urdf', zone_pose, 'fixed', color=zone_color)
            # Define the language goal for placing the cylinder in the correct zone
            language_goal = self.lang_template.format(color=colors[i])
            # Add the goal for the cylinder to be placed in the matching zone
            self.add_goal(objs=[cylinders[i]], matches=np.int32([[1]]), targ_poses=[zone_pose], replace=True,
                          rotations=False, metric='zone', params=[(zone_pose, zone_size)], step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

        # Note: We set replace=True for the zones to allow cylinders to be placed in any zone
        # and rotations=False since we don't need to rotate the cylinders for this task.