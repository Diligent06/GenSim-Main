import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class StackRingOnCylinder(Task):
    """
    Stack five different colored rings represented by resized cylinders onto a vertical cylinder of different color
    without the stack toppling over.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to stack 5 rings, so 10 steps should be sufficient
        self.lang_template = "stack the {color} ring on the cylinder"
        self.task_completed_desc = "done stacking rings on cylinder."
        self.ee = Suction  # Use Suction end-effector to pick and place rings in the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the size and color of the base cylinder
        base_cylinder_size = (0.05, 0.05, 0.15)  # (radius, radius, height)
        base_cylinder_color = utils.COLORS['black']  # Base cylinder color

        # Add the base cylinder to the environment
        base_cylinder_pose = self.get_random_pose(env, base_cylinder_size)
        base_cylinder_template = 'cylinder/cylinder-template.urdf'
        base_cylinder_replace = {'SIZE': base_cylinder_size, 'COLOR': base_cylinder_color}
        base_cylinder_urdf = self.fill_template(base_cylinder_template, base_cylinder_replace)
        env.add_object(base_cylinder_urdf, base_cylinder_pose, 'fixed')

        # Define the size and colors for the rings
        ring_height = 0.02  # Fixed height for all rings
        ring_radius = 0.06  # Starting radius for the rings
        ring_colors = ['red', 'green', 'blue', 'yellow', 'purple']  # Ring colors

        # Add the rings to the environment
        rings = []
        for i, color in enumerate(ring_colors):
            ring_size = (ring_radius, ring_radius, ring_height)
            ring_color = utils.COLORS[color]
            ring_pose = self.get_random_pose(env, ring_size)
            ring_template = 'cylinder/cylinder-template.urdf'
            ring_replace = {'SIZE': ring_size, 'COLOR': ring_color}
            ring_urdf = self.fill_template(ring_template, ring_replace)
            ring_id = env.add_object(ring_urdf, ring_pose)
            rings.append(ring_id)

            # Define the language goal for stacking each ring
            language_goal = self.lang_template.format(color=color)

            # Define the target pose for each ring, which is on top of the base cylinder
            # The Z coordinate is incremented with each ring to stack them on top of each other
            target_pose = (base_cylinder_pose[0], base_cylinder_pose[1])
            target_pose[0][2] += (i + 1) * ring_height  # Increment Z coordinate for stacking

            # Add the goal for each ring
            self.add_goal(objs=[ring_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/5,
                          language_goal=language_goal)

        # Set the primitive action to be used for this task
        self.primitive = primitives.push