import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderPalletTower(Task):
    """Pick up six colored cylinders and stack them onto a single pallet to form a tower,
    ensuring that the same color does not touch each other."""

    def __init__(self):
        super().__init__()
        self.max_steps = 12  # We will have 6 goals and thus set max_steps to twice that number
        self.lang_template = "stack the {color} cylinder on the pallet"
        self.task_completed_desc = "done stacking the cylinder tower."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction gripper
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define cylinder size and pallet size
        cylinder_size = (0.05, 0.05, 0.1)  # (x, y, z) dimensions
        pallet_size = (0.3, 0.3, 0.02)  # (x, y, z) dimensions

        # Add pallet to the environment
        pallet_urdf = 'pallet/pallet.urdf'
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object(pallet_urdf, pallet_pose, 'fixed')

        # Define colors for the cylinders
        colors = ['red', 'blue', 'green', 'yellow', 'purple', 'orange']
        color_names = ['red', 'blue', 'green', 'yellow', 'purple', 'orange']

        # Add cylinders to the environment
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i, color in enumerate(colors):
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)
            # Set the color for the cylinder
            replace = {'COLOR': utils.COLORS[color]}
            # Replace the template URDF with the specific color
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append(cylinder_id)

        # Define the target poses for the cylinders on the pallet
        # The cylinders should be stacked on top of each other
        targ_poses = []
        for i in range(6):
            # The x, y coordinates are the same as the pallet's and the z coordinate is stacked
            targ_pose = (pallet_pose[0], pallet_pose[1], pallet_size[2] + i * cylinder_size[2])
            targ_poses.append(targ_pose)

        # Add goals for stacking the cylinders
        for i in range(6):
            # Define the language goal for the current cylinder
            language_goal = self.lang_template.format(color=color_names[i])
            # Add the goal for the current cylinder
            self.add_goal(objs=[cylinders[i]], matches=np.ones((1, 1)), targ_poses=[targ_poses[i]], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/6,
                          language_goal=language_goal)

        # Note: We assume that the cylinders are added in such a way that the same colors do not touch each other.
        # This is a simplification and in a more complex scenario, we would need to check for color adjacency
        # and adjust the goals accordingly.