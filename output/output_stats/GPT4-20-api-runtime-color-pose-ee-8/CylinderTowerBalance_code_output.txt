import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderTowerBalance(Task):
    """Stack three cylinders of varying diameters on top of each other in ascending order of size onto a small stand without toppling over."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is twice that number
        self.lang_template = "stack the {size} cylinder"
        self.task_completed_desc = "done stacking the cylinders."
        self.ee = Suction  # Suction end-effector is needed to lift objects on the Z axis
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define cylinder sizes (diameter, height)
        sizes = [
            (0.04, 0.08),  # Small cylinder
            (0.06, 0.08),  # Medium cylinder
            (0.08, 0.08)   # Large cylinder
        ]

        # Define colors for cylinders
        colors = [
            utils.COLORS['red'],
            utils.COLORS['green'],
            utils.COLORS['blue']
        ]

        # Add base stand
        base_size = (0.1, 0.1, 0.005)  # Size of the base stand
        base_urdf = 'stacking/stand.urdf'
        base_pose = self.get_random_pose(env, base_size)
        env.add_object(base_urdf, base_pose, category='fixed')

        # Add cylinders
        cylinder_urdf_template = 'cylinder/cylinder-template.urdf'
        cylinder_poses = []
        cylinder_ids = []
        for i, size in enumerate(sizes):
            # Generate a random pose for the cylinder
            pose = self.get_random_pose(env, size)
            cylinder_poses.append(pose)

            # Fill in the URDF template with size and color
            replace = {'SIZE': size, 'COLOR': colors[i]}
            cylinder_urdf = self.fill_template(cylinder_urdf_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinder_ids.append(cylinder_id)

        # Define target poses for the cylinders on the stand
        z_offset = 0.08  # Height of each cylinder
        target_poses = [
            (base_pose[0], base_pose[1]),  # Target pose for large cylinder
            (utils.apply(base_pose, (0, 0, z_offset)), base_pose[1]),  # Target pose for medium cylinder
            (utils.apply(base_pose, (0, 0, z_offset * 2)), base_pose[1])  # Target pose for small cylinder
        ]

        # Add goals for stacking cylinders in ascending order of size
        for i in range(3):
            language_goal = self.lang_template.format(size=['small', 'medium', 'large'][i])
            self.add_goal(
                objs=[cylinder_ids[i]],
                matches=np.ones((1, 1)),
                targ_poses=[target_poses[i]],
                replace=False,
                rotations=True,
                metric='pose',
                params=None,
                step_max_reward=1 / 3,
                language_goal=language_goal
            )

        # The task is set up with cylinders and goals for stacking them in order