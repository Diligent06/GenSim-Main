import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedCylinderArrangement(Task):
    """Arrange a sequence of five colored cylinders into corresponding colored zones on a pallet."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call self.add_goal 5 times, so set max_steps to twice that number
        self.lang_template = "put the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done arranging the cylinders."
        self.ee = Suction  # Use Suction end-effector to pick and place cylinders upright

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders and corresponding zones
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [f"{color} cylinder" for color in colors]

        # Add pallet where the zones will be placed
        pallet_size = (0.3, 0.3, 0.02)  # Size of the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)
        pallet_urdf = 'pallet/pallet.urdf'
        env.add_object(pallet_urdf, pallet_pose, 'fixed')

        # Add zones and cylinders
        zone_size = (0.06, 0.06, 0)  # Size of each zone
        cylinder_size = (0.02, 0.02, 0.1)  # Size of each cylinder
        cylinder_template = 'cylinder/cylinder-template.urdf'
        zone_urdf = 'zone/zone.urdf'

        for i, color in enumerate(colors):
            # Add zone with the same color as the cylinder
            zone_pose = self.get_random_pose(env, zone_size)
            env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[color])

            # Add cylinder with the corresponding color
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': utils.COLORS[color]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

            # Define the language goal for placing the cylinder in the correct zone
            language_goal = self.lang_template.format(color=color)

            # Add goal for placing the cylinder in the correct zone
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/5,
                          language_goal=language_goal)

        # Set the primitive to be used for this task
        self.primitive = primitives.pick_place