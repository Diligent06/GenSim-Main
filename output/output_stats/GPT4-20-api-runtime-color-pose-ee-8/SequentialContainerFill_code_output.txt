import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class SequentialContainerFill(Task):
    """Pick up cylindrical objects of increasing sizes and place them into a container in ascending order without overhanging the container's edge."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have 5 objects and 5 corresponding goals
        self.lang_template = "put the {color} cylinder in the container in ascending order"
        self.task_completed_desc = "done placing all cylinders in order."
        self.ee = Suction  # Using Suction since we need to move objects on the Z axis
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and their sizes
        n_objects = 5
        cylinder_sizes = [(0.02 + 0.01 * i, 0.02 + 0.01 * i, 0.08) for i in range(n_objects)]  # Increasing diameters and fixed height

        # Add container box with a fixed size
        container_size = (0.15, 0.15, 0.05)  # L x W x H
        container_pose = self.get_random_pose(env, container_size)
        container_template = 'container/container-template.urdf'
        replace = {'DIM': container_size, 'HALF': (container_size[0] / 2, container_size[1] / 2, container_size[2] / 2)}
        container_urdf = self.fill_template(container_template, replace)
        env.add_object(container_urdf, container_pose, 'fixed')

        # Add cylinders with increasing sizes
        cylinder_template = 'cylinder/cylinder-template.urdf'
        colors = ['red', 'orange', 'yellow', 'green', 'blue']  # Assign a unique color to each cylinder
        objects = []
        for i in range(n_objects):
            size = cylinder_sizes[i]
            color = utils.COLORS[colors[i]]
            pose = self.get_random_pose(env, size)
            replace = {'DIM': size, 'HALF': (size[0] / 2, size[1] / 2, size[2] / 2), 'COLOR': color}
            urdf = self.fill_template(cylinder_template, replace)
            obj_id = env.add_object(urdf, pose)
            objects.append(obj_id)

        # Define the target poses for each cylinder inside the container
        targ_poses = []
        for i in range(n_objects):
            # Target pose is the same as the container pose but with an offset in z to account for cylinder height
            x, y, z = container_pose[0]
            z += (i + 1) * (cylinder_sizes[0][2] / 2)  # Stack cylinders on top of each other
            targ_poses.append(((x, y, z), container_pose[1]))

        # Add goals for each cylinder to be placed in the container in ascending order
        for i in range(n_objects):
            language_goal = self.lang_template.format(color=colors[i])
            self.add_goal(objs=[objects[i]], matches=np.int32([[1]]), targ_poses=[targ_poses[i]], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1 / n_objects,
                          language_goal=language_goal)