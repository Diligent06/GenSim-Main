import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlStandAlignment(Task):
    """Align a set of five colored bowls in ascending order of size onto marked regions on a stand."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call self.add_goal 5 times, so we set max_steps to twice that number
        self.lang_template = "place the {color} bowl on the {position} mark on the stand"
        self.task_completed_desc = "done aligning bowls on the stand."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define bowl sizes in ascending order and their colors
        bowl_sizes = [(0.05, 0.05, 0.02), (0.06, 0.06, 0.02), (0.07, 0.07, 0.02),
                      (0.08, 0.08, 0.02), (0.09, 0.09, 0.02)]
        bowl_colors = ['red', 'orange', 'yellow', 'green', 'blue']
        color_names = ['red', 'orange', 'yellow', 'green', 'blue']

        # Add stand
        stand_size = (0.15, 0.05, 0.05)
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Add bowls and define their target poses on the stand
        bowls = []
        bowl_urdf = 'bowl/bowl.urdf'
        target_positions = ['first', 'second', 'third', 'fourth', 'fifth']
        for i, size in enumerate(bowl_sizes):
            # Get a random pose for the bowl
            pose = self.get_random_pose(env, size)
            # Define the color of the bowl
            color = utils.COLORS[bowl_colors[i]]
            # Add the bowl to the environment
            bowl_id = env.add_object(bowl_urdf, pose, color=color)
            bowls.append(bowl_id)

            # Define the target pose for the bowl on the stand
            # The x-coordinate is offset by the bowl's index to space them out evenly
            target_x = stand_pose[0][0] - 0.1 + 0.05 * i
            target_pose = [(target_x, stand_pose[0][1], stand_pose[0][2] + stand_size[2] / 2 + size[2] / 2),
                           (0, 0, 0, 1)]  # We use a default orientation (quaternion) for simplicity

            # Add a goal for each bowl
            language_goal = self.lang_template.format(color=color_names[i], position=target_positions[i])
            self.add_goal(objs=[bowl_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / len(bowl_sizes),
                          language_goal=language_goal)

        # The task is to align the bowls in ascending order of size onto the stand
        # Each bowl has a designated position marked on the stand
        # The bowls must be centered and stable on their marks