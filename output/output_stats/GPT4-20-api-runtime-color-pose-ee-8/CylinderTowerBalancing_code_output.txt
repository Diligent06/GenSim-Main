import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderTowerBalancing(Task):
    """Build a vertical stack of three differently colored cylinders on top of a flat box."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 goals, so max_steps is twice the number of goals
        self.lang_template = "stack the {color} cylinder on top of the {base}"
        self.task_completed_desc = "done building the cylinder tower."
        self.ee = Suction  # Use Suction end-effector to move cylinders on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the size of the box and cylinders
        box_size = (0.15, 0.15, 0.02)  # x, y, z dimensions
        cylinder_size = (0.05, 0.05, 0.15)  # x, y, z dimensions

        # Add a flat box to serve as the base of the tower
        box_pose = self.get_random_pose(env, box_size)
        box_template = 'box/box-template.urdf'
        box_replace = {'DIM': box_size}
        box_urdf = self.fill_template(box_template, box_replace)
        env.add_object(box_urdf, box_pose, 'fixed')

        # Define colors for the cylinders
        colors = ['red', 'green', 'blue']
        color_names = ['red', 'green', 'blue']
        np.random.shuffle(colors)  # Shuffle colors to randomize the order

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_urdfs = []
        cylinder_poses = []
        for i, color in enumerate(colors):
            # Generate the color RGB values
            color_rgb = utils.COLORS[color]

            # Generate a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)

            # Fill the URDF template with the specific color and size
            replace = {'COLOR': color_rgb, 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

            # Store the URDF and pose for later use
            cylinder_urdfs.append(cylinder_urdf)
            cylinder_poses.append(cylinder_pose)

            # Define the target pose for the cylinder on top of the box or the previous cylinder
            if i == 0:
                # The first cylinder goes on the box
                z_offset = box_size[2] / 2 + cylinder_size[2] / 2
            else:
                # Subsequent cylinders go on top of the previous one
                z_offset += cylinder_size[2]

            # The target position is the center of the box with the appropriate z offset
            target_position = (box_pose[0][0], box_pose[0][1], box_pose[0][2] + z_offset)
            target_pose = (target_position, (0, 0, 0, 1))  # No rotation

            # Add the goal for the current cylinder
            language_goal = self.lang_template.format(color=color_names[i], base='box' if i == 0 else color_names[i-1] + ' cylinder')
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/3, language_goal=language_goal)

        # The task is to stack the cylinders in the order they were added
        # The step_max_reward is 1/3 because there are three cylinders to stack