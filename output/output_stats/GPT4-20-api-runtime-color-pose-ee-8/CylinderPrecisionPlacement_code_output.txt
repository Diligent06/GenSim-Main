import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderPrecisionPlacement(Task):
    """Place five differently colored cylinders into corresponding colored zones marked on a pallet."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We have 5 cylinders to place, so 10 steps should be sufficient
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

        # Language templates for instructions
        self.lang_template = "place the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done placing all cylinders."

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones
        n_cylinders = 5

        # Define cylinder size
        cylinder_size = (0.05, 0.05, 0.15)  # (radius, radius, height)

        # Define zone size
        zone_size = (0.07, 0.07, 0)  # (length, width, height)

        # Add pallet
        pallet_size = (0.35, 0.35, 0.02)  # (length, width, height)
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Define available colors
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [color for color in colors]  # For language description

        # Add zones to the pallet
        zone_poses = []
        for i, color in enumerate(colors):
            zone_pose = self.get_random_pose(env, zone_size)
            zone_urdf = 'zone/zone.urdf'
            env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[color])
            zone_poses.append(zone_pose)

        # Add cylinders
        cylinders = []
        for i, color in enumerate(colors):
            # Generate a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_urdf = 'cylinder/cylinder-template.urdf'
            replace = {'COLOR': utils.COLORS[color]}
            urdf = self.fill_template(cylinder_urdf, replace)
            cylinder_id = env.add_object(urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Add goal for each cylinder
            language_goal = self.lang_template.format(color=color_names[i])
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_poses[i]],
                          replace=True, rotations=False, metric='pose', params=None,
                          step_max_reward=1 / n_cylinders, language_goal=language_goal)

        # Set the task's progress and rewards
        self.goals = [goal.get_dict() for goal in self.goals]