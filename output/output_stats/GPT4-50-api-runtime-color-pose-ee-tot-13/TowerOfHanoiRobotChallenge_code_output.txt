import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class TowerOfHanoiRobotChallenge(Task):
    """
    Sequentially move three different-sized cylinders from a start zone to an end zone,
    following the Tower of Hanoi rules where a larger cylinder cannot be placed on top of a smaller one.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have three cylinders to move, so we set max_steps to twice the number
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.lang_template = "move the {size} cylinder to the {zone} zone"
        self.task_completed_desc = "completed the Tower of Hanoi challenge."

    def reset(self, env):
        super().reset(env)

        # Define the sizes for the cylinders (small, medium, large)
        sizes = [(0.04, 0.04, 0.12), (0.06, 0.06, 0.12), (0.08, 0.08, 0.12)]
        colors = ['red', 'green', 'blue']  # Assign colors to each cylinder for easy identification

        # Add start and end zones
        zone_size = (0.15, 0.15, 0)  # Zones are flat squares on the table
        start_zone_pose = self.get_random_pose(env, zone_size)
        end_zone_pose = self.get_random_pose(env, zone_size)
        env.add_object('zone/zone.urdf', start_zone_pose, 'fixed')
        env.add_object('zone/zone.urdf', end_zone_pose, 'fixed')

        # Add cylinders with different sizes and colors
        cylinders = []
        for i, size in enumerate(sizes):
            # Generate a random pose for the cylinder within the start zone
            pose = self.get_random_pose(env, size)
            color = utils.COLORS[colors[i]]  # Get the RGB values for the color
            cylinder_urdf = self.fill_template('cylinder/cylinder-template.urdf', {'COLOR': color})
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append(cylinder_id)

        # Define the goals for each cylinder
        for i, cylinder_id in enumerate(cylinders):
            # The target pose is within the end zone with the same orientation as the start pose
            target_pose = (end_zone_pose[0], pose[1])
            language_goal = self.lang_template.format(size=colors[i], zone="end")
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=True,
                          rotations=False, metric='pose', params=None, step_max_reward=1/3, language_goal=language_goal)

        # Note: The Tower of Hanoi rule (larger cylinder cannot be placed on top of a smaller one) is enforced
        # by the task's logic and the agent's understanding of the task, rather than being explicitly coded here.