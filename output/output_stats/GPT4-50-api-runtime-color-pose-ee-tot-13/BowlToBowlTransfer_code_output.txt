import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlToBowlTransfer(Task):
    """Transfer a green ball from a red bowl into a blue bowl without dropping it outside the bowls."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to call self.add_goal twice, so we set max_steps to twice that number.
        self.lang_template = "transfer the {color} ball from the {source_color} bowl to the {target_color} bowl"
        self.task_completed_desc = "done transferring the ball."
        self.ee = Suction  # We use Suction since we need to move the ball on the Z axis.

    def reset(self, env):
        super().reset(env)

        # Define the colors for the bowls and the ball using the provided utils.COLORS dictionary.
        red_color = utils.COLORS['red']
        blue_color = utils.COLORS['blue']
        green_color = utils.COLORS['green']

        # Define the size for the bowls and the ball.
        bowl_size = (0.15, 0.15, 0.07)  # Approximate size for the bowl (x, y, z).
        ball_size = (0.05, 0.05, 0.05)  # Approximate size for the ball (x, y, z).

        # Add a red bowl to the environment.
        red_bowl_pose = self.get_random_pose(env, bowl_size)
        red_bowl_urdf = 'bowl/bowl.urdf'
        env.add_object(red_bowl_urdf, red_bowl_pose, 'fixed', color=red_color)

        # Add a blue bowl to the environment.
        blue_bowl_pose = self.get_random_pose(env, bowl_size)
        blue_bowl_urdf = 'bowl/bowl.urdf'
        env.add_object(blue_bowl_urdf, blue_bowl_pose, 'fixed', color=blue_color)

        # Add a green ball to the environment inside the red bowl.
        ball_template = 'ball/ball-template.urdf'
        # Adjust the z-coordinate to place the ball inside the red bowl.
        ball_pose = list(red_bowl_pose[0])
        ball_pose[2] += bowl_size[2] / 2 + ball_size[2] / 2
        ball_pose = (tuple(ball_pose), red_bowl_pose[1])
        replace = {'COLOR': green_color}
        ball_urdf = self.fill_template(ball_template, replace)
        ball_id = env.add_object(ball_urdf, ball_pose)

        # Define the language goal.
        language_goal = self.lang_template.format(color='green', source_color='red', target_color='blue')

        # Add the goal for transferring the ball from the red bowl to the blue bowl.
        self.add_goal(objs=[ball_id], 
                      matches=np.ones((1, 1)), 
                      targ_poses=[blue_bowl_pose],  # Target pose is the pose of the blue bowl.
                      replace=True, 
                      rotations=False,  # Rotation is not necessary for the ball.
                      metric='pose', 
                      params=None, 
                      step_max_reward=1,  # Only one goal, so max reward is 1.
                      language_goal=language_goal)