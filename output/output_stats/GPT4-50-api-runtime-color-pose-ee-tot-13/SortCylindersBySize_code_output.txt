import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class SortCylindersBySize(Task):
    """Sort cylinders by size into separate designated zones on the tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to sort 5 cylinders, so 10 steps should be sufficient
        self.lang_template = "place the {size} cylinder in the designated zone"
        self.task_completed_desc = "done sorting cylinders by size."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Number of cylinders to sort
        n_cylinders = 5

        # Generate random sizes for the cylinders
        sizes = np.linspace(0.02, 0.10, n_cylinders)  # Generate 5 sizes from 0.02 to 0.10 meters
        np.random.shuffle(sizes)  # Shuffle the sizes to randomize the order

        # Add zones for sorted cylinders
        zone_size = (0.05, 0.05, 0)  # Zones are 5cm x 5cm
        zone_urdf = 'zone/zone.urdf'
        zone_poses = []
        for i in range(n_cylinders):
            zone_pose = self.get_random_pose(env, zone_size)
            env.add_object(zone_urdf, zone_pose, 'fixed')
            zone_poses.append(zone_pose)

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i, size in enumerate(sizes):
            # Define the size of the cylinder
            obj_size = (size, size, size)  # Diameter and height are equal to 'size'
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, obj_size)
            # Define the color of the cylinder
            color = utils.COLORS['silver']  # Let's make all cylinders silver
            # Replace the placeholders in the URDF template
            replace = {'SIZE': obj_size, 'COLOR': color}
            # Generate the URDF for the cylinder
            urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append((cylinder_id, size))

        # Sort the cylinders by size for the goal
        cylinders.sort(key=lambda x: x[1])  # Sort by size (ascending)

        # Add goals for each cylinder
        for i, (cylinder_id, size) in enumerate(cylinders):
            # Define the language goal
            size_descriptor = "smallest" if i == 0 else "largest" if i == n_cylinders - 1 else f"{i+1}-th"
            language_goal = self.lang_template.format(size=size_descriptor)
            # Add the goal for the cylinder
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_poses[i]], replace=True,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

# Instantiate the task
task = SortCylindersBySize()