import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils

class CylinderZoneAlignment(Task):
    """Place a set number of cylinders in a straight line within a designated rectangular zone on the tabletop, ensuring the cylinders touch end-to-end without overlapping."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to call self.add_goal twice, so we set this to twice that number
        self.lang_template = "align the {color} cylinders in the zone"
        self.task_completed_desc = "done aligning cylinders."
        # Since we only need to translate objects in a 2D plane, we can use the Spatula end-effector
        self.ee = Spatula
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and the zone size
        n_cylinders = 3
        zone_size = (0.3, 0.05, 0)  # Length, width, and height (height is 0 because it's a flat zone)

        # Add the zone where cylinders need to be aligned
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Add cylinders
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for _ in range(n_cylinders):
            # Define the cylinder size
            cylinder_size = (0.02, 0.02, 0.1)  # Radius, radius, height
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Define the color of the cylinder
            color = utils.COLORS['blue']  # Let's make all cylinders blue for simplicity
            # Replace placeholders in the URDF template
            replace = {'SIZE': cylinder_size, 'COLOR': color}
            # Generate the URDF for the cylinder
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

        # Define the target poses for the cylinders to be aligned in the zone
        # We want them to be end-to-end, so we calculate the positions accordingly
        targ_poses = []
        for i in range(n_cylinders):
            # Calculate the x position for each cylinder to be in a line
            x_offset = zone_pose[0][0] - zone_size[0] / 2 + cylinder_size[2] / 2 + i * cylinder_size[2]
            # The y and z positions are the same as the zone
            y_offset = zone_pose[0][1]
            z_offset = zone_pose[0][2]
            # The orientation is the same as the zone
            orientation = zone_pose[1]
            # Append the target pose for the current cylinder
            targ_poses.append(((x_offset, y_offset, z_offset), orientation))

        # Add the goal for the task
        language_goal = self.lang_template.format(color="blue")
        self.add_goal(objs=cylinders, matches=np.ones((n_cylinders, 1)), targ_poses=targ_poses, replace=False,
                      rotations=False, metric='zone', params=[(zone_pose, zone_size)], step_max_reward=1,
                      language_goal=language_goal)