import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderPrecisionDocking(Task):
    """Place a series of differently colored cylinders into matching colored zones,
    ensuring each cylinder stands vertically without toppling over."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # Assuming we have 2 cylinders to place, hence 2 * 2 = 4 steps
        self.lang_template = "place the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done placing all cylinders."
        self.ee = Suction  # Using Suction end-effector to pick and place cylinders vertically

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones
        n_cylinders = 2

        # Define cylinder size
        cylinder_size = (0.05, 0.05, 0.15)  # (radius, radius, height)

        # Define colors for cylinders and corresponding zones
        colors = ['red', 'blue']
        color_names = ['red', 'blue']

        # Add zones with matching colors to cylinders
        zone_size = (0.07, 0.07, 0)  # Slightly larger than cylinder base to fit easily
        zone_urdf = 'zone/zone.urdf'
        zone_poses = []
        for color_name in color_names:
            zone_pose = self.get_random_pose(env, zone_size)
            zone_color = utils.COLORS[color_name]
            env.add_object(zone_urdf, zone_pose, 'fixed', color=zone_color)
            zone_poses.append(zone_pose)

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i in range(n_cylinders):
            color_name = colors[i]
            color_rgb = utils.COLORS[color_name]
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {
                'COLOR': color_rgb,
                'SIZE': cylinder_size
            }
            # Replace the template URDF with the specified color and size
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            
            # Define the language goal
            language_goal = self.lang_template.format(color=color_name)
            
            # Add goal for placing the cylinder in the matching zone
            self.add_goal(
                objs=[cylinder_id],
                matches=np.int32([[1]]),  # Each cylinder matches with one zone
                targ_poses=[zone_poses[i]],  # Target pose is the pose of the matching zone
                replace=False,  # Cylinder should not be replaced after placement
                rotations=False,  # Cylinder should be placed vertically, no rotation needed
                metric='pose',  # Evaluate based on the final pose of the cylinder
                params=None,  # No additional parameters needed for pose metric
                step_max_reward=1,  # Full reward for placing each cylinder correctly
                language_goal=language_goal
            )

# Instantiate the task
task = CylinderPrecisionDocking()