import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BalancedCylinderPlacement(Task):
    """Arrange a set of cylinders of varying sizes and colors on a narrow stand, balancing them to prevent toppling."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to call self.add_goal twice, so we set this to twice that number
        self.lang_template = "place the {color} cylinder on the stand"
        self.task_completed_desc = "done placing all cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and the stand size
        n_cylinders = 2
        stand_size = (0.05, 0.05, 0.15)  # (length, width, height)

        # Add the stand to the environment
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, 'fixed')

        # Define cylinder template and size range
        cylinder_template = 'cylinder/cylinder-template.urdf'
        min_cylinder_size = 0.02  # Minimum diameter of the cylinder
        max_cylinder_size = 0.05  # Maximum diameter of the cylinder

        # Add cylinders to the environment
        for i in range(n_cylinders):
            # Randomly choose a color for the cylinder
            color_name = np.random.choice(['blue', 'red', 'green', 'orange', 'yellow', 'purple', 'pink', 'cyan'])
            color_rgb = utils.COLORS[color_name]

            # Randomly choose a size for the cylinder
            diameter = np.random.uniform(min_cylinder_size, max_cylinder_size)
            height = np.random.uniform(0.1, 0.2)  # Random height between 0.1 and 0.2 meters
            size = (diameter, diameter, height)

            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, size)

            # Fill the cylinder URDF template with the chosen size and color
            replace = {'SIZE': size, 'COLOR': color_rgb}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

            # Define the target pose for the cylinder on the stand
            # The target pose is on top of the stand with the same x, y coordinates and z is the stand height plus half the cylinder height
            target_pose = (stand_pose[0], (0, 0, stand_size[2] + height / 2))

            # Define the language goal
            language_goal = self.lang_template.format(color=color_name)

            # Add the goal for placing the cylinder
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / n_cylinders,
                          language_goal=language_goal)

        # Set the description for the task completion
        self.lang_goals = [self.task_completed_desc]