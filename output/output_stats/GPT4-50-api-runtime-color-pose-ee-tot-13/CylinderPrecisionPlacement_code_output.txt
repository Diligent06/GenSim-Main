import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderPrecisionPlacement(Task):
    """
    Strategically place three cylinders of varying sizes into corresponding narrow containers,
    ensuring that each cylinder stands upright without toppling over.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 goals, so max_steps is twice the number of goals
        self.lang_template = "place the {color} cylinder in the corresponding container"
        self.task_completed_desc = "done placing all cylinders."
        self.ee = Suction  # Using Suction since we need to move objects on the Z axis
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and containers
        n_objects = 3

        # Define cylinder sizes (diameter, height)
        cylinder_sizes = [
            (0.04, 0.1),  # Small cylinder
            (0.06, 0.12),  # Medium cylinder
            (0.08, 0.14)   # Large cylinder
        ]

        # Define container sizes (length, width, height)
        container_sizes = [
            (0.05, 0.05, 0.12),  # Small container
            (0.07, 0.07, 0.14),  # Medium container
            (0.09, 0.09, 0.16)   # Large container
        ]

        # Cylinder colors
        cylinder_colors = ['red', 'green', 'blue']

        # Add cylinders and containers to the environment
        cylinders = []
        container_poses = []
        for i in range(n_objects):
            # Add cylinder
            cylinder_template = 'cylinder/cylinder-template.urdf'
            cylinder_size = cylinder_sizes[i]
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_color = utils.COLORS[cylinder_colors[i]]
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose, 'rigid', color=cylinder_color)
            cylinders.append(cylinder_id)

            # Add container
            container_template = 'container/container-template.urdf'
            container_size = container_sizes[i]
            container_pose = self.get_random_pose(env, container_size)
            replace = {'SIZE': container_size}
            container_urdf = self.fill_template(container_template, replace)
            env.add_object(container_urdf, container_pose, 'fixed')
            container_poses.append(container_pose)

            # Define the language goal
            language_goal = self.lang_template.format(color=cylinder_colors[i])

            # Add goal for placing the cylinder in the container
            self.add_goal(objs=[cylinder_id],
                          matches=np.int32([[1]]),
                          targ_poses=[container_pose],
                          replace=False,
                          rotations=False,  # Cylinders should be upright, so no rotation needed
                          metric='pose',
                          params=None,
                          step_max_reward=1 / n_objects,  # Equal reward for each cylinder placement
                          language_goal=language_goal)

        # Set the primitive to use for the task
        self.primitive = primitives.pick_place