import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlOnPalletPrecision(Task):
    """Precisely place a specific number of differently colored bowls onto designated colored zones on a pallet."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have up to 5 bowls to place, 2 steps per bowl
        self.lang_template = "place the {color} bowl on the {target_color} zone on the pallet"
        self.task_completed_desc = "done placing all bowls precisely."
        self.ee = Suction  # Use suction end-effector to pick and place bowls

    def reset(self, env):
        super().reset(env)

        # Define the number of bowls and zones
        n_bowls = np.random.randint(1, 6)  # Randomly choose between 1 to 5 bowls
        n_zones = n_bowls  # Same number of zones as bowls

        # Define bowl properties
        bowl_size = (0.12, 0.12, 0.06)  # Size of the bowl
        bowl_urdf = 'bowl/bowl.urdf'  # URDF file for the bowl

        # Define pallet properties
        pallet_size = (0.3, 0.3, 0.02)  # Size of the pallet
        pallet_urdf = 'pallet/pallet.urdf'  # URDF file for the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)  # Random pose for the pallet
        env.add_object(pallet_urdf, pallet_pose, 'fixed')  # Add pallet to the environment

        # Add zones to the pallet
        zone_urdf = 'zone/zone.urdf'  # URDF file for the zone
        zone_size = (0.1, 0.1, 0)  # Size of the zone
        zone_colors = ['red', 'green', 'blue', 'yellow', 'purple']  # Possible zone colors
        zone_poses = []  # List to store the poses of the zones

        for i in range(n_zones):
            # Get a random pose on the pallet for the zone
            zone_pose = self.get_random_pose(env, zone_size)
            zone_color_name = zone_colors[i % len(zone_colors)]  # Cycle through the list of colors
            zone_color = utils.COLORS[zone_color_name]  # Get the RGB values for the color
            env.add_object(zone_urdf, zone_pose, 'fixed', color=zone_color)  # Add zone to the environment
            zone_poses.append((zone_pose, zone_color_name))  # Store the pose and color name

        # Add bowls to the environment
        bowl_colors = ['orange', 'indigo', 'violet', 'silver', 'gold']  # Possible bowl colors
        for i in range(n_bowls):
            # Get a random pose for the bowl
            bowl_pose = self.get_random_pose(env, bowl_size)
            bowl_color_name = bowl_colors[i % len(bowl_colors)]  # Cycle through the list of colors
            bowl_color = utils.COLORS[bowl_color_name]  # Get the RGB values for the color
            bowl_id = env.add_object(bowl_urdf, bowl_pose, color=bowl_color)  # Add bowl to the environment

            # Define the language goal
            language_goal = self.lang_template.format(color=bowl_color_name, target_color=zone_poses[i][1])

            # Add goal for placing the bowl on the correct zone
            self.add_goal(objs=[bowl_id],
                          matches=np.int32([[1]]),
                          targ_poses=[zone_poses[i][0]],
                          replace=False,
                          rotations=True,
                          metric='pose',
                          params=None,
                          step_max_reward=1 / n_bowls,
                          language_goal=language_goal)

        # Set the primitive for the task
        self.primitive = primitives.push  # Although we're placing bowls, we use push primitive with suction EE