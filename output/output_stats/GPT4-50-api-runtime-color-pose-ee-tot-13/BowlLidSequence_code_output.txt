import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlLidSequence(Task):
    """Arrange a set of bowls in a row and precisely place inverted boxes of corresponding sizes on top as lids, from smallest to largest."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we have 5 bowls and lids, 2 steps for each (pick and place)
        self.lang_template = "put the {color} lid on the {color} bowl"
        self.task_completed_desc = "done arranging bowls with lids."
        self.ee = Suction  # Using Suction end-effector to pick and place lids

    def reset(self, env):
        super().reset(env)

        # Number of bowls and lids
        n_objects = 5

        # Define bowl and lid sizes (diameter and height)
        bowl_sizes = [(0.08 + i * 0.02, 0.04) for i in range(n_objects)]  # Increment bowl size
        lid_sizes = [(size[0] - 0.01, size[1] / 2) for size in bowl_sizes]  # Lids slightly smaller than bowls

        # Define colors for bowls and lids
        colors = ['red', 'orange', 'yellow', 'green', 'blue']
        color_rgb = [utils.COLORS[color] for color in colors]

        # Add bowls to the environment
        bowl_urdf = 'bowl/bowl.urdf'
        bowls = []
        for i in range(n_objects):
            bowl_pose = self.get_random_pose(env, bowl_sizes[i])
            bowl_id = env.add_object(bowl_urdf, bowl_pose, 'fixed', color=color_rgb[i])
            bowls.append((bowl_id, bowl_pose))

        # Add lids to the environment using a template URDF for boxes
        lid_template = 'box/box-template.urdf'
        lids = []
        for i in range(n_objects):
            lid_size = lid_sizes[i]
            lid_pose = self.get_random_pose(env, lid_size)
            replace = {'DIM': lid_size, 'HALF': (lid_size[0] / 2, lid_size[1] / 2, lid_size[1] / 2)}
            lid_urdf = self.fill_template(lid_template, replace)
            lid_id = env.add_object(lid_urdf, lid_pose, 'rigid', color=color_rgb[i])
            lids.append((lid_id, lid_pose))

        # Define the goals for placing lids on bowls
        for i in range(n_objects):
            bowl_id, bowl_pose = bowls[i]
            lid_id, _ = lids[i]
            # Target pose is on top of the bowl, inverted (z is bowl height + lid height)
            target_pose = (bowl_pose[0], (0, 0, 0, 1))  # No rotation needed, keep upright
            language_goal = self.lang_template.format(color=colors[i])
            self.add_goal(objs=[lid_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=True,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_objects,
                          language_goal=language_goal)

        # Set the primitive to use for the task
        self.primitive = primitives.pick_place