import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BalanceBeamCylinders(Task):
    """
    Arrange a set of cylinders of varying sizes and colors across a narrow beam,
    ensuring they stay balanced and do not fall off.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Set to twice the number of expected goals
        self.lang_template = "place the {color} cylinder on the beam"
        self.task_completed_desc = "done balancing cylinders on the beam."
        self.ee = Suction  # Use Suction end-effector to move cylinders in Z axis
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders to balance
        n_cylinders = 5

        # Define the beam size and add the beam to the environment
        beam_size = (0.6, 0.02, 0.02)  # Length, width, height
        beam_pose = self.get_random_pose(env, beam_size)
        beam_template = 'line/single-green-line-template.urdf'
        replace = {'DIM': beam_size}
        beam_urdf = self.fill_template(beam_template, replace)
        env.add_object(beam_urdf, beam_pose, 'fixed')

        # Define cylinder size range
        min_cylinder_size = 0.02  # Minimum radius
        max_cylinder_size = 0.05  # Maximum radius
        cylinder_height = 0.1     # Fixed height for all cylinders

        # Add cylinders with varying sizes and colors
        cylinders = []
        for i in range(n_cylinders):
            # Randomize cylinder size
            cylinder_radius = np.random.uniform(min_cylinder_size, max_cylinder_size)
            cylinder_size = (cylinder_radius, cylinder_radius, cylinder_height)

            # Randomize cylinder color
            color_name = np.random.choice(list(utils.COLORS.keys()))
            color_rgb = utils.COLORS[color_name]

            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)

            # Create cylinder URDF using the template
            cylinder_template = 'cylinder/cylinder-template.urdf'
            replace = {'RADIUS': cylinder_radius, 'HEIGHT': cylinder_height / 2, 'COLOR': color_rgb}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Define the language goal
            language_goal = self.lang_template.format(color=color_name)

            # Add goal for placing the cylinder on the beam
            # Since the beam is narrow, precise placement is required, hence rotations=False
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[beam_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

        # Set the task description
        self.lang_goals = [self.lang_template.format(color=utils.COLOR_NAMES[np.random.choice(list(utils.COLORS.keys()))])
                           for _ in range(n_cylinders)]