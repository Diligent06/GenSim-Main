import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCoordinatedBoxAssembly(Task):
    """
    Pick up and insert three small colored cylinders into correspondingly colored boxes without lids,
    ensuring each cylinder fits snugly.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 goals, so max_steps is set to twice the number of goals
        self.lang_template = "put the {color} cylinder in the {color} box"
        self.task_completed_desc = "done inserting cylinders into boxes."
        self.ee = Suction  # Using Suction end-effector to pick and place cylinders

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders and boxes
        colors = ['red', 'green', 'blue']
        np.random.shuffle(colors)  # Shuffle colors to ensure randomness

        # Define the size of the cylinders and boxes
        cylinder_size = (0.04, 0.04, 0.08)  # (x, y, z) dimensions
        box_size = (0.1, 0.1, 0.05)  # (x, y, z) dimensions

        # Add cylinders and boxes to the environment
        for color in colors:
            # Add cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_urdf = self.fill_template('cylinder/cylinder-template.urdf', {'COLOR': utils.COLORS[color]})
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

            # Add box without a lid
            box_pose = self.get_random_pose(env, box_size)
            box_urdf = self.fill_template('box/box-template.urdf', {'COLOR': utils.COLORS[color]})
            env.add_object(box_urdf, box_pose, 'fixed')

            # Define the language goal
            language_goal = self.lang_template.format(color=color)

            # Add goal for the cylinder to be in the box
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[box_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/3,
                          language_goal=language_goal)

        # Set the primitive for the task
        self.primitive = primitives.pick_place

# Instantiate the task
task = ColorCoordinatedBoxAssembly()