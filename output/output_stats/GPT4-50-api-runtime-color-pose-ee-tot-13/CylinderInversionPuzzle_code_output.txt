import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderInversionPuzzle(Task):
    """
    Invert a cylinder's position by picking it up from a stand and placing it
    upside down back on the same stand without knocking it over.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 2  # We have one main goal, but inversion requires two steps (pick and place)
        self.lang_template = "pick up the cylinder and place it upside down on the stand"
        self.task_completed_desc = "done inverting the cylinder."
        self.ee = Suction  # Suction is needed to lift the cylinder on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the size of the stand and the cylinder
        stand_size = (0.05, 0.05, 0.02)  # x, y, z dimensions
        cylinder_size = (0.04, 0.04, 0.08)  # x, y, z dimensions

        # Add the stand to the environment
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Define the cylinder template and replace its size and color
        cylinder_template = 'cylinder/cylinder-template.urdf'
        replace = {
            'SIZE': cylinder_size,
            'COLOR': utils.COLORS['blue'],  # Set the cylinder color to blue
        }
        # Fill the cylinder URDF template with size and color
        cylinder_urdf = self.fill_template(cylinder_template, replace)

        # Add the cylinder to the environment
        cylinder_pose = self.get_random_pose(env, cylinder_size)
        cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

        # Define the target pose for the cylinder, which is the same location but inverted
        # We invert the cylinder by rotating it 180 degrees around the x-axis
        target_pose = (
            stand_pose[0],  # Same position as the stand
            p.getQuaternionFromEuler([np.pi, 0, 0])  # 180 degree rotation around the x-axis
        )

        # Add the goal for the task
        self.add_goal(
            objs=[cylinder_id],  # The object to manipulate
            matches=np.int32([[1]]),  # One-to-one correspondence with the target
            targ_poses=[target_pose],  # The target pose for the cylinder
            replace=False,  # The object should not be replaced by another
            rotations=True,  # Rotation is considered in the goal
            metric='pose',  # The metric to evaluate the goal is the pose
            params=None,  # No additional parameters
            step_max_reward=1,  # Maximum reward for completing this step
            language_goal=self.lang_template  # Language instruction for the task
        )