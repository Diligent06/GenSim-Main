import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderHeightSorting(Task):
    """Arrange a set of cylinders by height, placing them into increasingly taller stands, from shortest to tallest."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have 5 cylinders and 5 stands, so 2x5 steps
        self.lang_template = "place the {color} cylinder on the {height} stand"
        self.task_completed_desc = "done sorting cylinders by height."
        self.ee = Suction  # We need to move objects on the Z axis, so we use Suction
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and stands
        n_cylinders = 5
        n_stands = 5

        # Define cylinder template and colors
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_colors = ['red', 'green', 'blue', 'yellow', 'purple']

        # Define the size of the stands and cylinders
        stand_size = (0.05, 0.05, 0.02)  # (x, y, z) dimensions
        cylinder_size = (0.04, 0.04, 0.02)  # (x, y, z) dimensions, height will vary

        # Add stands with increasing height
        stands = []
        for i in range(n_stands):
            # Increment the z dimension for each stand to make them taller
            size = (stand_size[0], stand_size[1], stand_size[2] + i * 0.01)
            pose = self.get_random_pose(env, size)
            stand_urdf = 'stacking/stand.urdf'
            stand_id = env.add_object(stand_urdf, pose, 'fixed')
            stands.append((stand_id, pose, size))

        # Add cylinders with random heights
        cylinders = []
        for i in range(n_cylinders):
            # Randomize the height of the cylinder
            height = np.random.uniform(0.05, 0.15)
            size = (cylinder_size[0], cylinder_size[1], height)
            pose = self.get_random_pose(env, size)
            color_name = cylinder_colors[i]
            color = utils.COLORS[color_name]
            replace = {'SIZE': size, 'COLOR': color}
            # Replace the template URDF with the correct size and color
            urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append((cylinder_id, pose, size, color_name))

        # Sort cylinders by height
        sorted_cylinders = sorted(cylinders, key=lambda x: x[2][2])  # Sort by z dimension (height)

        # Assign goals to place cylinders on stands by increasing height
        for i, (cylinder_id, _, _, color_name) in enumerate(sorted_cylinders):
            # Target pose is the pose of the corresponding stand
            _, stand_pose, _ = stands[i]
            language_goal = self.lang_template.format(color=color_name, height=f"{i+1}")
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[stand_pose], replace=True,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

        # The task is set up with cylinders and stands, and goals are defined for sorting.