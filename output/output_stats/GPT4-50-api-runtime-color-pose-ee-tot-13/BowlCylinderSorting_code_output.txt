import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlCylinderSorting(Task):
    """
    Sort a set of five differently colored cylinders into corresponding colored bowls
    without knocking the bowls over.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to sort 5 cylinders, so 10 steps should be sufficient.
        self.lang_template = "put the {color} cylinder in the {color} bowl"
        self.task_completed_desc = "done sorting cylinders into bowls."
        self.ee = Suction  # Use suction end-effector to pick and place cylinders.

    def reset(self, env):
        super().reset(env)

        # Define the colors available for the cylinders and bowls.
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [f"{color} cylinder" for color in colors]

        # Add bowls to the environment.
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_size = (0.12, 0.12, 0.06)  # Size of the bowl (x, y, z).
        bowl_poses = []
        for color in colors:
            bowl_pose = self.get_random_pose(env, bowl_size)
            bowl_color = utils.COLORS[color]  # Get the RGB values for the bowl color.
            env.add_object(bowl_urdf, bowl_pose, color=bowl_color, category='fixed')
            bowl_poses.append(bowl_pose)

        # Add cylinders to the environment.
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.05, 0.05, 0.15)  # Size of the cylinder (x, y, z).
        cylinders = []
        for i, color in enumerate(colors):
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_color = utils.COLORS[color]  # Get the RGB values for the cylinder color.
            replace = {'COLOR': cylinder_color}
            # Replace the color placeholder in the URDF template.
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Define the language goal for sorting each cylinder.
            language_goal = self.lang_template.format(color=color)

            # Add a goal for each cylinder to be sorted into the matching bowl.
            # Since we want the cylinder to be placed inside the bowl, we use the bowl's pose as the target.
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[bowl_poses[i]],
                          replace=False, rotations=False, metric='pose', params=None,
                          step_max_reward=1 / len(cylinders), language_goal=language_goal)

        # Set the primitive action to be used for this task.
        self.primitive = primitives.push