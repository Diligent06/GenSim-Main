import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderStackChallenge(Task):
    """Stack a specific number of colored cylinders on top of each other in ascending order of size on a designated zone."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have 5 cylinders to stack, 2 steps per cylinder
        self.lang_template = "stack the {color} cylinder on top"
        self.task_completed_desc = "done stacking cylinders."
        self.ee = Suction  # Suction is needed to lift cylinders in Z-axis
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders to stack
        n_cylinders = 5

        # Define the zone size and add the zone to the environment
        zone_size = (0.1, 0.1, 0)  # Zone has no height as it's a 2D area on the table
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Define cylinder sizes in ascending order
        cylinder_sizes = [(0.02 + 0.01 * i, 0.02 + 0.01 * i, 0.05) for i in range(n_cylinders)]

        # Define colors for the cylinders
        colors = ['red', 'orange', 'yellow', 'green', 'blue']

        # Add cylinders to the environment
        cylinders = []
        for i in range(n_cylinders):
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_sizes[i])
            color = utils.COLORS[colors[i]]  # Get the RGB values for the color

            # Fill the cylinder template with size and color
            cylinder_template = 'cylinder/cylinder-template.urdf'
            replace = {'SIZE': cylinder_sizes[i], 'COLOR': color}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder object to the environment
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append(cylinder_id)

        # Add goals for stacking cylinders in ascending order of size
        for i in range(n_cylinders):
            # The target pose for each cylinder is on top of the previous one, starting from the zone
            if i == 0:
                targ_pose = zone_pose  # The first cylinder goes on the zone
            else:
                # Subsequent cylinders are stacked on top of the previous one
                # We only need to change the z-coordinate by adding the height of the previous cylinder
                prev_size = cylinder_sizes[i - 1]
                targ_pose = (targ_pose[0], (targ_pose[1][0], targ_pose[1][1], targ_pose[1][2] + prev_size[2]))

            # Define the language goal for this step
            language_goal = self.lang_template.format(color=colors[i])

            # Add the goal for the current cylinder
            self.add_goal(objs=[cylinders[i]], matches=np.ones((1, 1)), targ_poses=[targ_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / n_cylinders,
                          language_goal=language_goal)