import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlCylinderStacking(Task):
    """
    Stack a specified number of colored cylinders inside a bowl without the structure collapsing.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will call self.add_goal 5 times, so max_steps is twice that number
        self.lang_template = "stack {num} {color} cylinders in the {bowl_color} bowl"
        self.task_completed_desc = "done stacking cylinders."
        self.ee = Suction  # Suction is needed to lift cylinders on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders to stack and their size
        n_cylinders = np.random.randint(1, 4)  # Random number of cylinders between 1 and 3
        cylinder_size = (0.05, 0.05, 0.1)  # Diameter and height for the cylinder

        # Define the bowl size and add the bowl to the environment
        bowl_size = (0.15, 0.15, 0.06)  # Diameter and height for the bowl
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_pose = self.get_random_pose(env, bowl_size)
        bowl_color = 'brown'  # Set the bowl color
        env.add_object(bowl_urdf, bowl_pose, 'fixed', color=utils.COLORS[bowl_color])

        # Add cylinders to the environment
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for _ in range(n_cylinders):
            # Get a random color for the cylinder
            color_name = np.random.choice(['red', 'green', 'blue', 'yellow', 'purple', 'orange'])
            color_rgb = utils.COLORS[color_name]

            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)

            # IMPORTANT: REPLACE THE TEMPLATE URDF
            replace = {'COLOR': color_rgb}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

        # Define the target pose for the cylinders to be stacked in the bowl
        # The target pose is the same as the bowl's pose but with a different z-coordinate
        # to account for the height of the stacked cylinders
        targ_poses = [(bowl_pose[0], bowl_pose[1])]  # Use the bowl's pose for all cylinders

        # Add goal for each cylinder
        for i, cylinder_id in enumerate(cylinders):
            # Define the language goal for stacking the cylinders
            language_goal = self.lang_template.format(num=n_cylinders, color=color_name, bowl_color=bowl_color)

            # Add the goal for the current cylinder
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=targ_poses,
                          replace=False, rotations=True, metric='pose', params=None,
                          step_max_reward=1/n_cylinders, language_goal=language_goal)

            # Update the target pose z-coordinate for the next cylinder
            targ_poses[0][0][2] += cylinder_size[2]  # Stack the next cylinder on top of the previous one

# Instantiate the task
task = BowlCylinderStacking()