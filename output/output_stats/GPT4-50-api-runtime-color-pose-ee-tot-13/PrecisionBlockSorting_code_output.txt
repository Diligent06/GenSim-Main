import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionBlockSorting(Task):
    """
    Pick up colored blocks and sort them into corresponding colored zones marked on the tabletop,
    ensuring each block is precisely aligned within its zone.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to call self.add_goal twice, so we set max_steps to twice that number
        self.lang_template = "put the {color} block in the {color} zone"
        self.task_completed_desc = "done sorting blocks."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the number of blocks and zones
        n_blocks = 2
        n_zones = 2

        # Define block and zone sizes
        block_size = (0.04, 0.04, 0.04)  # x, y, z dimensions for the block
        zone_size = (0.12, 0.12, 0)  # x, y, z dimensions for the zone

        # Define colors for blocks and zones
        block_colors = ['red', 'green']
        zone_colors = ['red', 'green']

        # Add colored zones to the environment
        zone_poses = []
        for i in range(n_zones):
            zone_pose = self.get_random_pose(env, zone_size)
            zone_urdf = 'zone/zone.urdf'
            env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[zone_colors[i]])
            zone_poses.append(zone_pose)

        # Add colored blocks to the environment
        blocks = []
        block_urdf = 'stacking/block.urdf'
        for i in range(n_blocks):
            block_pose = self.get_random_pose(env, block_size)
            block_color = utils.COLORS[block_colors[i]]
            block_id = env.add_object(block_urdf, block_pose, color=block_color)
            blocks.append(block_id)

            # Add goal for each block to be placed in the corresponding colored zone
            language_goal = self.lang_template.format(color=block_colors[i])
            self.add_goal(objs=[block_id],
                          matches=np.int32([[1]]),
                          targ_poses=[zone_poses[i]],  # Target pose is the pose of the corresponding zone
                          replace=False,
                          rotations=False,  # Rotation is not necessary for this task
                          metric='pose',  # We use pose metric since we need precise alignment
                          params=None,
                          step_max_reward=1,  # Since we have only one goal per block, the max reward is 1
                          language_goal=language_goal)

        # The task is set up with two blocks and two corresponding zones, each with a matching color.
        # The agent must pick up each block and place it precisely in its corresponding zone.