import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class GradientCylinderStack(Task):
    """Stack five cylinders of varying shades from darkest to lightest atop the center of a stand, without toppling the structure."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to stack 5 cylinders, so max_steps is twice the number of add_goal calls
        self.ee = Suction  # Use Suction end-effector to lift cylinders on the Z axis
        self.lang_template = "stack the {color} cylinder on the {location} of the stand"
        self.task_completed_desc = "done stacking gradient cylinders."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the shades of gray from darkest to lightest
        shades = ['black', 'gray', 'silver', 'white', 'gold']

        # Add the stand in the center of the workspace
        stand_size = (0.05, 0.05, 0.005)  # Size of the stand
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Initialize list to hold cylinder objects
        cylinders = []

        # Add cylinders with varying shades on top of each other
        for i, shade in enumerate(shades):
            # Define cylinder size and URDF template
            cylinder_size = (0.04, 0.04, 0.08)  # Diameter and height of the cylinder
            cylinder_template = 'cylinder/cylinder-template.urdf'

            # Generate a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)

            # Define the color of the cylinder using the shade
            color = utils.COLORS[shade]

            # Fill the URDF template with the cylinder properties
            replace = {'COLOR': color, 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

        # Define the target pose for the cylinders on the stand
        # The cylinders should be stacked at the center of the stand
        z_offset = 0.04  # Half the height of the cylinder to place it on the stand surface
        target_poses = []
        for i in range(len(shades)):
            # Increment z_offset for each cylinder stacked
            target_pose = (stand_pose[0], (0, 0, stand_pose[0][2] + z_offset + i * cylinder_size[2]))
            target_poses.append(target_pose)

        # Add goals for each cylinder to be stacked in order of shades
        for i, cylinder_id in enumerate(cylinders):
            # Define the language goal for the current cylinder
            language_goal = self.lang_template.format(color=shades[i], location="center")
            # Add the goal for the current cylinder
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_poses[i]],
                          replace=False, rotations=False, metric='pose', params=None,
                          step_max_reward=1 / len(cylinders), language_goal=language_goal)

# Note: The task assumes that the cylinders are to be stacked in the order they are added to the environment,
# which is from darkest to lightest. The target poses are calculated based on the stand's position and the
# height of the cylinders. The Suction end-effector is used to pick and place the cylinders vertically.