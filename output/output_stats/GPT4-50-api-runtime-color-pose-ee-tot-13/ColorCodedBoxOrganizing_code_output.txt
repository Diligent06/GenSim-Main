import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedBoxOrganizing(Task):
    """
    Sort and align a set of three different colored boxes into their matching colored zones on the tabletop,
    ensuring each box is precisely positioned within its outline.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have three boxes to place, so set max_steps to twice the number of boxes
        self.lang_template = "place the {color} box in the matching {color} zone"
        self.task_completed_desc = "done organizing the colored boxes."
        self.ee = Suction  # Use Suction end-effector to move boxes on the Z axis
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the colors for the boxes and zones
        box_colors = ['red', 'green', 'blue']
        np.random.shuffle(box_colors)  # Shuffle to randomize the order of the boxes

        # Define the size of the boxes
        box_size = (0.05, 0.05, 0.05)  # All boxes are of the same size

        # Add zones with matching colors to the boxes
        zone_size = (0.06, 0.06, 0)  # Slightly larger than the boxes to fit them inside
        zones = []
        for color in box_colors:
            zone_pose = self.get_random_pose(env, zone_size)
            zone_urdf = 'zone/zone.urdf'
            env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[color])
            zones.append((zone_pose, color))

        # Add boxes
        boxes = []
        for color in box_colors:
            box_pose = self.get_random_pose(env, box_size)
            box_template = 'box/box-template.urdf'
            replace = {'SIZE': box_size, 'HALF': np.array(box_size) / 2, 'COLOR': utils.COLORS[color]}
            box_urdf = self.fill_template(box_template, replace)
            box_id = env.add_object(box_urdf, box_pose)
            boxes.append((box_id, color))

        # Add goals for each box to be placed in the matching color zone
        for box, box_color in boxes:
            # Find the matching zone for the current box color
            zone_pose, _ = next(zone for zone in zones if zone[1] == box_color)
            language_goal = self.lang_template.format(color=box_color)
            self.add_goal(objs=[box], matches=np.ones((1, 1)), targ_poses=[zone_pose], replace=True,
                          rotations=False, metric='pose', params=None, step_max_reward=1/3,
                          language_goal=language_goal)

# Instantiate the task
task = ColorCodedBoxOrganizing()