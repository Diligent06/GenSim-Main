import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BallTransferChallenge(Task):
    """Pick up a series of colored balls and transfer them into bowls of corresponding color without dropping them outside the target zones."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have 5 balls and 5 bowls, so 2 steps per ball
        self.lang_template = "put the {color} ball in the {color} bowl"
        self.task_completed_desc = "done transferring the balls."
        self.ee = Suction  # Using Suction end-effector to pick up balls

    def reset(self, env):
        super().reset(env)

        # Define the number of balls and bowls
        n_balls = 5
        n_bowls = 5

        # Define the size of the balls and bowls
        ball_size = (0.04, 0.04, 0.04)  # Diameter of the ball
        bowl_size = (0.12, 0.12, 0.06)  # Dimensions of the bowl

        # Define the colors for the balls and bowls
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_rgb = [utils.COLORS[color] for color in colors]

        # Add bowls to the environment
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_poses = []
        for i in range(n_bowls):
            bowl_pose = self.get_random_pose(env, bowl_size)
            env.add_object(bowl_urdf, bowl_pose, 'fixed', color=color_rgb[i])
            bowl_poses.append(bowl_pose)

        # Add balls to the environment
        ball_template = 'ball/ball-template.urdf'
        balls = []
        for i in range(n_balls):
            ball_pose = self.get_random_pose(env, ball_size)
            replace = {'COLOR': color_rgb[i]}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append(ball_id)

            # Define the language goal for each ball
            language_goal = self.lang_template.format(color=colors[i])

            # Add goal for each ball to be placed in the corresponding bowl
            self.add_goal(objs=[ball_id], matches=np.int32([[1]]), targ_poses=[bowl_poses[i]], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_balls,
                          language_goal=language_goal)

        # Add zones for the bowls to indicate the target area
        zone_urdf = 'zone/zone.urdf'
        for bowl_pose in bowl_poses:
            # The zone is slightly larger than the bowl to provide some tolerance
            zone_size = (bowl_size[0] + 0.02, bowl_size[1] + 0.02, 0)
            zone_pose = (bowl_pose[0], bowl_pose[1])  # Same x, y as the bowl, z is 0 (on the table)
            env.add_object(zone_urdf, zone_pose, 'fixed')