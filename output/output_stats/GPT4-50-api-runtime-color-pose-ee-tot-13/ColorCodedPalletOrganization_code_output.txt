import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedPalletOrganization(Task):
    """
    Arrange differently colored cylinders on specific locations of a pallet indicated by matching colored strips.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have 5 goals, so max_steps is twice the number of goals
        self.lang_template = "place the {color} cylinder on the {color} strip on the pallet"
        self.task_completed_desc = "done organizing the pallet."
        self.ee = Suction  # Using Suction since we need to move cylinders on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and their colors
        n_cylinders = 5
        cylinder_colors = ['red', 'blue', 'green', 'orange', 'yellow']

        # Add pallet to the environment
        pallet_size = (0.3, 0.3, 0.02)  # Size of the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Add colored strips to the pallet for cylinder placement
        strip_length = 0.1
        strip_width = 0.02
        strip_height = 0.001
        strip_urdf_template = 'line/single-green-line-template.urdf'
        strip_poses = []

        for i, color in enumerate(cylinder_colors):
            # Calculate strip pose based on pallet pose and index
            strip_x = pallet_pose[0][0] + (i - n_cylinders // 2) * strip_length
            strip_y = pallet_pose[0][1]
            strip_z = pallet_pose[0][2] + pallet_size[2] / 2 + strip_height / 2
            strip_pose = ((strip_x, strip_y, strip_z), pallet_pose[1])

            # Replace color in URDF template
            replace = {'COLOR': utils.COLORS[color]}
            strip_urdf = self.fill_template(strip_urdf_template, replace)

            # Add strip to the environment
            env.add_object(strip_urdf, strip_pose, 'fixed')
            strip_poses.append(strip_pose)

        # Add cylinders to the environment
        cylinder_size = (0.02, 0.02, 0.1)  # Size of the cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []

        for i, color in enumerate(cylinder_colors):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)

            # Replace color and size in URDF template
            replace = {
                'COLOR': utils.COLORS[color],
                'SIZE': cylinder_size
            }
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Define the language goal
            language_goal = self.lang_template.format(color=color)

            # Add goal for placing the cylinder on the matching strip
            self.add_goal(
                objs=[cylinder_id],
                matches=np.int32([[1]]),
                targ_poses=[strip_poses[i]],
                replace=False,
                rotations=False,
                metric='pose',
                params=None,
                step_max_reward=1 / n_cylinders,
                language_goal=language_goal
            )

        # Set the primitive to be used for this task
        self.primitive = primitives.push