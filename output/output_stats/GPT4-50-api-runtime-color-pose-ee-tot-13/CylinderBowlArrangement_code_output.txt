import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderBowlArrangement(Task):
    """
    Arrange a set of five differently colored cylinders around a bowl without any of them touching the bowl.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to arrange 5 cylinders, so 10 steps should be sufficient.
        self.lang_template = "place the {color} cylinder around the bowl without touching it"
        self.task_completed_desc = "all cylinders arranged around the bowl."
        self.ee = Suction  # We use Suction since we need to lift cylinders along the Z axis.
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and the bowl size.
        n_cylinders = 5
        bowl_size = (0.18, 0.18, 0.06)  # (x, y, z) dimensions for the bowl.

        # Add the bowl to the environment.
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_pose = self.get_random_pose(env, bowl_size)
        env.add_object(bowl_urdf, bowl_pose, 'fixed')

        # Define cylinder size and template.
        cylinder_size = (0.05, 0.05, 0.15)  # (x, y, z) dimensions for the cylinders.
        cylinder_template = 'cylinder/cylinder-template.urdf'

        # Define available colors for the cylinders.
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [f"{color} cylinder" for color in colors]

        # Add cylinders to the environment.
        for i in range(n_cylinders):
            # Generate a random pose for the cylinder.
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Set the color for the cylinder.
            color_rgb = utils.COLORS[colors[i]]
            # Replace the template URDF with the specific color and size for the cylinder.
            replace = {'COLOR': color_rgb, 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder object to the environment.
            env.add_object(cylinder_urdf, cylinder_pose)

            # Define the language goal for placing this cylinder.
            language_goal = self.lang_template.format(color=color_names[i])

            # Add the goal for this cylinder.
            # We don't define a specific target pose, as the goal is to place it around the bowl.
            self.add_goal(objs=[cylinder_pose], matches=None, targ_poses=None, replace=False,
                          rotations=False, metric='zone', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

        # The task is to arrange the cylinders around the bowl, so we don't need to specify exact target poses.
        # Instead, we will rely on the reward function to check the arrangement around the bowl.