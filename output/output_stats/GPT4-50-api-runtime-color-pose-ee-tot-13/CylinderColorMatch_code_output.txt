import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderColorMatch(Task):
    """Sort a set of differently colored cylinders into matching colored bowls without toppling them over."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have 5 goals, so max_steps is twice the number of goals
        self.lang_template = "put the {color} cylinder in the {color} bowl"
        self.task_completed_desc = "done sorting cylinders into bowls."
        self.ee = Suction  # Using Suction since we need to move objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and bowls
        n_cylinders = 5
        n_bowls = 5

        # Define the size of the cylinders and bowls
        cylinder_size = (0.05, 0.05, 0.1)  # (radius, radius, height)
        bowl_size = (0.15, 0.15, 0.05)  # (radius, radius, height)

        # Define the URDF paths for the cylinder and bowl
        cylinder_urdf_template = 'cylinder/cylinder-template.urdf'
        bowl_urdf = 'bowl/bowl.urdf'

        # Create a list of colors to use for cylinders and bowls
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [f"{color} cylinder" for color in colors]

        # Add bowls to the environment with matching colors
        bowl_poses = []
        for i in range(n_bowls):
            color = utils.COLORS[colors[i]]
            bowl_pose = self.get_random_pose(env, bowl_size)
            env.add_object(bowl_urdf, bowl_pose, color=color, category='fixed')
            bowl_poses.append(bowl_pose)

        # Add cylinders to the environment with matching colors
        cylinders = []
        for i in range(n_cylinders):
            color = utils.COLORS[colors[i]]
            pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': color}
            # Replace the color placeholder in the URDF template
            cylinder_urdf = self.fill_template(cylinder_urdf_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append(cylinder_id)

            # Define the language goal for each cylinder
            language_goal = self.lang_template.format(color=colors[i])

            # Add goal for each cylinder to be placed in the matching colored bowl
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[bowl_poses[i]],
                          replace=False, rotations=False, metric='pose', params=None,
                          step_max_reward=1/n_cylinders, language_goal=language_goal)

        # The task is set up with cylinders and bowls added to the environment and goals defined