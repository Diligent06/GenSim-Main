import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderHoopSorting(Task):
    """
    Sort cylinders of different colors by passing them through matching colored hoops
    attached to the fixture, then placing them onto the pallet.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we have 5 cylinders to sort, 2 steps per cylinder
        self.lang_template = "pass the {color} cylinder through the {color} hoop and place it on the pallet"
        self.task_completed_desc = "done sorting all cylinders."
        self.ee = Suction  # Suction end-effector is needed to pick up cylinders

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders and hoops
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [f"{color} cylinder" for color in colors]

        # Add fixture with hoops
        fixture_size = (0.1, 0.1, 0.1)  # Size of the fixture
        fixture_pose = self.get_random_pose(env, fixture_size)
        fixture_urdf = 'insertion/fixture.urdf'
        env.add_object(fixture_urdf, fixture_pose, 'fixed')

        # Add pallet for placing cylinders after sorting
        pallet_size = (0.3, 0.3, 0.05)  # Size of the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)
        pallet_urdf = 'pallet/pallet.urdf'
        env.add_object(pallet_urdf, pallet_pose, 'fixed')

        # Add cylinders and define their target poses
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.05, 0.05, 0.1)  # Size of the cylinders
        for color in colors:
            # Generate a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)

            # Set the color for the cylinder
            cylinder_color = utils.COLORS[color]

            # Fill the cylinder URDF template with the color and size
            replace = {'COLOR': cylinder_color, 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

            # Define the target pose for the cylinder on the pallet
            # We use the same x, y coordinates as the pallet and a fixed z offset
            target_pose = (pallet_pose[0], (0, 0, 0, 1))  # No rotation needed for the cylinder

            # Define the language goal for the task
            language_goal = self.lang_template.format(color=color)

            # Add the goal for sorting the cylinder
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/len(colors),
                          language_goal=language_goal)

        # Set the primitive action to push for the task
        self.primitive = primitives.push