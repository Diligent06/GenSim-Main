import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderSortingAccuracy(Task):
    """Sort a set of five cylinders of different colors into five corresponding colored zones."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Set to twice the number of goals
        self.ee = Suction  # Use Suction end-effector to pick and place cylinders
        self.lang_template = "put the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done sorting cylinders."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders and zones
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [f"{color} cylinder" for color in colors]

        # Add zones with corresponding colors
        zone_size = (0.07, 0.07, 0)  # Size of the zone, cylinders should fit within this size
        zone_urdf = 'zone/zone.urdf'
        zone_poses = []
        for color in colors:
            zone_pose = self.get_random_pose(env, zone_size)
            env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[color])
            zone_poses.append(zone_pose)

        # Add cylinders with corresponding colors
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.05, 0.05, 0.1)  # Diameter and height of the cylinder
        cylinders = []
        for i, color in enumerate(colors):
            pose = self.get_random_pose(env, cylinder_size)
            replace = {'DIM': cylinder_size, 'COLOR': utils.COLORS[color]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append(cylinder_id)

            # Add a goal for each cylinder
            language_goal = self.lang_template.format(color=color)
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_poses[i]], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / len(colors),
                          language_goal=language_goal)

        # Set the task's progress and rewards
        self.goals[0]['progress'] = 0
        self.goals[0]['rewards'] = 0