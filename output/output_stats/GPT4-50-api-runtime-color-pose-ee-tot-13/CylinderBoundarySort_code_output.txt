import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderBoundarySort(Task):
    """Arrange differently sized and colored cylinders along a single green line,
    with each cylinder touching the line but not crossing over it."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have up to 5 cylinders to sort, 2 steps per cylinder
        self.lang_template = "place the {color} cylinder on the green line"
        self.task_completed_desc = "done sorting cylinders."
        self.ee = Suction  # Suction is needed to pick and place cylinders vertically
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Add a single green line to the environment
        line_size = (0.01, 0.5, 0.001)  # Thin and long line
        line_pose = self.get_random_pose(env, line_size)
        line_template = 'line/single-green-line-template.urdf'
        replace = {'DIM': line_size}
        line_urdf = self.fill_template(line_template, replace)
        env.add_object(line_urdf, line_pose, 'fixed')

        # Define the number of cylinders and their properties
        n_cylinders = np.random.randint(1, 6)  # Random number of cylinders between 1 and 5
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_sizes = [(np.random.uniform(0.02, 0.04), np.random.uniform(0.02, 0.04), np.random.uniform(0.1, 0.2))
                          for _ in range(n_cylinders)]  # Random sizes within given ranges

        # Define colors for the cylinders
        colors = [utils.COLORS[color] for color in np.random.choice(list(utils.COLORS.keys()), n_cylinders, replace=False)]

        # Add cylinders to the environment
        for i in range(n_cylinders):
            size = cylinder_sizes[i]
            color = colors[i]
            pose = self.get_random_pose(env, size)
            replace = {'DIM': size, 'COLOR': color}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, pose)

            # Define the language goal for placing each cylinder
            color_name = [name for name, clr in utils.COLORS.items() if clr == color][0]
            language_goal = self.lang_template.format(color=color_name)

            # Add goal for each cylinder to be placed on the line
            # The target pose is along the line with the same orientation as the line and the z-height of the cylinder
            target_pose = (line_pose[0], line_pose[1])
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

        # Set the primitive to be used for this task
        self.primitive = primitives.pick_place