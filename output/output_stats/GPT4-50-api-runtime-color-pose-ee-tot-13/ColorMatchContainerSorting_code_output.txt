import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorMatchContainerSorting(Task):
    """
    Sort a set of colored balls into containers with matching colored lines,
    ensuring each ball is deposited without spilling over the container edges.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we have 5 balls to sort, 2 steps per ball (pick & place)
        self.lang_template = "put the {color} ball in the {color} container"
        self.task_completed_desc = "done sorting all colored balls."
        self.ee = Suction  # Use Suction end-effector to pick up balls

    def reset(self, env):
        super().reset(env)

        # Define the number of balls and containers
        n_balls = 5
        n_containers = 5

        # Define ball size
        ball_size = (0.04, 0.04, 0.04)  # Diameter of the ball

        # Define container size
        container_size = (0.15, 0.15, 0.05)  # Length, Width, Height of the container

        # Define available colors
        colors = ['red', 'green', 'blue', 'yellow', 'purple']

        # Add containers with matching colored lines
        containers = []
        for i in range(n_containers):
            # Generate a random pose for the container
            container_pose = self.get_random_pose(env, container_size)
            # Create a container with a single line of the same color
            line_template = 'line/single-{color}-line-template.urdf'.format(color=colors[i])
            container_urdf = self.fill_template(line_template, {'DIM': container_size})
            container_id = env.add_object(container_urdf, container_pose, 'fixed')
            containers.append((container_id, container_pose))

        # Add balls
        balls = []
        for i in range(n_balls):
            # Generate a random pose for the ball
            ball_pose = self.get_random_pose(env, ball_size)
            # Create a ball of the corresponding color
            ball_urdf = self.fill_template('ball/ball-template.urdf', {'COLOR': utils.COLORS[colors[i]]})
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append((ball_id, ball_pose))

            # Define the language goal
            language_goal = self.lang_template.format(color=colors[i])

            # Add goal for each ball to be in the container with the matching colored line
            self.add_goal(objs=[ball_id],
                          matches=np.ones((1, 1)),  # Each ball has one matching container
                          targ_poses=[containers[i][1]],  # Target pose is the container pose
                          replace=False,  # Each ball has a unique container
                          rotations=False,  # Rotation is not considered for balls
                          metric='pose',  # Use pose metric for evaluation
                          params=None,  # No additional parameters needed
                          step_max_reward=1,  # Full reward for each correctly sorted ball
                          language_goal=language_goal)  # Language goal for instruction following