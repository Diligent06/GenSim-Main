import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionBallSorting(Task):
    """Sort a set of five colored balls into matching colored zones on a pallet."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to sort 5 balls, so 10 steps should be sufficient
        self.lang_template = "put the {color} ball in the {color} zone"
        self.task_completed_desc = "done sorting all the balls."
        self.ee = Suction  # Use suction end-effector to pick up the balls

    def reset(self, env):
        super().reset(env)

        # Define the colors for the balls and zones
        ball_colors = ['red', 'green', 'blue', 'yellow', 'purple']
        np.random.shuffle(ball_colors)  # Shuffle colors to ensure randomness

        # Add pallet
        pallet_size = (0.3, 0.3, 0.02)  # Define the size of the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)  # Get a random pose for the pallet
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')  # Add the pallet to the environment

        # Add zones and balls
        zone_size = (0.05, 0.05, 0)  # Define the size of the zones
        ball_size = (0.04, 0.04, 0.04)  # Define the size of the balls
        ball_template = 'ball/ball-template.urdf'  # Ball URDF template
        zone_urdf = 'zone/zone.urdf'  # Zone URDF

        for i, color in enumerate(ball_colors):
            # Add zone for the current color
            zone_pose = self.get_random_pose(env, zone_size)  # Get a random pose for the zone
            zone_color = utils.COLORS[color]  # Get the RGB value for the zone color
            env.add_object(zone_urdf, zone_pose, color=zone_color)  # Add the zone to the environment

            # Add ball for the current color
            ball_pose = self.get_random_pose(env, ball_size)  # Get a random pose for the ball
            ball_color = utils.COLORS[color]  # Get the RGB value for the ball color
            replace = {'COLOR': ball_color}  # Replacement dictionary for the ball color
            ball_urdf = self.fill_template(ball_template, replace)  # Fill the ball template with the color
            ball_id = env.add_object(ball_urdf, ball_pose)  # Add the ball to the environment

            # Define the language goal
            language_goal = self.lang_template.format(color=color)

            # Add goal for the current ball to be in the matching zone
            self.add_goal(objs=[ball_id], matches=np.int32([[1]]), targ_poses=[zone_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/5,
                          language_goal=language_goal)

        # Set the primitive for the task
        self.primitive = primitives.push  # We use push primitive to roll the balls into the zones