import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction  # Import Suction as we might need to move objects on the Z axis

class DummyTask(Task):
    """
    The DummyTask is a simple task where the robot needs to move a specified object
    to a target location. This task is designed to demonstrate the setup of a task
    using the Cliport framework.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 2  # We will have one goal, so max_steps is set to twice the number of goals
        self.lang_template = "move the {color} object to the target location"
        self.task_completed_desc = "done moving the object."
        self.ee = Suction  # Using Suction end-effector as we may need to lift the object

    def reset(self, env):
        super().reset(env)

        # Define the object's properties
        obj_size = (0.05, 0.05, 0.05)  # Size of the object (x, y, z)
        obj_color_name = 'blue'  # Color of the object
        obj_color = utils.COLORS[obj_color_name]  # Get the RGB values for the color

        # Add the object to the environment with a random pose
        obj_pose = self.get_random_pose(env, obj_size)
        obj_urdf = 'path/to/object/urdf'  # Replace with the actual URDF file path
        obj_id = env.add_object(obj_urdf, obj_pose, color=obj_color)

        # Define the target location properties
        # For simplicity, we'll use the same size as the object and place it on the ground (z=0)
        targ_size = obj_size
        targ_pose = self.get_random_pose(env, targ_size)
        targ_pose = (targ_pose[0], (0, 0, 0, 1))  # Target pose with no rotation

        # Add the target location to the environment (could be a visual marker or zone)
        # Here we assume a visual marker URDF is available
        targ_urdf = 'path/to/target/marker/urdf'  # Replace with the actual URDF file path
        env.add_object(targ_urdf, targ_pose, category='visual')

        # Define the language goal
        language_goal = self.lang_template.format(color=obj_color_name)

        # Add the goal for the task
        # Since we have only one goal, step_max_reward is set to 1
        self.add_goal(objs=[obj_id], matches=np.ones((1, 1)), targ_poses=[targ_pose],
                      replace=False, rotations=False, metric='pose', params=None,
                      step_max_reward=1, language_goal=language_goal)

        # Task description (optional, for human understanding)
        self.task_description = f"Move the {obj_color_name} object to the target location."