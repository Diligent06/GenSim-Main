import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderHeightOrdering(Task):
    """Arrange five cylinders of different heights in ascending order from left to right on a designated line."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Set to twice the number of goals
        self.ee = Suction  # Use Suction end-effector to move cylinders on the Z axis
        self.lang_template = "place the {color} cylinder in order from shortest to tallest on the line"
        self.task_completed_desc = "done ordering cylinders by height."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and their heights
        n_cylinders = 5
        heights = np.linspace(0.05, 0.15, n_cylinders)  # Heights from 0.05 to 0.15 meters
        np.random.shuffle(heights)  # Shuffle heights to randomize initial order

        # Add a single green line to the environment as the target zone
        line_size = (0.5, 0.01, 0.001)  # Size of the line
        line_pose = self.get_random_pose(env, line_size)  # Random pose for the line
        line_urdf = 'line/single-green-line-template.urdf'
        env.add_object(line_urdf, line_pose, 'fixed')

        # Initialize list to store cylinder IDs and target poses
        cylinders = []
        target_poses = []

        # Add cylinders to the environment
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i in range(n_cylinders):
            # Define the size and color of the cylinder
            size = (0.02, 0.02, heights[i])  # Diameter 0.02m, height varies
            color = utils.COLORS[np.random.choice(list(utils.COLORS.keys()))]  # Random color

            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, size)

            # IMPORTANT: REPLACE THE TEMPLATE URDF with `fill_template`
            replace = {'SIZE': size, 'COLOR': color}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment and store its ID
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append(cylinder_id)

            # Calculate the target pose for the cylinder on the line
            # X-coordinate is offset based on index, Y and Z match the line
            target_x = line_pose[0][0] - line_size[0] / 2 + line_size[0] * (i + 0.5) / n_cylinders
            target_pose = [(target_x, line_pose[0][1], line_pose[0][2]), (0, 0, 0, 1)]
            target_poses.append(target_pose)

        # Add goals for each cylinder
        for i, cylinder_id in enumerate(cylinders):
            # Language goal describes the action to be taken
            color_name = [name for name, color in utils.COLORS.items() if np.array_equal(color, replace['COLOR'])][0]
            language_goal = self.lang_template.format(color=color_name)

            # Add the goal with the target pose
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_poses[i]],
                          replace=False, rotations=False, metric='pose', params=None,
                          step_max_reward=1 / n_cylinders, language_goal=language_goal)

        # Shuffle the cylinders to ensure they start in a random order
        env.shuffle_objects(cylinders)