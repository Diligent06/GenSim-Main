import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderHeightSorting(Task):
    """Arrange five cylinders of varying heights in ascending order on a designated line marked on the tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to sort 5 cylinders, so 10 steps should be sufficient
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.lang_template = "sort the cylinders by height on the green line"
        self.task_completed_desc = "done sorting cylinders by height."

    def reset(self, env):
        super().reset(env)

        # Add a green line to the environment as the target zone for sorted cylinders
        line_size = (0.15, 0.01, 0.001)  # Size of the line
        line_pose = self.get_random_pose(env, line_size)  # Random pose for the line
        line_urdf = 'line/single-green-line-template.urdf'
        env.add_object(line_urdf, line_pose, 'fixed')

        # Add five cylinders with varying heights
        n_cylinders = 5
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        heights = np.linspace(0.05, 0.15, n_cylinders)  # Heights ranging from 0.05 to 0.15
        np.random.shuffle(heights)  # Shuffle the heights to randomize initial placement

        for i in range(n_cylinders):
            # Define the size and pose of the cylinder
            size = (0.02, 0.02, heights[i])  # Diameter is constant, height varies
            pose = self.get_random_pose(env, size)
            color = utils.COLORS['silver']  # Assign a silver color to all cylinders

            # Fill in the template URDF with the specific size and color for this cylinder
            replace = {'SIZE': size, 'COLOR': color}
            urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append((cylinder_id, pose, size[2]))  # Store the cylinder ID and its height

        # Sort the cylinders by their heights to determine the target order
        cylinders.sort(key=lambda x: x[2])

        # Define the target poses for the sorted cylinders along the green line
        line_x, line_y, _ = line_pose[0]
        for i, (cylinder_id, _, _) in enumerate(cylinders):
            # Calculate the target position for each cylinder along the line
            target_x = line_x - line_size[0] / 2 + (i + 0.5) * (line_size[0] / n_cylinders)
            target_pose = [(target_x, line_y, 0.01), (0, 0, 0, 1)]  # No rotation needed, quaternions set to identity

            # Add a goal for each cylinder to be placed in the correct order
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=True,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=self.lang_template.format())

# Instantiate the task
task = CylinderHeightSorting()