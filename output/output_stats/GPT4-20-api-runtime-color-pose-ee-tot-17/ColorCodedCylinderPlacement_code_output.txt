import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedCylinderPlacement(Task):
    """
    Place colored cylinders onto the corresponding colored zones marked on a table surface.
    Each cylinder must be placed onto a zone of the same color.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to place two cylinders, so we set max_steps to twice that number
        self.lang_template = "place the {color} cylinder onto the {color} zone"
        self.task_completed_desc = "done placing the cylinders."
        self.ee = Suction  # We use Suction since we need to lift objects along the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the colors and number of cylinders
        colors = ['red', 'green', 'blue']
        n_cylinders = len(colors)

        # Add colored zones
        zone_size = (0.07, 0.07, 0)  # Zones are flat squares on the table
        zone_urdf = 'zone/zone.urdf'
        zone_poses = []
        for color in colors:
            zone_pose = self.get_random_pose(env, zone_size)
            env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[color])
            zone_poses.append(zone_pose)

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.05, 0.05, 0.1)  # Diameter and height for the cylinder
        cylinders = []
        for color in colors:
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Fill in the URDF template with the cylinder's properties
            replace = {'SIZE': cylinder_size, 'COLOR': utils.COLORS[color]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

        # Define the goals
        for i, color in enumerate(colors):
            # Language goal for placing the cylinder
            language_goal = self.lang_template.format(color=color)
            # Add the goal for the cylinder to be placed in the zone of the same color
            self.add_goal(objs=[cylinders[i]], matches=np.int32([[1]]),
                          targ_poses=[zone_poses[i]], replace=True,
                          rotations=False, metric='pose', params=None,
                          step_max_reward=1/n_cylinders, language_goal=language_goal)

        # Note: We set replace=True for the goals since a cylinder can only match with one zone
        # and we do not need to consider rotations since the cylinders are symmetrical along the Z axis.