import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedBallSorting(Task):
    """Sort balls into designated zones on a tabletop, each marked with a specific color corresponding to the ball's color."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we have 5 balls to sort, 2 steps per ball (pick & place)
        self.lang_template = "put the {color} ball in the {color} zone"
        self.task_completed_desc = "done sorting all the balls."
        self.ee = Suction  # Using Suction since we need to lift the balls
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of balls and zones
        n_balls = 5
        n_zones = 5

        # Define ball size
        ball_size = (0.04, 0.04, 0.04)  # Assuming a standard size for all balls

        # Define colors for the balls and corresponding zones
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [f"{color} ball" for color in colors]

        # Add zones with corresponding colors
        zone_size = (0.1, 0.1, 0)  # Zones are flat on the table
        zone_urdf = 'zone/zone.urdf'
        zone_poses = []
        for color in colors:
            zone_pose = self.get_random_pose(env, zone_size)
            env.add_object(zone_urdf, zone_pose, color=utils.COLORS[color], category='fixed')
            zone_poses.append(zone_pose)

        # Add balls with corresponding colors
        ball_template = 'ball/ball-template.urdf'
        balls = []
        for i, color in enumerate(colors):
            ball_pose = self.get_random_pose(env, ball_size)
            replace = {'COLOR': utils.COLORS[color]}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append(ball_id)

            # Define the language goal for each ball
            language_goal = self.lang_template.format(color=color)

            # Add goal for each ball to be sorted into the matching color zone
            self.add_goal(objs=[ball_id], matches=np.int32([[1]]), targ_poses=[zone_poses[i]], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_balls,
                          language_goal=language_goal)

        # Set the description for the task completion
        self.task_completed_desc = "sorted all the balls into the correct color zones."