import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BallZoneClassification(Task):
    """Place balls of different colors into corresponding colored zones on the table."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to call self.add_goal twice, so we set max_steps to twice that number
        self.lang_template = "put the {color} ball in the {color} zone"
        self.task_completed_desc = "done classifying balls into zones."
        self.ee = Suction  # We need to move balls on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the number of balls and zones
        n_balls = 2
        n_zones = n_balls  # We have the same number of zones as balls

        # Define the size of the zones
        zone_size = (0.1, 0.1, 0)  # Zones are flat on the table

        # Define colors for the balls and corresponding zones
        ball_colors = ['red', 'green']
        zone_colors = ball_colors  # Each ball has a matching zone color

        # Add colored zones to the environment
        zone_poses = []
        for i in range(n_zones):
            zone_pose = self.get_random_pose(env, zone_size)
            zone_urdf = 'zone/zone.urdf'
            zone_color = utils.COLORS[zone_colors[i]]
            env.add_object(zone_urdf, zone_pose, 'fixed', color=zone_color)
            zone_poses.append(zone_pose)

        # Add colored balls to the environment
        balls = []
        ball_template = 'ball/ball-template.urdf'
        for i in range(n_balls):
            ball_size = (0.05, 0.05, 0.05)  # Define the size of the ball
            ball_pose = self.get_random_pose(env, ball_size)
            ball_color = utils.COLORS[ball_colors[i]]
            replace = {'COLOR': ball_color}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append(ball_id)

            # Define the language goal for placing the ball in the correct zone
            language_goal = self.lang_template.format(color=ball_colors[i])

            # Add goal for each ball to be in the corresponding colored zone
            self.add_goal(objs=[ball_id], 
                          matches=np.int32([[1]]), 
                          targ_poses=[zone_poses[i]], 
                          replace=False, 
                          rotations=False, 
                          metric='zone', 
                          params=[(zone_poses[i], zone_size)], 
                          step_max_reward=1,  # Since we have only one goal per ball, the max reward is 1
                          language_goal=language_goal)