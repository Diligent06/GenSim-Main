import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderColorMatch(Task):
    """Organize differently colored cylinders into corresponding colored zones on a tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # Assuming we will have 2 goals, so max_steps is twice that
        self.ee = Suction  # Using Suction since we need to move objects on the Z axis
        self.lang_template = "put the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done organizing cylinders."

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones
        n_cylinders = 2
        n_zones = 2

        # Define cylinder size
        cylinder_size = (0.05, 0.05, 0.15)  # (radius, radius, height)

        # Define zone size
        zone_size = (0.15, 0.15, 0)  # (x, y, ignored z)

        # Define colors for cylinders and zones
        cylinder_colors = ['red', 'green']
        zone_colors = ['red', 'green']

        # Add cylinders with random poses
        cylinders = []
        for i in range(n_cylinders):
            color_name = cylinder_colors[i]
            color_rgb = utils.COLORS[color_name]
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_urdf = 'cylinder/cylinder-template.urdf'
            replace = {'COLOR': color_rgb}
            urdf = self.fill_template(cylinder_urdf, replace)
            cylinder_id = env.add_object(urdf, cylinder_pose)
            cylinders.append((cylinder_id, color_name))

        # Add zones with random poses
        zones = []
        for i in range(n_zones):
            color_name = zone_colors[i]
            color_rgb = utils.COLORS[color_name]
            zone_pose = self.get_random_pose(env, zone_size)
            zone_urdf = 'zone/zone.urdf'
            replace = {'COLOR': color_rgb}
            urdf = self.fill_template(zone_urdf, replace)
            env.add_object(urdf, zone_pose, 'fixed')
            zones.append((zone_pose, color_name))

        # Match cylinders to zones by color and create goals
        for cylinder, cylinder_color in cylinders:
            for zone_pose, zone_color in zones:
                if cylinder_color == zone_color:
                    language_goal = self.lang_template.format(color=cylinder_color)
                    self.add_goal(
                        objs=[cylinder],
                        matches=np.ones((1, 1)),
                        targ_poses=[zone_pose],
                        replace=True,
                        rotations=False,
                        metric='zone',
                        params=[(zone_pose, zone_size)],
                        step_max_reward=1,
                        language_goal=language_goal
                    )
                    break  # Each cylinder has only one corresponding zone