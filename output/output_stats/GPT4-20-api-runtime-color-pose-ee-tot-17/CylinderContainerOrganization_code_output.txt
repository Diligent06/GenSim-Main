import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderContainerOrganization(Task):
    """Organize a set of five differently colored and sized cylinders into a container by placing them in ascending order of size from left to right."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We have 5 cylinders to place, so 10 steps should be sufficient
        self.lang_template = "place the {color} cylinder in the container in {position} position"
        self.task_completed_desc = "done organizing the cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and container
        n_cylinders = 5

        # Define the colors for the cylinders
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [utils.COLORS[color] for color in colors]

        # Add container box
        container_size = self.get_random_size(0.1, 0.15, 0.1, 0.15, 0.05, 0.05)
        container_pose = self.get_random_pose(env, container_size)
        container_template = 'container/container-template.urdf'
        replace = {'DIM': container_size, 'HALF': (container_size[0] / 2, container_size[1] / 2, container_size[2] / 2)}
        container_urdf = self.fill_template(container_template, replace)
        env.add_object(container_urdf, container_pose, 'fixed')

        # Add cylinders with different sizes and colors
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        sizes = np.linspace(0.02, 0.04, n_cylinders)  # Ascending sizes from 0.02 to 0.04
        for i in range(n_cylinders):
            size = (sizes[i], sizes[i], 0.1)  # Diameter, Diameter, Height
            pose = self.get_random_pose(env, size)
            replace = {'DIM': size, 'HALF': (size[0] / 2, size[1] / 2, size[2] / 2), 'COLOR': color_names[i]}
            urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append((cylinder_id, size[0]))  # Store tuple of ID and size for sorting

        # Sort cylinders by size
        cylinders.sort(key=lambda x: x[1])

        # Define target positions in the container from left to right
        container_x = container_pose[0][0] - container_size[0] / 2 + 0.05  # Start at the left side of the container
        positions = ['leftmost', 'left', 'middle', 'right', 'rightmost']
        for i, (cylinder_id, _) in enumerate(cylinders):
            # Calculate the x position for each cylinder based on its order
            x_offset = (container_size[0] / (n_cylinders + 1)) * (i + 1)
            target_x = container_x + x_offset
            target_pose = [(target_x, container_pose[0][1], container_pose[0][2]), container_pose[1]]

            # Add goal for each cylinder
            language_goal = self.lang_template.format(color=colors[i], position=positions[i])
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / n_cylinders,
                          language_goal=language_goal)