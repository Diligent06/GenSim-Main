import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderPrecisionMatching(Task):
    """
    Arrange cylinders of different colors to stand vertically on matching color-coded zones on the tabletop,
    ensuring precise alignment with the zone centers.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to call self.add_goal twice, so we set this to twice that number
        self.lang_template = "place the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done with cylinder precision matching."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones
        n_cylinders = 2
        n_zones = n_cylinders  # One zone per cylinder

        # Define cylinder size
        cylinder_size = (0.05, 0.05, 0.15)  # (radius, radius, height)

        # Define colors for cylinders and zones
        colors = ['red', 'green']
        color_names = [f"{color} cylinder" for color in colors]

        # Add zones with matching colors
        zone_urdf = 'zone/zone.urdf'
        zone_poses = []
        for color in colors:
            zone_size = (0.07, 0.07, 0)  # Slightly larger than the cylinder base to allow for precision
            zone_pose = self.get_random_pose(env, zone_size)
            zone_color = utils.COLORS[color]
            env.add_object(zone_urdf, zone_pose, 'fixed', color=zone_color)
            zone_poses.append(zone_pose)

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i, color in enumerate(colors):
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)
            cylinder_color = utils.COLORS[color]
            replace = {'COLOR': cylinder_color}

            # IMPORTANT: REPLACE THE TEMPLATE URDF
            urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append(cylinder_id)

            # Define the language goal
            language_goal = self.lang_template.format(color=color)

            # Add goal for each cylinder to be placed in the matching zone
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_poses[i]],
                          replace=False, rotations=False, metric='pose', params=None,
                          step_max_reward=1, language_goal=language_goal)

        # Set the task description
        self.task_desc = "Arrange cylinders of different colors to stand vertically on matching color-coded zones."