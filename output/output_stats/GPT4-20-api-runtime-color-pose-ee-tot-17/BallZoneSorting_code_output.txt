import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BallZoneSorting(Task):
    """Sort balls of differing sizes and colors into designated color-coded zones, aligning them with the center of each zone."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # Assuming we will have 2 goals, so max_steps is twice that
        self.lang_template = "put the {color} ball in the {color} zone"
        self.task_completed_desc = "done sorting balls into zones."
        self.ee = Suction  # Using Suction since we need to move balls on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the number of balls and zones
        n_balls = 3
        n_zones = 3

        # Define ball colors and corresponding zones
        ball_colors = ['red', 'green', 'blue']
        zone_colors = ['red', 'green', 'blue']

        # Add zones with corresponding colors
        zone_size = (0.1, 0.1, 0)  # Zones are flat squares on the table
        zones = []
        for i in range(n_zones):
            zone_pose = self.get_random_pose(env, zone_size)
            zone_urdf = 'zone/zone.urdf'
            color = utils.COLORS[zone_colors[i]]
            zone_id = env.add_object(zone_urdf, zone_pose, 'fixed', color=color)
            zones.append((zone_id, zone_pose))

        # Add balls with corresponding colors
        balls = []
        for i in range(n_balls):
            ball_size = (0.04, 0.04, 0.04)  # Uniform size for simplicity
            ball_pose = self.get_random_pose(env, ball_size)
            ball_template = 'ball/ball-template.urdf'
            color = utils.COLORS[ball_colors[i]]
            replace = {'COLOR': color}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append((ball_id, ball_pose))

        # Create sorting goals for each ball to be placed in the matching color zone
        for i in range(n_balls):
            ball_id, _ = balls[i]
            _, zone_pose = zones[i]
            language_goal = self.lang_template.format(color=ball_colors[i])
            self.add_goal(objs=[ball_id], matches=np.int32([[1]]), targ_poses=[zone_pose], replace=True,
                          rotations=False, metric='zone', params=[(zone_pose, zone_size)], step_max_reward=1,
                          language_goal=language_goal)

# Note: The code assumes that there is a one-to-one correspondence between ball colors and zone colors.
# If the task requires a different setup, the code should be adjusted accordingly.