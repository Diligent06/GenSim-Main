import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class OrganizeBowlsOnPallet(Task):
    """Arrange a set of five different colored bowls in a specific color order on a pallet."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to have 5 pick and place actions, so max_steps is set to twice that number
        self.ee = Suction  # We use Suction end-effector as we need to lift bowls along the Z axis
        self.lang_template = "place the {color} bowl on the pallet in the correct order"
        self.task_completed_desc = "done organizing bowls on pallet."

    def reset(self, env):
        super().reset(env)

        # Define the color order for the bowls on the pallet
        color_order = ['red', 'green', 'blue', 'yellow', 'purple']
        bowl_colors = [utils.COLORS[color] for color in color_order]  # Generate RGB values for the colors

        # Add pallet
        pallet_size = (0.3, 0.3, 0.02)  # Define the size of the pallet (x, y, z)
        pallet_pose = self.get_random_pose(env, pallet_size)  # Get a random pose for the pallet within the workspace
        pallet_urdf = 'pallet/pallet.urdf'
        env.add_object(pallet_urdf, pallet_pose, 'fixed')  # Add the pallet to the environment as a fixed object

        # Add bowls
        bowl_size = (0.1, 0.1, 0.05)  # Define the size of the bowls (x, y, z)
        bowl_urdf = 'bowl/bowl.urdf'
        bowls = []
        for color in bowl_colors:
            bowl_pose = self.get_random_pose(env, bowl_size)  # Get a random pose for the bowl within the workspace
            bowl_id = env.add_object(bowl_urdf, bowl_pose, color=color)  # Add the bowl to the environment
            bowls.append(bowl_id)  # Keep track of the bowl IDs

        # Define the target positions for the bowls on the pallet
        # We will place the bowls in a line on the pallet with equal spacing
        pallet_x, pallet_y, _ = pallet_pose[0]  # Get the x, y coordinates of the pallet center
        start_x = pallet_x - 0.1  # Starting x-coordinate for the first bowl
        y = pallet_y  # y-coordinate is the same for all bowls
        z = 0.05  # z-coordinate is slightly above the pallet to place the bowl
        spacing = 0.05  # Space between the bowls

        # Add goals for each bowl to be placed in the correct order on the pallet
        for i, bowl_id in enumerate(bowls):
            x = start_x + i * spacing  # Calculate the x-coordinate for the current bowl
            target_pose = [(x, y, z), (0, 0, 0, 1)]  # Target pose for the bowl (no rotation needed)
            language_goal = self.lang_template.format(color=color_order[i])  # Generate the language goal
            self.add_goal(objs=[bowl_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/5,
                          language_goal=language_goal)  # Add the goal for the current bowl