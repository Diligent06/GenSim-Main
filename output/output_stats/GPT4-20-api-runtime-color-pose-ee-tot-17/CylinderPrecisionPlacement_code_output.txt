import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderPrecisionPlacement(Task):
    """
    Place a set of differently colored cylinders onto corresponding colored lines marked on the tabletop,
    aligning them perfectly with the lines.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to place two cylinders, so max_steps is twice that number
        self.ee = Suction  # Using Suction end-effector to pick and place cylinders

        # Language templates for instructions
        self.lang_template = "place the {color} cylinder on the {color} line"
        self.task_completed_desc = "done placing all cylinders."

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and lines
        n_cylinders = 2

        # Define cylinder size (diameter, height)
        cylinder_size = (0.04, 0.1)  # (diameter, height)

        # Define colors for cylinders and lines
        cylinder_colors = ['red', 'blue']
        line_colors = ['red', 'blue']

        # Add cylinders to the environment
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i in range(n_cylinders):
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, obj_size=cylinder_size)
            # Set the color for the cylinder
            color = utils.COLORS[cylinder_colors[i]]
            # Fill the cylinder URDF template with the color and size
            replace = {'COLOR': color, 'SIZE': cylinder_size}
            # Generate the URDF for the cylinder
            urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append(cylinder_id)

        # Add lines to the environment
        line_template = 'line/single-green-line-template.urdf'
        for i, color in enumerate(line_colors):
            # Set the color for the line
            line_color = utils.COLORS[color]
            # Get a fixed pose for the line
            line_pose = [(0.5, -0.25 + i * 0.5, 0.001), (0, 0, 0, 1)]  # Fixed x, varying y, fixed z and orientation
            # Fill the line URDF template with the color
            replace = {'COLOR': line_color}
            # Generate the URDF for the line
            urdf = self.fill_template(line_template, replace)
            # Add the line to the environment as a fixed object
            env.add_object(urdf, line_pose, 'fixed')

        # Define goals for placing cylinders on lines
        for i, cylinder_id in enumerate(cylinders):
            # Language goal for the current cylinder
            language_goal = self.lang_template.format(color=cylinder_colors[i])
            # Add goal for the cylinder to be placed on the corresponding line
            self.add_goal(objs=[cylinder_id],
                          matches=np.int32([[1]]),
                          targ_poses=[line_pose],  # Target pose is the same as the line's pose
                          replace=True,  # Each cylinder has a unique target
                          rotations=False,  # No rotation needed, cylinders align with lines
                          metric='pose',  # We use pose metric for precision placement
                          params=None,  # No additional parameters needed
                          step_max_reward=1,  # Full reward for placing each cylinder correctly
                          language_goal=language_goal)