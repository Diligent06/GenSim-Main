import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisePlacementCylinderLine(Task):
    """
    Place five differently colored cylinders onto their corresponding colored lines marked on the tabletop,
    aligning them perfectly with the lines.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to place 5 cylinders, so max_steps is set to twice that number
        self.ee = Suction  # Using Suction end-effector as we need to move objects on the Z axis

        # Language templates for the task
        self.lang_template = "place the {color} cylinder on the {color} line"
        self.task_completed_desc = "done placing all cylinders on their lines."

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and their colors
        n_cylinders = 5
        cylinder_colors = ['red', 'blue', 'green', 'yellow', 'purple']

        # Define the size of the cylinders
        cylinder_size = (0.05, 0.05, 0.1)  # (radius, radius, height)

        # Add cylinders to the environment
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i in range(n_cylinders):
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)
            color = utils.COLORS[cylinder_colors[i]]  # Get the RGB value for the cylinder color

            # Replace the template URDF with the specific color and size for the cylinder
            replace = {'COLOR': color, 'SIZE': cylinder_size}
            urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder object to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append((cylinder_id, cylinder_colors[i]))

        # Add lines to the environment
        line_template = 'line/single-green-line-template.urdf'
        for i, (cylinder_id, color) in enumerate(cylinders):
            # Define the size and pose of the line
            line_size = (0.15, 0.005, 0.005)  # (length, width, height)
            line_pose = self.get_random_pose(env, line_size)

            # Replace the template URDF with the specific color for the line
            line_color = utils.COLORS[color]  # Use the same color as the corresponding cylinder
            replace = {'COLOR': line_color, 'SIZE': line_size}
            urdf = self.fill_template(line_template, replace)

            # Add the line object to the environment
            env.add_object(urdf, line_pose, 'fixed')

            # Define the language goal for placing the cylinder
            language_goal = self.lang_template.format(color=color)

            # Add the goal for the cylinder to be placed on the line
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[line_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

        # The task is set up with cylinders and corresponding lines, and goals are defined for each placement.