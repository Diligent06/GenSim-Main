import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorMatchCylinderPlacement(Task):
    """
    Arrange five differently colored cylinders on marked colored circles on the table surface,
    matching the cylinder color with the circle's color.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Set to twice the number of goals
        self.lang_template = "place the {color} cylinder on the {color} circle"
        self.task_completed_desc = "done placing all cylinders."
        self.ee = Suction  # Use Suction end-effector for vertical movement
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and circles
        n_objects = 5

        # Define cylinder size
        cylinder_size = (0.05, 0.05, 0.1)  # (radius, radius, height)

        # Define available colors
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [f"{color} cylinder" for color in colors]

        # Add colored zones (circles) to the environment
        zone_urdf = 'zone/zone.urdf'
        zone_poses = []
        for color in colors:
            zone_pose = self.get_random_pose(env, obj_size=cylinder_size)
            zone_color = utils.COLORS[color]
            env.add_object(zone_urdf, zone_pose, 'fixed', color=zone_color)
            zone_poses.append(zone_pose)

        # Add cylinders to the environment
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i, color in enumerate(colors):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, obj_size=cylinder_size)
            cylinder_color = utils.COLORS[color]

            # Replace placeholders in the URDF template
            replace = {
                'COLOR': cylinder_color,
                'SIZE': cylinder_size
            }
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Define the language goal
            language_goal = self.lang_template.format(color=color)

            # Add the goal for the cylinder to be placed on the matching colored circle
            self.add_goal(
                objs=[cylinder_id],
                matches=np.int32([[1]]),  # Each cylinder has one matching circle
                targ_poses=[zone_poses[i]],  # Target pose is the pose of the matching circle
                replace=False,  # Cylinders should not be replaced once placed
                rotations=False,  # Rotation is not considered for this task
                metric='pose',  # Use pose metric for evaluation
                params=None,  # No additional parameters needed
                step_max_reward=1,  # Full reward for completing this step
                language_goal=language_goal  # Language goal for this step
            )

        # Set the task description
        self.lang_goals = [self.lang_template.format(color=color) for color in colors]