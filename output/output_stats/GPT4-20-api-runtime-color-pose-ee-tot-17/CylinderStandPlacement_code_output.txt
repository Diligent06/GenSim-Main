import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderStandPlacement(Task):
    """
    Arrange five differently sized and colored cylinders onto a stand,
    with each spot on the stand coded for a specific size and color.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to place 5 cylinders, so 10 steps should be sufficient
        self.lang_template = "place the {color} cylinder on the {color} spot on the stand"
        self.task_completed_desc = "all cylinders are placed correctly."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors and sizes for the cylinders
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        sizes = [(0.04, 0.04, 0.08),  # Small
                 (0.05, 0.05, 0.1),   # Medium
                 (0.06, 0.06, 0.12),  # Large
                 (0.07, 0.07, 0.14),  # Larger
                 (0.08, 0.08, 0.16)]  # Largest

        # Add the stand
        stand_size = (0.3, 0.3, 0.02)  # Size of the stand
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Add cylinders and define their target poses on the stand
        cylinder_template = 'cylinder/cylinder-template.urdf'
        target_positions = [(0.1, -0.1, 0.01), (0.1, 0, 0.01), (0.1, 0.1, 0.01),
                            (-0.1, -0.1, 0.01), (-0.1, 0.1, 0.01)]  # Target positions on the stand

        for i in range(5):
            # Define the cylinder size and color
            size = sizes[i]
            color_name = colors[i]
            color_rgb = utils.COLORS[color_name]

            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, size)

            # Fill the cylinder URDF template with size and color
            replace = {'SIZE': size, 'COLOR': color_rgb}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, pose)

            # Define the target pose for the cylinder on the stand
            target_position = target_positions[i]
            target_pose = (utils.apply(stand_pose, target_position), stand_pose[1])

            # Define the language goal
            language_goal = self.lang_template.format(color=color_name)

            # Add the goal for placing the cylinder
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_pose],
                          replace=False, rotations=False, metric='pose', params=None,
                          step_max_reward=1, language_goal=language_goal)

        # The task is set up with 5 goals, one for each cylinder