import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class AlignBallsOnStand(Task):
    """Arrange balls of different colors on a stand, with slots designated for each specific color."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to call self.add_goal twice, so we set this to twice that number
        self.lang_template = "place the {color} ball on the {color} slot on the stand"
        self.task_completed_desc = "done aligning balls on stand."
        self.ee = Suction  # We need to move balls on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors for the balls
        ball_colors = ['red', 'green', 'blue', 'yellow']
        # Define the size of the balls
        ball_size = (0.04, 0.04, 0.04)  # Diameter of the ball is 0.04m

        # Add the stand
        stand_size = (0.1, 0.1, 0.02)  # Size of the stand
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Add balls and set their target poses on the stand
        ball_urdf_template = 'ball/ball-template.urdf'
        balls = []
        for i, color in enumerate(ball_colors):
            # Get a random pose for the ball
            ball_pose = self.get_random_pose(env, ball_size)
            # Set the color of the ball
            ball_color = utils.COLORS[color]
            # Replace the template URDF with the specific color
            replace = {'COLOR': ball_color}
            ball_urdf = self.fill_template(ball_urdf_template, replace)
            # Add the ball to the environment
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append(ball_id)

            # Define the target pose for the ball on the stand
            # The target position is offset from the stand's position to align with the slots
            # We assume the slots are arranged in a line along the x-axis of the stand
            slot_offset_x = (i - len(ball_colors) / 2) * 0.02 + 0.02  # Offset for each slot
            target_pose = (stand_pose[0] + np.array([slot_offset_x, 0, 0.02]), stand_pose[1])
            
            # Set the language goal for placing this ball
            language_goal = self.lang_template.format(color=color)
            
            # Add the goal for this ball
            self.add_goal(objs=[ball_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / len(ball_colors),
                          language_goal=language_goal)

        # Set the task description
        self.lang_goals = [self.lang_template.format(color=color) for color in ball_colors]