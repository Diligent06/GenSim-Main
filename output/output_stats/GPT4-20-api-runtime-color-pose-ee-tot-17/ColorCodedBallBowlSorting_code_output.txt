import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedBallBowlSorting(Task):
    """Sort balls of different colors into bowls, each bowl designated for a specific color."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we have 5 balls and 5 bowls, 2 steps per ball (pick and place)
        self.lang_template = "put the {color} ball in the {color} bowl"
        self.task_completed_desc = "done sorting the balls into the bowls."
        self.ee = Suction  # Using Suction end-effector to pick up balls

    def reset(self, env):
        super().reset(env)

        # Define the number of balls and bowls
        n_balls = 5
        n_bowls = 5

        # Define the size of the balls and bowls
        ball_size = (0.04, 0.04, 0.04)  # (x, y, z) dimensions
        bowl_size = (0.12, 0.12, 0.06)  # (x, y, z) dimensions

        # Define the URDFs for the balls and bowls
        ball_urdf = 'ball/ball-template.urdf'
        bowl_urdf = 'bowl/bowl.urdf'

        # Define available colors
        colors = ['red', 'green', 'blue', 'yellow', 'purple']

        # Add bowls to the environment and store their poses for later reference
        bowl_poses = []
        for color in colors:
            bowl_pose = self.get_random_pose(env, bowl_size)
            env.add_object(bowl_urdf, bowl_pose, 'fixed', color=utils.COLORS[color])
            bowl_poses.append(bowl_pose)

        # Add balls to the environment
        balls = []
        for color in colors:
            ball_pose = self.get_random_pose(env, ball_size)
            replace = {'COLOR': utils.COLORS[color]}
            # IMPORTANT: REPLACE THE TEMPLATE URDF
            urdf = self.fill_template(ball_urdf, replace)
            ball_id = env.add_object(urdf, ball_pose)
            balls.append((ball_id, color))

        # Add goals for each ball to be in the matching color bowl
        for ball, color in balls:
            # Find the index of the bowl with the matching color
            bowl_idx = colors.index(color)
            # Define the language goal
            language_goal = self.lang_template.format(color=color)
            # Add the goal for the ball to be in the correct bowl
            self.add_goal(objs=[ball], matches=np.ones((1, 1)), targ_poses=[bowl_poses[bowl_idx]],
                          replace=True, rotations=False, metric='pose', params=None,
                          step_max_reward=1/n_balls, language_goal=language_goal)