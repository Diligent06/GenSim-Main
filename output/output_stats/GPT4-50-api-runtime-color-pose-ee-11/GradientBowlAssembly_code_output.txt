import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class GradientBowlAssembly(Task):
    """Arrange a set of three uniquely colored cylinders inside a single bowl, ordered by height with the tallest at the center and the shorter ones on the sides, ensuring the sequence of colors creates a smooth gradient transition."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 objects to place, so max_steps is twice the number of objects
        self.lang_template = "place the {color} cylinder in the bowl, with the tallest in the center"
        self.task_completed_desc = "done arranging the cylinders in a gradient."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors for the gradient
        colors = ['red', 'orange', 'yellow']
        color_names = ['red', 'orange', 'yellow']
        np.random.shuffle(colors)  # Shuffle to randomize the order of the gradient

        # Define the sizes for the cylinders, ordered by height
        sizes = [(0.04, 0.04, 0.12),  # Tallest
                 (0.04, 0.04, 0.08),  # Middle
                 (0.04, 0.04, 0.04)]  # Shortest

        # Add a single bowl to the environment
        bowl_size = (0.18, 0.18, 0.06)  # Size of the bowl
        bowl_pose = self.get_random_pose(env, bowl_size)  # Random pose for the bowl
        bowl_urdf = 'bowl/bowl.urdf'
        env.add_object(bowl_urdf, bowl_pose, 'fixed')

        # Add cylinders with gradient colors
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_ids = []
        for i in range(3):
            # Get the color and size for the current cylinder
            color = utils.COLORS[colors[i]]
            size = sizes[i]

            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, size)

            # Replace the placeholders in the URDF template
            replace = {'SIZE': size, 'COLOR': color}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinder_ids.append(cylinder_id)

            # Define the language goal for placing this cylinder
            language_goal = self.lang_template.format(color=color_names[i])

            # Add the goal for the current cylinder
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[bowl_pose], replace=True,
                          rotations=False, metric='pose', params=None, step_max_reward=1/3,
                          language_goal=language_goal)

        # The task is to arrange the cylinders inside the bowl in a gradient by height
        # The tallest cylinder should be in the center of the bowl, with the shorter ones on the sides
        # The sequence of colors should create a smooth gradient transition