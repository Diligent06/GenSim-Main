import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCoordinatedCylinderPyramid(Task):
    """
    Stack a pyramid of three differently colored cylinders on a designated zone by placing them in an order with the
    largest and darkest-colored cylinder at the base, the medium and medium-shade cylinder in the middle, and the
    smallest and lightest-colored cylinder on top, ensuring the stack remains stable within the zone.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is twice that number
        self.lang_template = "stack the {color} cylinder {position} in the pyramid"
        self.task_completed_desc = "done stacking the cylinder pyramid."
        self.ee = Suction  # Using Suction end-effector as we need to move objects on the Z axis
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the colors and sizes for the cylinders
        colors = ['black', 'gray', 'silver']  # Dark to light colors
        sizes = [(0.08, 0.08, 0.12), (0.06, 0.06, 0.09), (0.04, 0.04, 0.06)]  # Large to small sizes

        # Add goal zone
        zone_size = (0.15, 0.15, 0)  # Size of the zone where the pyramid will be built
        zone_pose = self.get_random_pose(env, zone_size)  # Random pose within workspace bounds
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_poses = []
        cylinder_ids = []
        for i in range(3):
            # Get random pose for the cylinder
            pose = self.get_random_pose(env, sizes[i])
            cylinder_poses.append(pose)

            # Fill in the template URDF with the specific size and color for this cylinder
            replace = {'SIZE': sizes[i], 'COLOR': utils.COLORS[colors[i]]}
            urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinder_ids.append(cylinder_id)

        # Define the target poses for each cylinder in the pyramid
        base_height = zone_pose[0][2]  # Z coordinate of the zone pose
        targ_poses = [
            (zone_pose[0], zone_pose[1]),  # Base cylinder directly on the zone
            ((zone_pose[0][0], zone_pose[0][1], base_height + sizes[0][2]), zone_pose[1]),  # Middle cylinder
            ((zone_pose[0][0], zone_pose[0][1], base_height + sizes[0][2] + sizes[1][2]), zone_pose[1])  # Top cylinder
        ]

        # Add goals for stacking the cylinders
        for i in range(3):
            # Language goal describes the color and position of the cylinder in the pyramid
            lang_goal = self.lang_template.format(color=colors[i], position=['base', 'middle', 'top'][i])
            # Add the goal with the corresponding cylinder, target pose, and language goal
            self.add_goal(objs=[cylinder_ids[i]], matches=np.ones((1, 1)), targ_poses=[targ_poses[i]],
                          replace=False, rotations=True, metric='pose', params=None, step_max_reward=1/3,
                          language_goal=lang_goal)

        # The step_max_reward is 1/3 because we have three goals and each goal contributes equally to the task completion