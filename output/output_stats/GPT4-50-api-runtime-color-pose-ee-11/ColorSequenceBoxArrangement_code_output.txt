import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorSequenceBoxArrangement(Task):
    """
    Arrange a sequence of five colored boxes in ascending order of size along a green line,
    ensuring that each box aligns precisely with equidistant markers on the line.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Set to twice the number of boxes to allow for adjustments
        self.lang_template = "place the {color} box on the marker"
        self.task_completed_desc = "done arranging the boxes."
        self.ee = Suction  # Use Suction end-effector to move boxes in Z axis
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the colors for the boxes
        box_colors = ['red', 'orange', 'yellow', 'green', 'blue']
        n_boxes = len(box_colors)  # Number of boxes to arrange

        # Add the green line with equidistant markers
        line_size = (0.15, 0.01, 0.001)  # Size of the green line
        line_pose = self.get_random_pose(env, line_size)  # Random pose for the line
        line_urdf = 'line/single-green-line-template.urdf'
        env.add_object(line_urdf, line_pose, 'fixed')

        # Add boxes in ascending order of size
        boxes = []
        box_template = 'box/box-template.urdf'
        for i in range(n_boxes):
            # Generate a random size for the box, increasing with each iteration
            box_size = self.get_random_size(0.02 + i*0.01, 0.02 + i*0.01, 0.02, 0.02 + i*0.01, 0.02, 0.02)
            box_pose = self.get_random_pose(env, box_size)  # Random pose for the box
            color = utils.COLORS[box_colors[i]]  # Get the RGB color for the box

            # Replace the template URDF with the specific box size and color
            replace = {'SIZE': box_size, 'COLOR': color}
            box_urdf = self.fill_template(box_template, replace)
            box_id = env.add_object(box_urdf, box_pose)
            boxes.append((box_id, box_size))

        # Sort the boxes by size to create the sequence
        boxes.sort(key=lambda x: x[1])

        # Define the target poses for each box along the green line
        marker_spacing = 0.1  # Spacing between markers on the line
        for i, (box_id, _) in enumerate(boxes):
            # Calculate the target position for each box on the green line
            target_x = line_pose[0][0] - line_size[0]/2 + marker_spacing * (i + 1)
            target_pose = [(target_x, line_pose[0][1], line_pose[0][2]), line_pose[1]]

            # Define the language goal for placing each box
            language_goal = self.lang_template.format(color=box_colors[i])

            # Add the goal for placing each box on its corresponding marker
            self.add_goal(objs=[box_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_boxes,
                          language_goal=language_goal)

        # Set the primitive to use for the task
        self.primitive = primitives.push