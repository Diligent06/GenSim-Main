import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorMatchedCylinderTower(Task):
    """Stack differently sized cylinders on a stand in ascending order of size with the correct color matching a corresponding colored zone on the tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Set to twice the number of expected goals
        self.lang_template = "stack the {color} cylinder on the {color} zone"
        self.task_completed_desc = "done stacking the color-matched cylinder tower."
        self.ee = Suction  # Use Suction end-effector for vertical stacking
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the colors and sizes for the cylinders
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        sizes = [(0.04, 0.04, 0.08), (0.035, 0.035, 0.07), (0.03, 0.03, 0.06),
                 (0.025, 0.025, 0.05), (0.02, 0.02, 0.04)]  # Descending sizes for stacking

        # Add stand
        stand_size = (0.1, 0.1, 0.005)
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Add zones and cylinders
        zone_urdf = 'zone/zone.urdf'
        cylinder_template = 'cylinder/cylinder-template.urdf'
        zone_poses = []
        cylinder_ids = []

        for i, color in enumerate(colors):
            # Add zone
            zone_size = (0.05, 0.05, 0)  # Zones are flat squares
            zone_pose = self.get_random_pose(env, zone_size)
            zone_color = utils.COLORS[color]
            env.add_object(zone_urdf, zone_pose, 'fixed', color=zone_color)
            zone_poses.append(zone_pose)

            # Add cylinder
            cylinder_size = sizes[i]
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_color = utils.COLORS[color]
            replace = {'SIZE': cylinder_size, 'COLOR': cylinder_color}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinder_ids.append(cylinder_id)

            # Define language goal
            language_goal = self.lang_template.format(color=color)

            # Add goal for each cylinder to be stacked on the stand in the correct zone
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_pose],
                          replace=False, rotations=True, metric='pose', params=None,
                          step_max_reward=1 / len(colors), language_goal=language_goal)

        # Set primitive for the task
        self.primitive = primitives.push