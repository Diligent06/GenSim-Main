import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderTowerSorting(Task):
    """Pick up five different colored cylinders and stack them into a tower on the designated zone, ordered from the darkest to the lightest shade."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call self.add_goal 5 times, so we set max_steps to twice that number
        self.lang_template = "stack the {color} cylinder"
        self.task_completed_desc = "done sorting the cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors of the cylinders from darkest to lightest
        cylinder_colors = ['indigo', 'blue', 'green', 'yellow', 'orange']
        # Convert color names to RGB values
        colors_rgb = [utils.COLORS[color] for color in cylinder_colors]

        # Add the zone where the cylinders will be stacked
        zone_size = (0.1, 0.1, 0)  # Size of the zone
        zone_pose = self.get_random_pose(env, zone_size)  # Random pose for the zone
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')  # Add the zone to the environment

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.05, 0.05, 0.1)  # Size of the cylinders (diameter, diameter, height)
        cylinder_scale = [0.05, 0.05, 0.1]  # Scale for the URDF model

        # Keep track of the cylinder objects and their initial poses
        cylinders = []
        initial_poses = []

        for i, color in enumerate(cylinder_colors):
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)
            initial_poses.append(pose)

            # Fill in the URDF template with the specific cylinder properties
            replace = {'COLOR': colors_rgb[i], 'SCALE': cylinder_scale}
            urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append(cylinder_id)

            # Define the language goal for this cylinder
            language_goal = self.lang_template.format(color=color)

            # Add the goal for this cylinder
            # Since we're stacking, the target pose will be above the previous cylinder (or the zone for the first one)
            target_height = zone_pose[0][2] + cylinder_size[2] * (i + 1)  # Calculate the height of the target pose
            target_pose = (zone_pose[0][0], zone_pose[0][1], target_height), zone_pose[1]  # Target pose is directly above the zone

            # Add the goal for this cylinder
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/5,
                          language_goal=language_goal)

        # Set the initial positions of the cylinders as the starting state for the task
        self.goals[0]['objs'] = cylinders
        self.goals[0]['targ_poses'] = initial_poses