import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class DualBowlCylinderSorting(Task):
    """Sort red and blue cylinders into corresponding white and black bowls."""

    def __init__(self):
        super().__init__()
        self.max_steps = 12  # We expect to call self.add_goal 6 times (3 red, 3 blue)
        self.lang_template = "put the {color} cylinder in the {bowl_color} bowl"
        self.task_completed_desc = "done sorting cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use Suction

    def reset(self, env):
        super().reset(env)

        # Define the size and color of the bowls and cylinders
        bowl_size = (0.15, 0.15, 0.05)  # x, y, z dimensions
        cylinder_size = (0.05, 0.05, 0.15)  # x, y, z dimensions
        white_bowl_color = utils.COLORS['white']
        black_bowl_color = utils.COLORS['black']
        red_cylinder_color = utils.COLORS['red']
        blue_cylinder_color = utils.COLORS['blue']

        # Add a white bowl and a black bowl at opposite ends of the zone
        white_bowl_pose = self.get_random_pose(env, bowl_size)
        black_bowl_pose = self.get_random_pose(env, bowl_size)
        env.add_object('bowl/bowl.urdf', white_bowl_pose, 'fixed', color=white_bowl_color)
        env.add_object('bowl/bowl.urdf', black_bowl_pose, 'fixed', color=black_bowl_color)

        # Add three red and three blue cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        red_cylinders = []
        blue_cylinders = []
        for _ in range(3):
            red_pose = self.get_random_pose(env, cylinder_size)
            blue_pose = self.get_random_pose(env, cylinder_size)
            red_cylinder_urdf = self.fill_template(cylinder_template, {'COLOR': red_cylinder_color})
            blue_cylinder_urdf = self.fill_template(cylinder_template, {'COLOR': blue_cylinder_color})
            red_cylinder_id = env.add_object(red_cylinder_urdf, red_pose)
            blue_cylinder_id = env.add_object(blue_cylinder_urdf, blue_pose)
            red_cylinders.append(red_cylinder_id)
            blue_cylinders.append(blue_cylinder_id)

        # Define goals for sorting cylinders into the correct bowls
        for red_cylinder_id in red_cylinders:
            language_goal = self.lang_template.format(color='red', bowl_color='white')
            self.add_goal(objs=[red_cylinder_id], matches=np.ones((1, 1)), targ_poses=[white_bowl_pose],
                          replace=False, rotations=False, metric='pose', params=None, step_max_reward=1/6,
                          language_goal=language_goal)

        for blue_cylinder_id in blue_cylinders:
            language_goal = self.lang_template.format(color='blue', bowl_color='black')
            self.add_goal(objs=[blue_cylinder_id], matches=np.ones((1, 1)), targ_poses=[black_bowl_pose],
                          replace=False, rotations=False, metric='pose', params=None, step_max_reward=1/6,
                          language_goal=language_goal)