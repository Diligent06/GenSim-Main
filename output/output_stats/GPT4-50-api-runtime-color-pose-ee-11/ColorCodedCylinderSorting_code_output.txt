import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedCylinderSorting(Task):
    """
    Sort a set of five colored cylinders by placing each into a corresponding zone marked with matching color boundaries,
    ensuring precision alignment within the zone.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Set to twice the number of goals, as we have 5 cylinders to sort
        self.ee = Suction  # Use Suction end-effector to pick and place cylinders
        self.lang_template = "put the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done sorting all cylinders."

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders and corresponding zones
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [f"{color} cylinder" for color in colors]

        # Add cylinders with corresponding colors
        cylinders = []
        cylinder_size = (0.05, 0.05, 0.1)  # Diameter, Diameter, Height
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for color in colors:
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)
            # Get the RGB values for the color
            rgb = utils.COLORS[color]
            # Fill the URDF template with the color and size
            replace = {'COLOR': rgb, 'SIZE': cylinder_size}
            urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append(cylinder_id)

        # Add zones with corresponding colors
        zone_size = (0.15, 0.15, 0)  # Length, Width, Height (zones are flat)
        for i, color in enumerate(colors):
            # Get a random pose for the zone
            zone_pose = self.get_random_pose(env, zone_size)
            # Get the RGB values for the color
            rgb = utils.COLORS[color]
            # Add the zone to the environment
            env.add_object('zone/zone.urdf', zone_pose, 'fixed', color=rgb)
            # Define the language goal
            language_goal = self.lang_template.format(color=color)
            # Add the goal for the cylinder to be in the corresponding zone
            self.add_goal(objs=[cylinders[i]], matches=np.int32([[1]]), targ_poses=[zone_pose], replace=True,
                          rotations=False, metric='pose', params=None, step_max_reward=1/5, language_goal=language_goal)

        # The task is set up with cylinders and corresponding zones