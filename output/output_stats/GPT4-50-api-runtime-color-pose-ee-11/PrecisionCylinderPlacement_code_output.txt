import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionCylinderPlacement(Task):
    """Place three differently colored cylinders inside matching colored bowls, ensuring that each cylinder stands upright without tilting."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 goals and we set max_steps to twice the number of goals
        self.lang_template = "put the {color} cylinder in the {color} bowl"
        self.task_completed_desc = "done placing cylinders in bowls."
        self.ee = Suction  # Using Suction end-effector to pick and place cylinders vertically

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and bowls
        n_cylinders = 3
        n_bowls = 3

        # Define the size of the cylinders and bowls
        cylinder_size = (0.05, 0.05, 0.15)  # (radius, radius, height)
        bowl_size = (0.15, 0.15, 0.05)  # (radius, radius, height)

        # Define the colors for the cylinders and bowls
        colors = ['red', 'green', 'blue']
        cylinder_colors = [utils.COLORS[color] for color in colors]
        bowl_colors = [utils.COLORS[color] for color in colors]

        # Add bowls with matching colors
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_poses = []
        for i in range(n_bowls):
            bowl_pose = self.get_random_pose(env, obj_size=bowl_size)
            env.add_object(bowl_urdf, bowl_pose, color=bowl_colors[i], category='fixed')
            bowl_poses.append(bowl_pose)

        # Add cylinders with matching colors
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i in range(n_cylinders):
            cylinder_pose = self.get_random_pose(env, obj_size=cylinder_size)
            replace = {'COLOR': cylinder_colors[i]}
            # IMPORTANT: REPLACE THE TEMPLATE URDF
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Add goal for each cylinder to be placed in the matching bowl
            # The target pose is the same as the bowl pose but with a z-offset to account for the cylinder height
            target_pose = (bowl_poses[i][0], bowl_poses[i][1])
            language_goal = self.lang_template.format(color=colors[i])
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1,
                          language_goal=language_goal)

        # Note: We set rotations to False because we want the cylinders to remain upright (z-axis aligned)
        # and we are not concerned with their rotation around the z-axis for this task.