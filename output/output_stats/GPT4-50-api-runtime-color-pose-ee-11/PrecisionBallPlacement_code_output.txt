import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionBallPlacement(Task):
    """Place a sequence of five increasing-sized balls into five correspondingly sized shallow bowls arranged in a line, without knocking over any adjacent bowls."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to place 5 balls, so we set max_steps to twice the number of placements
        self.lang_template = "place the {color} ball in the {color} bowl"
        self.task_completed_desc = "done placing all balls in bowls."
        self.ee = Suction  # We need to move balls on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the number of balls and bowls
        n_balls = 5
        n_bowls = 5

        # Define the size range for the balls and bowls
        ball_sizes = np.linspace(0.04, 0.08, n_balls)  # Increasing sizes for balls
        bowl_sizes = ball_sizes + 0.01  # Bowls are slightly larger than the corresponding balls

        # Define colors for the balls and bowls
        colors = ['red', 'orange', 'yellow', 'green', 'blue']

        # Add bowls to the environment
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_poses = []
        for i in range(n_bowls):
            # Generate a random pose for the bowl
            bowl_size = (bowl_sizes[i], bowl_sizes[i], 0.02)  # Shallow bowl
            bowl_pose = self.get_random_pose(env, bowl_size)
            bowl_color = utils.COLORS[colors[i]]
            env.add_object(bowl_urdf, bowl_pose, 'fixed', color=bowl_color)
            bowl_poses.append(bowl_pose)

        # Add balls to the environment
        ball_template = 'ball/ball-template.urdf'
        ball_poses = []
        for i in range(n_balls):
            # Generate a random pose for the ball
            ball_size = (ball_sizes[i], ball_sizes[i], ball_sizes[i])
            ball_pose = self.get_random_pose(env, ball_size)
            ball_color = utils.COLORS[colors[i]]
            replace = {'DIM': ball_size}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose, 'rigid', color=ball_color)
            ball_poses.append(ball_pose)

            # Define the language goal
            language_goal = self.lang_template.format(color=colors[i])

            # Add goal for placing the ball in the corresponding bowl
            self.add_goal(objs=[ball_id], 
                          matches=np.int32([[1]]), 
                          targ_poses=[bowl_poses[i]], 
                          replace=False, 
                          rotations=False, 
                          metric='pose', 
                          params=None, 
                          step_max_reward=1, 
                          language_goal=language_goal)

        # The task is to place each ball in the corresponding bowl of the same color
        # The balls are placed in increasing size order into the bowls