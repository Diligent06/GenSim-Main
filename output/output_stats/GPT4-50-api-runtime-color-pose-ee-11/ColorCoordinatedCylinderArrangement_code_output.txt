import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCoordinatedCylinderArrangement(Task):
    """
    Arrange five colored cylinders in ascending order of height onto corresponding
    color-matched zones within a segmented container while maintaining their upright position.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call self.add_goal 5 times, so we set this to twice that number.
        self.lang_template = "place the {color} cylinder in the matching {color} zone"
        self.task_completed_desc = "done arranging the cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector.

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and their colors.
        n_cylinders = 5
        cylinder_colors = ['red', 'green', 'blue', 'yellow', 'purple']

        # Define the size of the container and its zones.
        container_size = (0.25, 0.15, 0.05)
        zone_size = (0.05, 0.05, 0.01)  # Small zones to fit one cylinder each.

        # Add container.
        container_pose = self.get_random_pose(env, container_size)
        container_template = 'container/container-template.urdf'
        replace = {'DIM': container_size, 'HALF': (container_size[0] / 2, container_size[1] / 2, container_size[2] / 2)}
        container_urdf = self.fill_template(container_template, replace)
        env.add_object(container_urdf, container_pose, 'fixed')

        # Add cylinders and zones.
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i in range(n_cylinders):
            # Define the cylinder size (height varies).
            cylinder_height = 0.02 + i * 0.01  # Incremental height for each cylinder.
            cylinder_size = (0.02, 0.02, cylinder_height)

            # Add cylinder.
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'DIM': cylinder_size, 'HALF': (cylinder_size[0] / 2, cylinder_size[1] / 2, cylinder_size[2] / 2)}
            color = utils.COLORS[cylinder_colors[i]]
            replace['COLOR'] = color
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Add matching zone.
            zone_pose = (container_pose[0] + np.array([0, (i - 2) * 0.05, container_size[2]]), container_pose[1])
            zone_urdf = self.fill_template('zone/zone.urdf', {'COLOR': color})
            env.add_object(zone_urdf, zone_pose, 'fixed')

            # Define the language goal.
            language_goal = self.lang_template.format(color=cylinder_colors[i])

            # Add goal for each cylinder.
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / n_cylinders,
                          language_goal=language_goal)

# Instantiate the task.
task = ColorCoordinatedCylinderArrangement()