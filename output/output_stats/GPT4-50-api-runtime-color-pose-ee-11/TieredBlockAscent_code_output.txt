import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class TieredBlockAscent(Task):
    """Arrange blocks into a vertical ascending staircase formation on a standing zone."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is set to twice that number
        self.lang_template = "place the {color} block on the {position} step"
        self.task_completed_desc = "completed tiered block ascent."
        self.ee = Suction  # Use Suction end-effector to move blocks on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the colors and sizes for the three blocks
        block_colors = ['red', 'green', 'blue']
        block_sizes = [(0.05, 0.1, 0.02),  # Small block
                       (0.05, 0.1, 0.04),  # Medium block
                       (0.05, 0.1, 0.06)]  # Large block

        # Define the standing zone size and add it to the environment
        zone_size = (0.2, 0.15, 0.01)
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Add blocks and store their IDs
        block_ids = []
        for i in range(3):
            block_pose = self.get_random_pose(env, block_sizes[i])
            block_color = utils.COLORS[block_colors[i]]
            block_urdf = 'stacking/block.urdf'
            block_id = env.add_object(block_urdf, block_pose, color=block_color)
            block_ids.append(block_id)

        # Define the target poses for each block on the standing zone
        targ_poses = [
            (zone_pose[0], zone_pose[1]),  # Bottom step
            (utils.apply(zone_pose, (0, 0, block_sizes[2][2])), zone_pose[1]),  # Middle step
            (utils.apply(zone_pose, (0, 0, block_sizes[2][2] + block_sizes[1][2])), zone_pose[1])  # Top step
        ]

        # Add goals for each block
        for i in range(3):
            language_goal = self.lang_template.format(color=block_colors[i], position=['bottom', 'middle', 'top'][i])
            self.add_goal(objs=[block_ids[i]], matches=np.ones((1, 1)), targ_poses=[targ_poses[i]],
                          replace=False, rotations=True, metric='pose', params=None,
                          step_max_reward=1/3, language_goal=language_goal)

# Example usage:
# env = ...  # Assuming an environment 'env' is already created
# task = TieredBlockAscent()
# task.reset(env)