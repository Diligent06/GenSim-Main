import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionBallSorting(Task):
    """Sort a set of five colored balls into a corresponding colored zone on a pallet."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to sort 5 balls, so 10 steps should be sufficient
        self.ee = Suction  # Use suction end-effector to pick up the balls
        self.lang_template = "put the {color} ball in the {color} zone"
        self.task_completed_desc = "done sorting all the balls."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define colors for the balls and corresponding zones
        ball_colors = ['red', 'green', 'blue', 'yellow', 'purple']
        np.random.shuffle(ball_colors)  # Shuffle colors to randomize ball order

        # Add pallet
        pallet_size = (0.3, 0.3, 0.02)  # Size of the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Add balls and zones
        balls = []
        ball_size = (0.04, 0.04, 0.04)  # Size of the balls
        zone_size = (0.1, 0.1, 0)  # Size of the zones
        for i, color in enumerate(ball_colors):
            # Add ball
            ball_urdf = 'ball/ball-template.urdf'
            ball_pose = self.get_random_pose(env, ball_size)
            replace = {'COLOR': utils.COLORS[color]}
            ball_urdf = self.fill_template(ball_urdf, replace)
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append(ball_id)

            # Add zone
            zone_urdf = 'zone/zone.urdf'
            zone_pose = self.get_random_pose(env, zone_size)
            replace = {'COLOR': utils.COLORS[color]}
            zone_urdf = self.fill_template(zone_urdf, replace)
            env.add_object(zone_urdf, zone_pose, 'fixed')

            # Define the language goal
            language_goal = self.lang_template.format(color=color)

            # Add goal for each ball to be in the corresponding zone
            self.add_goal(objs=[ball_id], matches=np.ones((1, 1)), targ_poses=[zone_pose], replace=True,
                          rotations=False, metric='zone', params=[(zone_pose, zone_size)], step_max_reward=1/5,
                          language_goal=language_goal)

        # Set the task's max steps to be twice the number of goals
        self.max_steps = len(self.goals) * 2