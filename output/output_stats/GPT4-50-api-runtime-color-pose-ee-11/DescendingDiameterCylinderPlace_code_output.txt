import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class DescendingDiameterCylinderPlace(Task):
    """Arrange a set of four colored cylinders on a fixture, ordered by decreasing diameter from left to right,
    with each cylinder's color corresponding to a marked zone on the fixture."""

    def __init__(self):
        super().__init__()
        self.max_steps = 8  # We have 4 cylinders to place, so 8 steps should be sufficient
        self.lang_template = "place the {color} cylinder on the {color} mark"
        self.task_completed_desc = "done placing cylinders in descending order."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Add fixture.
        fixture_size = (0.3, 0.1, 0.05)  # Size of the fixture
        fixture_urdf = 'insertion/fixture.urdf'
        fixture_pose = self.get_random_pose(env, fixture_size)
        env.add_object(fixture_urdf, fixture_pose, 'fixed')

        # Define cylinder sizes and colors.
        cylinder_sizes = [
            (0.04, 0.04, 0.1),  # Largest cylinder
            (0.035, 0.035, 0.1),
            (0.03, 0.03, 0.1),
            (0.025, 0.025, 0.1)  # Smallest cylinder
        ]
        cylinder_colors = ['red', 'green', 'blue', 'yellow']
        cylinder_template = 'cylinder/cylinder-template.urdf'

        # Add cylinders.
        cylinders = []
        for i in range(4):
            size = cylinder_sizes[i]
            color_name = cylinder_colors[i]
            color = utils.COLORS[color_name]  # Get the RGB values for the color
            pose = self.get_random_pose(env, size)
            replace = {'SIZE': size, 'COLOR': color}
            # Replace the template URDF with the correct size and color
            urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append((cylinder_id, color_name))

        # Define target poses on the fixture for each cylinder.
        # The cylinders should be placed from left to right on the fixture in descending order of diameter.
        targ_poses = []
        for i in range(4):
            x_offset = -0.1 + 0.1 * i  # Offset each target pose from left to right
            targ_pose = utils.apply(fixture_pose, (x_offset, 0, 0.05))
            targ_poses.append(targ_pose)

        # Add goals for each cylinder.
        for i, (cylinder_id, color_name) in enumerate(cylinders):
            language_goal = self.lang_template.format(color=color_name)
            # Add goal for the current cylinder to be placed on the corresponding target pose
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[targ_poses[i]],
                          replace=True, rotations=True, metric='pose', params=None,
                          step_max_reward=1, language_goal=language_goal)