import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class MultiLevelCylinderArrangement(Task):
    """Arrange cylinders on a three-tiered stand with two cylinders on each level, 
    in descending order of size from the bottom to the top, matching the cylinder color 
    to the designated color zone on each tier."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have three goals, so max_steps is twice that number
        self.lang_template = "place the {color} cylinder on the {level} level of the stand"
        self.task_completed_desc = "done arranging the cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define cylinder colors and sizes for each level
        colors = ['red', 'green', 'blue', 'yellow', 'purple', 'orange']
        sizes = [(0.04, 0.08), (0.035, 0.07), (0.03, 0.06)]  # (radius, height) for each level

        # Add the three-tiered stand
        stand_size = (0.15, 0.15, 0.3)  # Size of the stand
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Add cylinders and define their target poses
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        level_poses = [(0, 0, 0.1), (0, 0, 0.2), (0, 0, 0.3)]  # Target z-coordinates for each level

        for i, size in enumerate(sizes):
            for j in range(2):  # Two cylinders per level
                # Random initial pose
                pose = self.get_random_pose(env, size)
                color_name = colors[i * 2 + j]
                color_rgb = utils.COLORS[color_name]

                # Fill in the cylinder URDF template
                replace = {'SIZE': size, 'COLOR': color_rgb}
                urdf = self.fill_template(cylinder_template, replace)

                # Add cylinder to the environment
                cylinder_id = env.add_object(urdf, pose)
                cylinders.append((cylinder_id, color_name))

                # Define the target pose on the stand for the cylinder
                level_pose = utils.apply(stand_pose, level_poses[i])
                targ_pose = (level_pose[0], level_pose[1])  # We only need the translation part

                # Define the language goal
                level_name = ['bottom', 'middle', 'top'][i]
                language_goal = self.lang_template.format(color=color_name, level=level_name)

                # Add the goal for the cylinder
                self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[targ_pose],
                              replace=False, rotations=True, metric='pose', params=None,
                              step_max_reward=1/3, language_goal=language_goal)

        # Set the task's language description
        self.lang_goals = [goal['language_goal'] for goal in self.goals]