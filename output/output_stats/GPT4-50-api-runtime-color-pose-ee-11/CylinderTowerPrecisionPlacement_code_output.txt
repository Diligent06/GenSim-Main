import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderTowerPrecisionPlacement(Task):
    """Create a tower by stacking three cylinders with different diameters on top of each other in the center of an upright-standing fixture, ensuring that each cylinder aligns perfectly within the fixture's boundaries."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 cylinders to place, so 6 steps should be sufficient
        self.lang_template = "stack the {color} cylinder on the {target}"
        self.task_completed_desc = "done stacking the cylinders."
        self.ee = Suction  # Using Suction end-effector to pick and place cylinders

    def reset(self, env):
        super().reset(env)

        # Add fixture.
        fixture_size = (0.15, 0.15, 0.15)  # Size of the fixture
        fixture_urdf = 'insertion/fixture.urdf'
        fixture_pose = self.get_random_pose(env, fixture_size)
        env.add_object(fixture_urdf, fixture_pose, 'fixed')

        # Define cylinder sizes (diameters and height).
        # The cylinders should fit within the fixture, so we choose decreasing diameters.
        cylinder_sizes = [
            (0.12, 0.12, 0.05),  # Largest cylinder
            (0.09, 0.09, 0.05),  # Medium cylinder
            (0.06, 0.06, 0.05)   # Smallest cylinder
        ]

        # Define colors for the cylinders.
        cylinder_colors = [
            utils.COLORS['red'],    # Color for the largest cylinder
            utils.COLORS['green'],  # Color for the medium cylinder
            utils.COLORS['blue']    # Color for the smallest cylinder
        ]

        # Add cylinders.
        cylinder_urdf_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i, size in enumerate(cylinder_sizes):
            # Get a random pose for the cylinder.
            pose = self.get_random_pose(env, size)
            replace = {'DIM': size, 'HALF': (size[0] / 2, size[1] / 2, size[2] / 2)}
            # Replace the template URDF with the actual size and color.
            cylinder_urdf = self.fill_template(cylinder_urdf_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, pose, color=cylinder_colors[i])
            cylinders.append(cylinder_id)

        # Define target poses for the cylinders within the fixture.
        # The target pose is the center of the fixture with the appropriate z-offset for each cylinder.
        z_offset = 0.025  # Half the height of the cylinders to place them on the surface
        target_poses = [
            (fixture_pose[0], fixture_pose[1]),  # Target pose for the largest cylinder
            (utils.apply(fixture_pose, (0, 0, z_offset)), fixture_pose[1]),  # Target pose for the medium cylinder
            (utils.apply(fixture_pose, (0, 0, z_offset * 2)), fixture_pose[1])  # Target pose for the smallest cylinder
        ]

        # Add goals for each cylinder.
        for i, cylinder_id in enumerate(cylinders):
            color_name = ['red', 'green', 'blue'][i]
            target = 'the center of the fixture'
            language_goal = self.lang_template.format(color=color_name, target=target)
            self.add_goal(
                objs=[cylinder_id],
                matches=np.int32([[1]]),
                targ_poses=[target_poses[i]],
                replace=False,
                rotations=True,
                metric='pose',
                params=None,
                step_max_reward=1 / len(cylinders),  # Equal reward for each cylinder placed
                language_goal=language_goal
            )