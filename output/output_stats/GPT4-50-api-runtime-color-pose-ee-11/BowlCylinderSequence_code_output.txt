import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlCylinderSequence(Task):
    """Arrange a sequence of differently-sized colored cylinders within matching colored bowls in order of size."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to have two goals, so max_steps is twice that number
        self.lang_template = "put the {color} cylinder in the {color} bowl"
        self.task_completed_desc = "done arranging cylinders in bowls."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the number of bowls and cylinders
        n_bowls = 2
        n_cylinders = n_bowls

        # Define the colors available for the bowls and cylinders
        colors = ['red', 'green', 'blue', 'orange', 'yellow', 'purple']

        # Add bowls with matching colors
        bowl_size = (0.12, 0.12, 0.06)  # Fixed size for all bowls
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_poses = []
        for i in range(n_bowls):
            color_name = colors[i]
            color_rgb = utils.COLORS[color_name]
            bowl_pose = self.get_random_pose(env, obj_size=bowl_size)
            env.add_object(bowl_urdf, bowl_pose, color=color_rgb, category='fixed')
            bowl_poses.append((bowl_pose, color_name))

        # Add cylinders with matching colors and varying sizes
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i in range(n_cylinders):
            # Define size based on order - smaller index, smaller cylinder
            size_factor = 0.8 + 0.1 * i
            cylinder_size = (0.04 * size_factor, 0.04 * size_factor, 0.08 * size_factor)
            color_name = colors[i]
            color_rgb = utils.COLORS[color_name]
            cylinder_pose = self.get_random_pose(env, obj_size=cylinder_size)
            replace = {'SIZE': cylinder_size, 'COLOR': color_rgb}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append((cylinder_id, color_name))

        # Define goals for each cylinder to be placed in the matching bowl
        for i, (cylinder_id, color_name) in enumerate(cylinders):
            matching_bowl_pose, _ = next(bowl_pose for bowl_pose, bowl_color in bowl_poses if bowl_color == color_name)
            language_goal = self.lang_template.format(color=color_name)
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[matching_bowl_pose],
                          replace=False, rotations=True, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

# Instantiate the task
task = BowlCylinderSequence()