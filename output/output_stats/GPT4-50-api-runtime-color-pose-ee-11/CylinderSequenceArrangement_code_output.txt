import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderSequenceArrangement(Task):
    """
    Arrange a series of five colored cylinders in ascending order of height on a designated zone,
    ensuring that each cylinder is standing upright and positioned within its individual marked outline.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to arrange 5 cylinders, so 10 steps should be sufficient.
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector.
        self.lang_template = "place the {color} cylinder in the {order} position"
        self.task_completed_desc = "done arranging the cylinders."

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders.
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = ['red', 'green', 'blue', 'yellow', 'purple']

        # Define the heights for the cylinders in ascending order.
        heights = [0.1, 0.12, 0.14, 0.16, 0.18]

        # Add the zone where the cylinders will be arranged.
        zone_size = (0.3, 0.15, 0)  # Size of the zone to place the cylinders.
        zone_pose = self.get_random_pose(env, zone_size)  # Random pose for the zone.
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Add cylinders with different colors and heights.
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i in range(5):
            # Generate a random pose for the cylinder.
            pose = self.get_random_pose(env, (0.04, 0.04, heights[i]))

            # Fill the cylinder URDF template with the specific color and size.
            replace = {
                'COLOR': utils.COLORS[color_names[i]],
                'SIZE': (0.04, 0.04, heights[i] / 2)  # Half height for URDF.
            }
            urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment.
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append(cylinder_id)

        # Define the target poses for each cylinder within the zone.
        # The cylinders should be placed in a line, spaced evenly.
        zone_x, zone_y, _ = zone_pose[0]
        spacing = 0.05  # Space between the centers of the cylinders.
        start_x = zone_x - zone_size[0] / 2 + spacing
        targ_poses = []
        for i in range(5):
            # Target pose is on the surface of the zone, spaced out, and upright (z-axis up).
            targ_x = start_x + i * spacing
            targ_poses.append(((targ_x, zone_y, heights[i] / 2), (0, 0, 0, 1)))  # No rotation needed.

        # Add goals for each cylinder.
        for i, cylinder_id in enumerate(cylinders):
            # Language goal describes the color and the order of the cylinder.
            language_goal = self.lang_template.format(color=color_names[i], order=utils.ordinal(i + 1))
            self.add_goal(
                objs=[cylinder_id],
                matches=np.ones((1, 1)),  # Each cylinder has a unique place.
                targ_poses=[targ_poses[i]],  # Target pose for this cylinder.
                replace=False,  # Each target pose is unique to a cylinder.
                rotations=False,  # Cylinders should remain upright, no rotation needed.
                metric='pose',  # We are using pose metric since we need precise placement.
                params=None,  # No additional parameters needed.
                step_max_reward=1 / 5,  # Equal reward for each cylinder, summing to 1.
                language_goal=language_goal
            )