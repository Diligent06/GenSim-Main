import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlCylinderSegregation(Task):
    """Arrange cylinders in bowls based on matching primary color tones."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Set to twice the number of goals
        self.lang_template = "put the {color} cylinder in a {color} bowl"
        self.task_completed_desc = "done segregating cylinders into bowls."
        self.ee = Suction  # Use Suction end-effector to move objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the number of bowls and cylinders
        n_bowls = 3
        n_cylinders = 5

        # Define the size of the bowls and cylinders
        bowl_size = (0.18, 0.18, 0.06)  # (x, y, z) dimensions
        cylinder_size = (0.05, 0.05, 0.15)  # (x, y, z) dimensions

        # Define the colors for the bowls and cylinders
        bowl_colors = ['red', 'green', 'blue']
        cylinder_colors = ['red', 'green', 'blue', 'yellow', 'purple']

        # Add bowls with different colors
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_poses = []
        for color in bowl_colors:
            bowl_pose = self.get_random_pose(env, obj_size=bowl_size)
            env.add_object(urdf=bowl_urdf, pose=bowl_pose, category='fixed', color=utils.COLORS[color])
            bowl_poses.append(bowl_pose)

        # Add cylinders with different colors
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for color in cylinder_colors:
            cylinder_pose = self.get_random_pose(env, obj_size=cylinder_size)
            replace = {'COLOR': utils.COLORS[color]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append((cylinder_id, color))

        # Define the goal for each cylinder
        for cylinder_id, color in cylinders:
            # Find the bowl with the matching color
            matching_bowl_pose = next(pose for pose, bowl_color in zip(bowl_poses, bowl_colors) if color == bowl_color)
            language_goal = self.lang_template.format(color=color)
            # Add goal for the cylinder to be in the matching colored bowl
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[matching_bowl_pose],
                          replace=False, rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

        # Note: The task assumes that each cylinder has a unique primary color that matches with one bowl.
        # Secondary color tones are not considered in this implementation.