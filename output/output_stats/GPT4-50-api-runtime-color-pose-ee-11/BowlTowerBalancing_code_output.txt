import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlTowerBalancing(Task):
    """
    Stack a series of 5 differently colored bowls in a vertical column on top of the stand,
    ensuring that the stack remains balanced and does not topple over for a set duration.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to stack 5 bowls, so 10 steps should be sufficient
        self.lang_template = "stack the {color} bowl on top of the {place} bowl"
        self.task_completed_desc = "done stacking bowls."
        self.ee = Suction  # Use Suction end-effector to lift bowls in Z axis

    def reset(self, env):
        super().reset(env)

        # Define bowl properties
        bowl_size = (0.15, 0.15, 0.06)  # Size of the bowl (x, y, z)
        bowl_urdf = 'bowl/bowl.urdf'  # URDF file for the bowl
        bowl_colors = ['red', 'green', 'blue', 'orange', 'yellow']  # Bowl colors

        # Add stand
        stand_size = (0.20, 0.20, 0.02)  # Size of the stand (x, y, z)
        stand_urdf = 'stacking/stand.urdf'  # URDF file for the stand
        stand_pose = self.get_random_pose(env, stand_size)  # Get a random pose for the stand
        env.add_object(stand_urdf, stand_pose, category='fixed')  # Add the stand to the environment

        # Initialize list to keep track of bowl objects and their poses
        bowls = []
        bowl_poses = []

        # Add bowls to the environment
        for i, color_name in enumerate(bowl_colors):
            color = utils.COLORS[color_name]  # Get the RGB value for the color
            bowl_pose = self.get_random_pose(env, bowl_size)  # Get a random pose for the bowl
            bowl_id = env.add_object(bowl_urdf, bowl_pose, color=color)  # Add the bowl to the environment
            bowls.append(bowl_id)  # Keep track of the bowl object ID
            bowl_poses.append(bowl_pose)  # Keep track of the bowl pose

        # Define the target poses for the bowls to be stacked on the stand
        # The target pose is directly above the center of the stand, with increasing z for each bowl
        targ_poses = []
        for i in range(len(bowls)):
            x, y, _ = stand_pose[0]  # Use the x, y position of the stand
            z = stand_pose[0][2] + stand_size[2] + (i + 1) * bowl_size[2]  # Increment z for each bowl
            targ_poses.append([(x, y, z), (0, 0, 0, 1)])  # Append the target pose with no rotation

        # Add goals for each bowl to be stacked
        for i in range(len(bowls)):
            # Language goal describes the current step in the stacking process
            if i == 0:
                place = "stand"
            else:
                place = bowl_colors[i - 1]
            language_goal = self.lang_template.format(color=bowl_colors[i], place=place)
            
            # Add the goal for the current bowl
            self.add_goal(objs=[bowls[i]], matches=np.ones((1, 1)), targ_poses=[targ_poses[i]],
                          replace=False, rotations=False, metric='pose', params=None,
                          step_max_reward=1 / len(bowls), language_goal=language_goal)

        # The task is set up with all bowls added and goals defined for stacking