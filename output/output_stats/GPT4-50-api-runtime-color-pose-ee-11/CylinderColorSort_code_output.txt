import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderColorSort(Task):
    """Pick up five colored cylinders and place them in a specific sequence into corresponding colored zones on the tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call self.add_goal 5 times, so we set max_steps to twice that number
        self.lang_template = "put the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done sorting all cylinders by color."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors and number of cylinders
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        n_cylinders = len(colors)

        # Add colored zones for each cylinder
        zone_size = (0.07, 0.07, 0)  # Zones are flat on the table
        zone_urdf = 'zone/zone.urdf'
        zone_poses = []
        for color in colors:
            zone_pose = self.get_random_pose(env, zone_size)
            env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[color])
            zone_poses.append(zone_pose)

        # Add cylinders
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for color in colors:
            # Generate a random pose for the cylinder
            cylinder_size = (0.05, 0.05, 0.15)  # Diameter and height of the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)

            # Fill in the template URDF with the cylinder's color
            replace = {'COLOR': utils.COLORS[color]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

        # Add goals for each cylinder
        for i, color in enumerate(colors):
            language_goal = self.lang_template.format(color=color)
            # The target pose is the pose of the corresponding colored zone
            self.add_goal(objs=[cylinders[i]], matches=np.int32([[1]]), targ_poses=[zone_poses[i]], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

        # The task is to sort the cylinders by color, so we have one goal per cylinder