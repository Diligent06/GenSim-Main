import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderBalanceOnBall(Task):
    """Balance a specified colored cylinder vertically on top of a matching colored ball."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect two main steps: picking up the cylinder and placing it on the ball, with some room for adjustments.
        self.lang_template = "balance the {color} cylinder on the {color} ball"
        self.task_completed_desc = "done balancing the cylinder on the ball."
        self.ee = Suction  # Suction is needed to pick up the cylinder in the Z axis.
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the color of the cylinder and ball.
        color_name = 'red'  # This can be changed to any color from the available colors.
        color_rgb = utils.COLORS[color_name]

        # Define the size of the ball and cylinder.
        ball_size = (0.1, 0.1, 0.1)  # Size of the ball (radius).
        cylinder_size = (0.05, 0.05, 0.2)  # Size of the cylinder (radius, radius, height).

        # Add the ball to the environment.
        ball_template = 'ball/ball-template.urdf'
        ball_pose = self.get_random_pose(env, ball_size)
        replace_ball = {'COLOR': color_rgb, 'SIZE': ball_size}
        ball_urdf = self.fill_template(ball_template, replace_ball)
        ball_id = env.add_object(ball_urdf, ball_pose, 'rigid')

        # Add the cylinder to the environment.
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_pose = self.get_random_pose(env, cylinder_size)
        replace_cylinder = {'COLOR': color_rgb, 'SIZE': cylinder_size}
        cylinder_urdf = self.fill_template(cylinder_template, replace_cylinder)
        cylinder_id = env.add_object(cylinder_urdf, cylinder_pose, 'rigid')

        # Define the target pose for the cylinder, which is on top of the ball.
        # The target pose is the same as the ball's pose but with an adjusted z-coordinate to account for the ball's and cylinder's height.
        target_pose = (ball_pose[0], ball_pose[1])  # Copy the ball's pose.
        target_pose[0][2] += ball_size[2] + cylinder_size[2] / 2  # Adjust the z-coordinate.

        # Define the language goal.
        language_goal = self.lang_template.format(color=color_name)

        # Add the goal for the task.
        self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                      rotations=False, metric='pose', params=None, step_max_reward=1, language_goal=language_goal)

# Instantiate the task.
task = CylinderBalanceOnBall()