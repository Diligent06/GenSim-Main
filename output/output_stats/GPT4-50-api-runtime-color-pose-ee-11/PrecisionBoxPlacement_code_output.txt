import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionBoxPlacement(Task):
    """Place a set of three boxes of increasing sizes precisely within three correspondingly sized zones marked on the tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 goals, so max_steps is set to twice the number of goals
        self.ee = Suction  # Use Suction end-effector to move boxes on the Z axis
        self.lang_template = "place the {color} box in the {color} zone"
        self.task_completed_desc = "done placing all boxes."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the sizes for the boxes and zones
        box_sizes = [(0.05, 0.05, 0.05), (0.07, 0.07, 0.07), (0.09, 0.09, 0.09)]
        zone_sizes = [(0.06, 0.06, 0), (0.08, 0.08, 0), (0.1, 0.1, 0)]

        # Define colors for the boxes and zones
        box_colors = ['red', 'green', 'blue']
        zone_colors = ['red', 'green', 'blue']

        # Add zones and boxes to the environment
        boxes = []
        for i in range(3):
            # Add zone
            zone_pose = self.get_random_pose(env, zone_sizes[i])
            env.add_object('zone/zone.urdf', zone_pose, 'fixed', color=utils.COLORS[zone_colors[i]])

            # Add box
            box_template = 'box/box-template.urdf'
            box_pose = self.get_random_pose(env, box_sizes[i])
            replace = {'SIZE': box_sizes[i]}
            box_urdf = self.fill_template(box_template, replace)
            box_id = env.add_object(box_urdf, box_pose, 'rigid', color=utils.COLORS[box_colors[i]])
            boxes.append(box_id)

            # Add goal for each box
            language_goal = self.lang_template.format(color=box_colors[i])
            self.add_goal(objs=[box_id], matches=np.int32([[1]]), targ_poses=[zone_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1,
                          language_goal=language_goal)

        # The task is to place each box in the correspondingly colored zone
        # The boxes are placed in increasing order of size, with the smallest box being the most challenging