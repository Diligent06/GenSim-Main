import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionPalletCylinderArrangement(Task):
    """Arrange varying-sized colored cylinders on specific locations of a pallet to form a predefined pattern."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we have 5 cylinders to place, 2 steps per cylinder
        self.lang_template = "place the {color} cylinder on the {location} location on the pallet"
        self.task_completed_desc = "done arranging the cylinders."
        self.ee = Suction  # Use Suction end-effector for vertical movement

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and their sizes
        n_cylinders = 5
        cylinder_sizes = [
            (0.02, 0.02, 0.08),  # Small cylinder
            (0.03, 0.03, 0.12),  # Medium cylinder
            (0.04, 0.04, 0.16),  # Large cylinder
            (0.05, 0.05, 0.20),  # Extra large cylinder
            (0.06, 0.06, 0.24)   # Super large cylinder
        ]

        # Define cylinder colors
        cylinder_colors = [
            utils.COLORS['red'],
            utils.COLORS['green'],
            utils.COLORS['blue'],
            utils.COLORS['yellow'],
            utils.COLORS['purple']
        ]

        # Add pallet
        pallet_size = (0.5, 0.5, 0.1)  # Size of the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Add cylinders
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i in range(n_cylinders):
            size = cylinder_sizes[i]
            color = cylinder_colors[i]
            pose = self.get_random_pose(env, size)
            replace = {'SIZE': size, 'COLOR': color}
            urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append((cylinder_id, size, color))

        # Define target locations on the pallet for each cylinder
        target_locations = [
            (0.1, 0.1, 0.05),  # Target location for small cylinder
            (0.2, 0.2, 0.06),  # Target location for medium cylinder
            (0.3, 0.3, 0.08),  # Target location for large cylinder
            (0.4, 0.4, 0.10),  # Target location for extra large cylinder
            (0.5, 0.5, 0.12)   # Target location for super large cylinder
        ]

        # Add goals for each cylinder
        for i, (cylinder_id, size, color) in enumerate(cylinders):
            target_location = target_locations[i]
            # Convert target location to pose on the pallet
            target_pose = utils.apply(pallet_pose, target_location)
            # Create language goal
            color_name = [name for name, clr in utils.COLORS.items() if clr == color][0]
            language_goal = self.lang_template.format(color=color_name, location=f"{i+1}")
            # Add goal
            self.add_goal(
                objs=[cylinder_id],
                matches=np.int32([[1]]),
                targ_poses=[target_pose],
                replace=False,
                rotations=False,
                metric='pose',
                params=None,
                step_max_reward=1 / n_cylinders,
                language_goal=language_goal
            )