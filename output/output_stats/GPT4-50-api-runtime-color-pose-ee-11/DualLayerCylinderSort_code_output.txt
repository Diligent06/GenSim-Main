import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class DualLayerCylinderSort(Task):
    """Sort a set of colored cylinders by placing them on two distinct pallet layers, organizing them by color."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have 4 cylinders to sort, 2 actions per cylinder
        self.lang_template = "place the {color} cylinder on the {layer} layer of the pallet"
        self.task_completed_desc = "done sorting cylinders."
        self.ee = Suction  # Use suction end-effector to pick and place cylinders

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and pallet slots
        n_cylinders = 4
        n_slots_per_layer = 2  # Two slots per layer on the pallet

        # Define cylinder size
        cylinder_size = (0.05, 0.05, 0.1)  # Diameter, Diameter, Height

        # Add pallet with two layers
        pallet_size = (0.3, 0.2, 0.02)  # Width, Depth, Height (per layer)
        pallet_urdf = 'pallet/pallet.urdf'
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object(pallet_urdf, pallet_pose, category='fixed')

        # Define colors for the cylinders
        colors = ['red', 'green', 'blue', 'yellow']
        color_rgb = [utils.COLORS[color] for color in colors]

        # Add cylinders
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i in range(n_cylinders):
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': color_rgb[i]}
            # IMPORTANT: REPLACE THE TEMPLATE URDF
            urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append((cylinder_id, colors[i]))

        # Define target poses for each cylinder on the pallet layers
        layer_heights = [0.02, 0.14]  # Heights for the bottom and top layers of the pallet
        target_poses = []
        for layer_idx, layer_height in enumerate(layer_heights):
            for slot_idx in range(n_slots_per_layer):
                x_offset = (slot_idx - 0.5) * (pallet_size[0] / n_slots_per_layer)
                target_pose = (pallet_pose[0][0] + x_offset, pallet_pose[0][1], layer_height), pallet_pose[1]
                target_poses.append(target_pose)

        # Assign goals for each cylinder
        for idx, (cylinder_id, color) in enumerate(cylinders):
            # Determine the target layer based on the cylinder index
            layer = 'bottom' if idx < n_slots_per_layer else 'top'
            # Calculate the step max reward based on the number of cylinders
            step_max_reward = 1 / n_cylinders
            # Create the language goal
            language_goal = self.lang_template.format(color=color, layer=layer)
            # Add the goal for the cylinder to be placed in the correct slot on the correct layer
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_poses[idx]],
                          replace=False, rotations=True, metric='pose', params=None,
                          step_max_reward=step_max_reward, language_goal=language_goal)