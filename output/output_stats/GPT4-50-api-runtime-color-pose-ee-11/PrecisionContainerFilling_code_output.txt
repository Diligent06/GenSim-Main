import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionContainerFilling(Task):
    """Sequentially place three different colored balls into a transparent container without overflowing, ensuring the container remains balanced on the table."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 balls to place, so 6 steps (2x the number of add_goal calls)
        self.lang_template = "put the {color} ball in the transparent container"
        self.task_completed_desc = "done filling the container."
        self.ee = Suction  # We need to move balls on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors for the balls
        ball_colors = ['red', 'green', 'blue']
        ball_color_names = ['red', 'green', 'blue']

        # Add transparent container
        container_size = (0.1, 0.1, 0.15)  # LxWxH
        container_pose = self.get_random_pose(env, container_size)
        container_template = 'container/container-template.urdf'
        replace = {'DIM': container_size, 'HALF': (container_size[0] / 2, container_size[1] / 2, container_size[2] / 2)}
        container_urdf = self.fill_template(container_template, replace)
        env.add_object(container_urdf, container_pose, 'fixed')

        # Add balls
        ball_size = (0.04, 0.04, 0.04)  # Diameter of the ball
        ball_template = 'ball/ball-template.urdf'
        ball_ids = []
        for i, color in enumerate(ball_colors):
            ball_pose = self.get_random_pose(env, ball_size)
            replace = {'COLOR': utils.COLORS[color]}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose)
            ball_ids.append(ball_id)

            # Define the language goal for each ball
            language_goal = self.lang_template.format(color=ball_color_names[i])

            # Add goal for each ball
            self.add_goal(objs=[ball_id], matches=np.int32([[1]]), targ_poses=[container_pose], replace=False,
                          rotations=False, metric='zone', params=[(container_pose, container_size)], step_max_reward=1/3,
                          language_goal=language_goal)

        # The task is to place the balls into the container sequentially
        # The container should not overflow and should remain balanced