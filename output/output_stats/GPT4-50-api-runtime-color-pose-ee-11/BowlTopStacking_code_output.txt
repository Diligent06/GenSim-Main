import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlTopStacking(Task):
    """Stack a series of three colored balls on the inverted top of a bowl, ensuring that each ball stays balanced and does not roll off while achieving a descending size order from bottom to top."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is twice the number of goals
        self.lang_template = "stack the {color} ball on top of the {place}"
        self.task_completed_desc = "done stacking balls on the bowl."
        self.ee = Suction  # Using Suction end-effector to pick and place balls
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Add bowl - fixed object
        bowl_size = (0.18, 0.18, 0.06)  # Size of the bowl
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_pose = self.get_random_pose(env, bowl_size)
        env.add_object(bowl_urdf, bowl_pose, 'fixed')

        # Invert the bowl for stacking on top
        inverted_bowl_pose = (bowl_pose[0], bowl_pose[1])
        inverted_bowl_pose[0][2] += bowl_size[2]  # Adjust z-coordinate to account for bowl height

        # Define ball sizes in descending order
        ball_sizes = [(0.06, 0.06, 0.06), (0.05, 0.05, 0.05), (0.04, 0.04, 0.04)]
        ball_colors = ['red', 'green', 'blue']  # Colors of the balls
        ball_template = 'ball/ball-template.urdf'

        # Add balls - movable objects
        balls = []
        for i in range(3):
            # Generate random color for each ball
            color = utils.COLORS[ball_colors[i]]
            # Generate random pose for each ball
            ball_pose = self.get_random_pose(env, ball_sizes[i])
            # IMPORTANT: REPLACE THE TEMPLATE URDF with `fill_template`
            replace = {'COLOR': color, 'SIZE': ball_sizes[i]}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append(ball_id)

        # Add goals for stacking balls on the inverted bowl top
        for i in range(3):
            # Language goal describes the action to be performed
            language_goal = self.lang_template.format(color=ball_colors[i], place="inverted bowl top")
            # Target pose is the pose of the inverted bowl top with an offset for each ball
            target_pose = list(inverted_bowl_pose)
            target_pose[0] = list(target_pose[0])
            target_pose[0][2] += sum([size[2] for size in ball_sizes[:i+1]])  # Stack balls on top of each other
            target_pose = (tuple(target_pose[0]), target_pose[1])
            # Add goal for each ball
            self.add_goal(objs=[balls[i]], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/3, language_goal=language_goal)

        # The task is set up with three balls and a bowl, with goals to stack the balls in descending size order.