import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionContainerPlacement(Task):
    """Pick up a red ball and place it into a small blue bowl within a marked zone, avoiding green cylinders."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to add two goals, so max_steps is twice that number
        self.lang_template = "place the red ball into the blue bowl inside the zone"
        self.task_completed_desc = "done placing the red ball into the bowl."
        self.ee = Suction  # We need to move the ball in the Z axis, so we use the Suction end-effector
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the red ball
        ball_size = (0.04, 0.04, 0.04)  # Diameter of the ball
        ball_color = utils.COLORS['red']  # RGB color for red
        ball_pose = self.get_random_pose(env, ball_size)  # Random initial pose for the ball
        ball_template = 'ball/ball-template.urdf'
        ball_replace = {'COLOR': ball_color, 'SIZE': ball_size}
        ball_urdf = self.fill_template(ball_template, ball_replace)
        ball_id = env.add_object(ball_urdf, ball_pose)

        # Define the small blue bowl
        bowl_size = (0.1, 0.1, 0.05)  # Size of the bowl
        bowl_color = utils.COLORS['blue']  # RGB color for blue
        bowl_pose = self.get_random_pose(env, bowl_size)  # Random initial pose for the bowl
        bowl_urdf = 'bowl/bowl.urdf'
        env.add_object(bowl_urdf, bowl_pose, color=bowl_color)

        # Define the marked zone
        zone_size = (0.3, 0.3, 0)  # Size of the zone
        zone_pose = self.get_random_pose(env, zone_size)  # Random initial pose for the zone
        zone_urdf = 'zone/zone.urdf'
        env.add_object(zone_urdf, zone_pose, 'fixed')

        # Define the green cylinders as obstacles
        cylinder_template = 'cylinder/cylinder-template.urdf'
        line_template = 'line/single-green-line-template.urdf'
        for _ in range(5):  # Create a line of 5 green cylinders
            cylinder_size = (0.02, 0.02, 0.1)  # Size of the cylinder
            cylinder_color = utils.COLORS['green']  # RGB color for green
            cylinder_pose = self.get_random_pose(env, cylinder_size)  # Random initial pose for the cylinder
            cylinder_replace = {'COLOR': cylinder_color, 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_template, cylinder_replace)
            env.add_object(cylinder_urdf, cylinder_pose)

        # Add a line of green cylinders as a visual guide
        line_pose = self.get_random_pose(env, (0.5, 0.02, 0.1))  # Size of the line
        line_replace = {'COLOR': utils.COLORS['green']}
        line_urdf = self.fill_template(line_template, line_replace)
        env.add_object(line_urdf, line_pose, 'fixed')

        # Add the first goal: pick up the red ball
        self.add_goal(objs=[ball_id], matches=np.ones((1, 1)), targ_poses=[ball_pose], replace=False,
                      rotations=False, metric='pose', params=None, step_max_reward=0.5,
                      language_goal=self.lang_template)

        # Add the second goal: place the red ball into the blue bowl inside the zone
        # The target pose is the pose of the bowl, but we only need the position (x, y, z)
        self.add_goal(objs=[ball_id], matches=np.ones((1, 1)), targ_poses=[(bowl_pose[0], None)], replace=False,
                      rotations=False, metric='pose', params=None, step_max_reward=0.5,
                      language_goal=self.lang_template)