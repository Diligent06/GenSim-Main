import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionCylinderStacking(Task):
    """Stack five cylinders of varying colors on a designated zone, with each cylinder having a slightly smaller diameter than the one below it, creating a stable, tapered tower."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We will have 5 goals, so 10 steps should be sufficient
        self.lang_template = "stack the {color} cylinder on top"
        self.task_completed_desc = "done stacking cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the size and color of each cylinder
        cylinder_sizes = [
            (0.04, 0.04, 0.08),  # Largest cylinder
            (0.035, 0.035, 0.08),
            (0.03, 0.03, 0.08),
            (0.025, 0.025, 0.08),
            (0.02, 0.02, 0.08)   # Smallest cylinder
        ]
        cylinder_colors = ['red', 'blue', 'green', 'yellow', 'purple']

        # Add the target zone where cylinders will be stacked
        zone_size = (0.15, 0.15, 0)  # Flat zone
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Add cylinders to the environment
        cylinders = []
        template = 'cylinder/cylinder-template.urdf'
        for i, size in enumerate(cylinder_sizes):
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, size)
            # Get the color for the cylinder
            color = utils.COLORS[cylinder_colors[i]]
            # Fill the URDF template with size and color
            replace = {'SIZE': size, 'COLOR': color}
            # Generate the URDF for the cylinder
            urdf = self.fill_template(template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append(cylinder_id)

        # Add goals for stacking each cylinder on top of the previous one
        for i, cylinder_id in enumerate(cylinders):
            # The target pose is on top of the last cylinder (or the zone for the first one)
            if i == 0:
                targ_pose = zone_pose
            else:
                # Get the pose of the cylinder below
                below_pose = env.get_pose(cylinders[i-1])
                # Calculate the target pose on top of the cylinder below
                targ_pose = (below_pose[0], below_pose[1])
                # Increment the z-coordinate for the height of the cylinder
                targ_pose[0][2] += cylinder_sizes[i-1][2]

            # Define the language goal
            language_goal = self.lang_template.format(color=cylinder_colors[i])
            # Add the goal for the current cylinder
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[targ_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/5, language_goal=language_goal)

        # Set the task description
        self.lang_goals = [self.lang_template.format(color=color) for color in cylinder_colors]