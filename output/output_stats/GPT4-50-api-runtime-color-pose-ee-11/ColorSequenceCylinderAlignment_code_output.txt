import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorSequenceCylinderAlignment(Task):
    """
    Align five cylinders of different colors in a specific sequence on a single green line,
    ensuring each cylinder is placed upright and centered on the line.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to align 5 cylinders, so 10 steps should be sufficient.
        self.lang_template = "align the {color} cylinder on the green line"
        self.task_completed_desc = "done aligning cylinders."
        self.ee = Suction  # We need to move cylinders on the Z axis, so Suction is appropriate.

    def reset(self, env):
        super().reset(env)

        # Define the sequence of colors for the cylinders.
        color_sequence = ['red', 'orange', 'yellow', 'green', 'blue']
        color_names = ['red', 'orange', 'yellow', 'green', 'blue']

        # Add the single green line where cylinders will be aligned.
        line_size = (0.6, 0.05, 0.005)  # Size of the line (x, y, z)
        line_pose = self.get_random_pose(env, line_size)  # Get a random pose for the line within the workspace bounds.
        line_urdf = 'line/single-green-line-template.urdf'
        env.add_object(line_urdf, line_pose, 'fixed')  # Add the line to the environment as a fixed object.

        # Add cylinders.
        cylinder_size = (0.02, 0.02, 0.1)  # Diameter and height of the cylinder.
        cylinder_urdf = 'cylinder/cylinder-template.urdf'
        cylinder_poses = []  # Store initial poses of cylinders to use as target poses.

        for i, color_name in enumerate(color_sequence):
            # Get a random pose for the cylinder within the workspace bounds.
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_poses.append(cylinder_pose)

            # Get the RGB values for the cylinder's color.
            color_rgb = utils.COLORS[color_name]

            # Replace the placeholders in the URDF template with the actual values.
            replace = {
                'COLOR': color_rgb,
                'SIZE': cylinder_size
            }
            # Generate the URDF for the cylinder with the specified color and size.
            urdf = self.fill_template(cylinder_urdf, replace)

            # Add the cylinder to the environment.
            env.add_object(urdf, cylinder_pose)

            # Define the language goal for aligning this cylinder.
            language_goal = self.lang_template.format(color=color_names[i])

            # The target pose for each cylinder is on the line, spaced evenly.
            # We only need to specify the x and y coordinates, z will be the same as the line's z plus the cylinder's height / 2.
            target_x = line_pose[0][0] - line_size[0] / 2 + (i + 0.5) * (line_size[0] / len(color_sequence))
            target_y = line_pose[0][1]
            target_z = line_pose[0][2] + cylinder_size[2] / 2
            target_pose = [(target_x, target_y, target_z), (0, 0, 0, 1)]  # We don't need to rotate the cylinders.

            # Add the goal for aligning this cylinder.
            self.add_goal(objs=[i], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / len(color_sequence),
                          language_goal=language_goal)

        # Set the description for the task completion.
        self.task_completed_desc = "All cylinders aligned in the correct sequence."