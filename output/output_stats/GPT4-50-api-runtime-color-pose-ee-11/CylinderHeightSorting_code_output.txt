import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderHeightSorting(Task):
    """Sort cylinders of varying heights into ascending order on a marked line."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to sort 5 cylinders, so 10 steps should be sufficient.
        self.lang_template = "place the {height} cylinder on the line at the {position} position"
        self.task_completed_desc = "done sorting cylinders by height."
        self.ee = Suction  # Use suction end-effector to pick and place cylinders vertically.

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and their possible heights.
        n_cylinders = 5
        heights = np.linspace(0.05, 0.15, n_cylinders)  # Heights range from 0.05 to 0.15 meters.

        # Shuffle the heights to randomize the order of cylinders.
        np.random.shuffle(heights)

        # Add the line where cylinders will be sorted.
        line_size = (0.6, 0.01, 0.001)  # Length, width, and height of the line.
        line_pose = self.get_random_pose(env, line_size)
        line_template = 'line/single-green-line-template.urdf'
        replace = {'DIM': line_size}
        line_urdf = self.fill_template(line_template, replace)
        env.add_object(line_urdf, line_pose, 'fixed')

        # Add cylinders with varying heights.
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_urdf = self.fill_template(cylinder_template, {'DIM': (0.02, 0.02, 0.1)})  # Base size for template.
        cylinder_poses = []
        for i in range(n_cylinders):
            # Scale the cylinder to the desired height.
            scale = [1, 1, heights[i] / 0.1]
            replace = {'SCALE': scale, 'COLOR': utils.COLORS['silver']}
            urdf = self.fill_template(cylinder_template, replace)

            # Get a random pose for the cylinder.
            pose = self.get_random_pose(env, (0.02, 0.02, heights[i]))
            cylinder_id = env.add_object(urdf, pose)
            cylinder_poses.append((cylinder_id, pose))

        # Sort the cylinders by height to determine their target positions.
        sorted_cylinders = sorted(cylinder_poses, key=lambda x: x[1][0][2])

        # Define the target positions along the line.
        line_x_positions = np.linspace(line_pose[0][0] - line_size[0] / 2,
                                       line_pose[0][0] + line_size[0] / 2,
                                       n_cylinders)

        # Add goals for each cylinder.
        for i, (cylinder_id, _) in enumerate(sorted_cylinders):
            target_pose = [(line_x_positions[i], line_pose[0][1], line_pose[0][2]), line_pose[1]]
            height_descriptor = "tallest" if i == n_cylinders - 1 else "shortest" if i == 0 else "middle-height"
            position_descriptor = "leftmost" if i == 0 else "rightmost" if i == n_cylinders - 1 else f"{i+1}th"
            language_goal = self.lang_template.format(height=height_descriptor, position=position_descriptor)

            # Add the goal with a matching target pose for the cylinder.
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / n_cylinders,
                          language_goal=language_goal)