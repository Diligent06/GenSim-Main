import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorGradientTower(Task):
    """Build a color-gradient tower by stacking five uniquely colored cylinders,
    ranging from dark to light shades, in ascending order of brightness on a designated zone."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to stack 5 cylinders, so 10 steps should be sufficient
        self.lang_template = "stack the {color} cylinder on the tower"
        self.task_completed_desc = "done building the color-gradient tower."
        self.ee = Suction  # Use suction end-effector to pick and place cylinders

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders in ascending order of brightness
        color_names = ['black', 'blue', 'green', 'yellow', 'white']
        colors = [utils.COLORS[name] for name in color_names]

        # Add the zone where the tower will be built
        zone_size = (0.15, 0.15, 0)  # Define the size of the zone
        zone_pose = self.get_random_pose(env, zone_size)  # Get a random pose for the zone within the workspace
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')  # Add the zone to the environment

        # Add cylinders with gradient colors
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.04, 0.04, 0.08)  # Define the size of the cylinders (diameter, diameter, height)
        cylinder_scale = [0.04, 0.04, 0.08]  # Scale for the URDF model

        # Initialize an empty list to store the object IDs of the cylinders
        cylinder_ids = []

        # Add cylinders to the environment
        for i, color in enumerate(colors):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Replace the placeholders in the URDF template with the actual values
            replace = {'FNAME': ('cylinder/cylinder.obj',), 'SCALE': cylinder_scale, 'COLOR': color}
            # Fill the URDF template to create a URDF for the cylinder
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment and store its ID
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinder_ids.append(cylinder_id)

        # Define the target poses for the cylinders on the zone
        # The cylinders should be stacked on top of each other, so we increment the z-coordinate
        targ_poses = []
        for i in range(len(cylinder_ids)):
            x, y, _ = zone_pose[0]  # Use the x, y coordinates of the zone
            z = 0.04 + 0.08 * i  # Increment the z-coordinate for each cylinder
            targ_poses.append(((x, y, z), (0, 0, 0, 1)))  # Append the target pose with no rotation

        # Add goals for each cylinder
        for i, cylinder_id in enumerate(cylinder_ids):
            # Define the language goal for the current cylinder
            language_goal = self.lang_template.format(color=color_names[i])
            # Add the goal for the current cylinder
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[targ_poses[i]],
                          replace=False, rotations=False, metric='pose', params=None,
                          step_max_reward=1 / len(cylinder_ids), language_goal=language_goal)