import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderBowlNesting(Task):
    """Sequentially nest a series of three differently colored cylinders into three correspondingly colored bowls without the bowls tipping over, ensuring each cylinder fits perfectly within its matching bowl."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 goals, so max_steps is set to twice the number of goals
        self.lang_template = "nest the {color} cylinder in the {color} bowl"
        self.task_completed_desc = "done nesting cylinders in bowls."
        self.ee = Suction  # Using Suction end-effector to lift cylinders on the Z axis
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define colors for the cylinders and bowls
        colors = ['red', 'green', 'blue']
        color_names = ['red', 'green', 'blue']

        # Add bowls and cylinders
        bowls = []
        cylinders = []
        for color_name in color_names:
            # Bowl properties
            bowl_size = (0.12, 0.12, 0.06)  # x, y, z dimensions for the bowl
            bowl_color = utils.COLORS[color_name]  # RGB color value
            bowl_pose = self.get_random_pose(env, bowl_size)  # Random pose for the bowl
            bowl_urdf = 'bowl/bowl.urdf'
            bowl_id = env.add_object(bowl_urdf, bowl_pose, 'fixed', color=bowl_color)
            bowls.append((bowl_id, bowl_pose))

            # Cylinder properties
            cylinder_size = (0.05, 0.05, 0.1)  # x, y, z dimensions for the cylinder
            cylinder_color = bowl_color  # Same color as the corresponding bowl
            cylinder_pose = self.get_random_pose(env, cylinder_size)  # Random pose for the cylinder
            cylinder_template = 'cylinder/cylinder-template.urdf'
            replace = {'COLOR': cylinder_color}
            # IMPORTANT: REPLACE THE TEMPLATE URDF with `fill_template`
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

        # Add goals for each cylinder-bowl pair
        for i, (cylinder_id, (bowl_id, bowl_pose)) in enumerate(zip(cylinders, bowls)):
            # Language goal for the current cylinder-bowl pair
            language_goal = self.lang_template.format(color=color_names[i])
            # IMPORTANT: Specify the target pose for the cylinder to be nested in the bowl
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[bowl_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / len(cylinders),
                          language_goal=language_goal)

        # Task description
        self.goals[-1]['language_goal'] = self.task_completed_desc