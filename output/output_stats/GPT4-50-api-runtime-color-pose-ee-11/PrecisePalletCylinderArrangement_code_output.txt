import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisePalletCylinderArrangement(Task):
    """Place five different-colored cylinders on designated colored spots on the surface of a pallet."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to place 5 cylinders, so max_steps is set to twice that number
        self.lang_template = "place the {color} cylinder on the {color} spot"
        self.task_completed_desc = "all cylinders are placed on the correct spots."
        self.ee = Suction  # Using Suction end-effector to pick and place cylinders

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and their colors
        n_cylinders = 5
        cylinder_colors = ['red', 'blue', 'green', 'yellow', 'purple']

        # Add pallet
        pallet_size = (0.3, 0.3, 0.05)  # Size of the pallet (x, y, z)
        pallet_pose = self.get_random_pose(env, pallet_size)  # Get a random pose for the pallet
        pallet_urdf = 'pallet/pallet.urdf'
        env.add_object(pallet_urdf, pallet_pose, 'fixed')  # Add the pallet as a fixed object

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.05, 0.05, 0.1)  # Size of the cylinder (radius, radius, height)
        cylinder_poses = []  # Store initial poses of cylinders to use as target poses
        for i in range(n_cylinders):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_poses.append(cylinder_pose)

            # Fill in the cylinder URDF template with the specific color and size
            color = utils.COLORS[cylinder_colors[i]]
            replace = {'COLOR': color, 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            env.add_object(cylinder_urdf, cylinder_pose)

        # Define target spots on the pallet for each cylinder
        # Spots are defined relative to the pallet's pose
        spot_positions = [
            (pallet_pose[0][0] - 0.1, pallet_pose[0][1] - 0.1, pallet_pose[0][2]),
            (pallet_pose[0][0] - 0.1, pallet_pose[0][1] + 0.1, pallet_pose[0][2]),
            (pallet_pose[0][0] + 0.1, pallet_pose[0][1] - 0.1, pallet_pose[0][2]),
            (pallet_pose[0][0] + 0.1, pallet_pose[0][1] + 0.1, pallet_pose[0][2]),
            (pallet_pose[0][0], pallet_pose[0][1], pallet_pose[0][2])
        ]

        # Add goals for each cylinder
        for i in range(n_cylinders):
            # The target pose is the spot position with the same orientation as the initial cylinder pose
            target_pose = (spot_positions[i], cylinder_poses[i][1])
            language_goal = self.lang_template.format(color=cylinder_colors[i])
            self.add_goal(objs=[i], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=True,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

        # The task is set up with cylinders and target spots on the pallet