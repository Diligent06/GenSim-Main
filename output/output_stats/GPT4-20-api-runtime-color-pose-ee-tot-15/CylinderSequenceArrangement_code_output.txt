import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderSequenceArrangement(Task):
    """Arrange a sequence of differently colored cylinders by height in ascending order on a designated stand."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to arrange 5 cylinders, so 10 steps should be sufficient
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.lang_template = "place the {color} cylinder on the stand in the correct order"
        self.task_completed_desc = "done arranging the cylinders."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the colors and sizes for the cylinders
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        heights = [0.08, 0.10, 0.12, 0.14, 0.16]  # Heights for the cylinders in ascending order

        # Add the stand where cylinders will be placed
        stand_size = (0.05, 0.15, 0.005)  # Size of the stand
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Shuffle the colors and heights to randomize the starting arrangement
        np.random.shuffle(colors)
        np.random.shuffle(heights)

        # Add cylinders with random colors and heights
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.02, 0.02, 0.02)  # Base size for the cylinder
        cylinders = []
        for i in range(5):
            # Scale the z-dimension according to the height
            scale = [1, 1, heights[i] / cylinder_size[2]]
            color = utils.COLORS[colors[i]]
            pose = self.get_random_pose(env, cylinder_size)
            replace = {'FNAME': ('cylinder/cylinder.obj',), 'SCALE': scale, 'COLOR': color}
            urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append((cylinder_id, heights[i], colors[i]))

        # Sort the cylinders by height to define the target poses
        cylinders.sort(key=lambda x: x[1])

        # Define the target poses on the stand, spaced out evenly
        stand_x, stand_y, _ = stand_pose[0]
        target_x_positions = np.linspace(stand_x - 0.05, stand_x + 0.05, 5)
        target_poses = [((x, stand_y, stand_size[2] / 2), stand_pose[1]) for x in target_x_positions]

        # Add goals for each cylinder to be placed in the correct order
        for i, (cylinder_id, _, color) in enumerate(cylinders):
            language_goal = self.lang_template.format(color=color)
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_poses[i]],
                          replace=False, rotations=True, metric='pose', params=None,
                          step_max_reward=1 / 5, language_goal=language_goal)

# Instantiate the task
task = CylinderSequenceArrangement()