import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderHeightSorting(Task):
    """
    Sort a set of five colored cylinders by height, placing them in ascending order from shortest to tallest
    on a series of marked zones on the tabletop.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to sort 5 cylinders, so 10 steps should be sufficient.
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector.
        self.lang_template = "place the {color} cylinder in the {order} zone"
        self.task_completed_desc = "done sorting cylinders by height."

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones.
        n_cylinders = 5
        n_zones = n_cylinders

        # Define cylinder heights and sort them in ascending order.
        heights = np.linspace(0.05, 0.15, n_cylinders)
        np.random.shuffle(heights)  # Shuffle heights to randomize initial cylinder heights.

        # Define colors for the cylinders.
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        np.random.shuffle(colors)  # Shuffle colors to randomize initial cylinder colors.

        # Add zones for placing cylinders.
        zone_size = (0.05, 0.05, 0)  # Zones are flat squares on the table.
        zone_urdf = 'zone/zone.urdf'
        zone_poses = []
        for i in range(n_zones):
            zone_pose = self.get_random_pose(env, zone_size)
            env.add_object(zone_urdf, zone_pose, 'fixed')
            zone_poses.append(zone_pose)

        # Add cylinders with varying heights.
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i in range(n_cylinders):
            # Generate a random pose for the cylinder.
            pose = self.get_random_pose(env, (0.02, 0.02, heights[i]))

            # Set the color for the cylinder.
            color = utils.COLORS[colors[i]]

            # Replace the template URDF with the specific height and color for this cylinder.
            replace = {'HEIGHT': heights[i], 'COLOR': color}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment.
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append((cylinder_id, heights[i]))

        # Sort the cylinders by height to determine the order of placement.
        cylinders.sort(key=lambda x: x[1])

        # Add goals for each cylinder to be placed in the correct zone.
        for i, (cylinder_id, _) in enumerate(cylinders):
            # Define the language goal for placing this cylinder.
            language_goal = self.lang_template.format(color=colors[i], order=utils.ordinal(i + 1))

            # Add the goal for this cylinder.
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_poses[i]],
                          replace=False, rotations=True, metric='pose', params=None,
                          step_max_reward=1 / n_cylinders, language_goal=language_goal)

# Note: The actual implementation of utils.ordinal and the template filling in self.fill_template
# are assumed to be provided by the cliport package and are not shown here.