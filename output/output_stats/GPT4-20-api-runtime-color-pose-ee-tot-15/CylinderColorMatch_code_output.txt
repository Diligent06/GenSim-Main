import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderColorMatch(Task):
    """Arrange a series of colored cylinders to form a color gradient from one end of the table to the other."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have 5 cylinders and 2 steps per cylinder (pick and place)
        self.lang_template = "create a color gradient from {start_color} to {end_color} with the cylinders"
        self.task_completed_desc = "done creating the color gradient."
        self.ee = Suction  # We need to move cylinders on the Z axis, so we use Suction
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the colors for the gradient
        gradient_colors = ['red', 'orange', 'yellow', 'green', 'blue']
        n_cylinders = len(gradient_colors)

        # Add cylinders with the specified colors
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i, color_name in enumerate(gradient_colors):
            # Generate the color RGB values
            color = utils.COLORS[color_name]

            # Generate a random pose for the cylinder within the workspace bounds
            size = (0.05, 0.05, 0.1)  # Diameter, Diameter, Height
            pose = self.get_random_pose(env, size)

            # Replace the placeholders in the URDF template with the actual values
            replace = {'COLOR': color}
            urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder object to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append(cylinder_id)

        # Define the target poses for the cylinders to create the gradient
        # We want them to be aligned on the x-axis, so we only vary the x-coordinate
        x_positions = np.linspace(0.25, 0.75, n_cylinders)
        target_poses = [([x, 0, 0.05], [0, 0, 0, 1]) for x in x_positions]  # Keeping y, z constant

        # Add the goal for arranging the cylinders in the color gradient
        language_goal = self.lang_template.format(start_color=gradient_colors[0], end_color=gradient_colors[-1])
        self.add_goal(objs=cylinders, matches=np.eye(n_cylinders), targ_poses=target_poses, replace=False,
                      rotations=False, metric='pose', params=None, step_max_reward=1, language_goal=language_goal)

# Note: The task assumes that the cylinders are to be arranged in a straight line on the x-axis.
# The y and z coordinates are kept constant for simplicity, and the rotation is fixed as upright.