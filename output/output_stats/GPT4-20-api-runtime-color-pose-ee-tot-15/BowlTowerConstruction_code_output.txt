import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlTowerConstruction(Task):
    """
    Stack a set of five differently colored bowls into a single tower with the largest bowl at the base and the smallest at the top, ensuring stability.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to stack 5 bowls, so 10 steps should be sufficient
        self.lang_template = "stack the {color} bowl on top of the {target_color} bowl"
        self.task_completed_desc = "done constructing the bowl tower."
        self.ee = Suction  # We need to move bowls on the Z axis, so Suction is appropriate

    def reset(self, env):
        super().reset(env)

        # Define the colors for the bowls
        bowl_colors = ['red', 'orange', 'yellow', 'green', 'blue']
        np.random.shuffle(bowl_colors)  # Shuffle the colors to randomize the order

        # Define the size for each bowl, with the largest first
        bowl_sizes = [(0.18 - i * 0.03, 0.18 - i * 0.03, 0.06) for i in range(5)]

        # Add bowls to the environment
        bowls = []
        for i in range(5):
            # Get a random pose for the bowl
            bowl_pose = self.get_random_pose(env, bowl_sizes[i])
            # Define the color for the bowl
            color = utils.COLORS[bowl_colors[i]]
            # Add the bowl to the environment
            bowl_urdf = 'bowl/bowl.urdf'
            bowl_id = env.add_object(bowl_urdf, bowl_pose, color=color)
            bowls.append((bowl_id, bowl_pose, bowl_sizes[i], bowl_colors[i]))

        # Add goals for stacking the bowls
        for i in range(1, 5):
            # The target is the bowl below the current one
            target_bowl = bowls[i - 1]
            current_bowl = bowls[i]
            # Calculate the target pose (on top of the lower bowl)
            target_pose = (target_bowl[1][0], target_bowl[1][1], target_bowl[1][2] + target_bowl[2][2])
            # Create the language goal
            language_goal = self.lang_template.format(color=current_bowl[3], target_color=target_bowl[3])
            # Add the goal to the task
            self.add_goal(objs=[current_bowl[0]], 
                          matches=np.ones((1, 1)), 
                          targ_poses=[(target_pose, (0, 0, 0, 1))],  # Quaternion for no rotation
                          replace=False, 
                          rotations=False,  # No rotation needed, bowls are symmetric
                          metric='pose', 
                          params=None, 
                          step_max_reward=1 / (5 - i),  # Reward diminishes as we stack more bowls
                          language_goal=language_goal)