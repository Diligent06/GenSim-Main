import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlCylinderSorting(Task):
    """Sort three differently colored cylinders by placing each one into corresponding colored bowls."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We expect to call self.add_goal twice, so we set max_steps to twice that number
        self.lang_template = "put the {color} cylinder in the {color} bowl"
        self.task_completed_desc = "done sorting cylinders into bowls."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders and bowls
        colors = ['red', 'green', 'blue']
        color_names = ['red', 'green', 'blue']

        # Add bowls in a triangular formation
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_size = (0.12, 0.12, 0.06)  # x, y, z dimensions for the bowl size
        bowl_poses = []
        for i, color_name in enumerate(color_names):
            bowl_pose = self.get_random_pose(env, obj_size=bowl_size)
            bowl_color = utils.COLORS[color_name]
            env.add_object(bowl_urdf, bowl_pose, color=bowl_color, category='fixed')
            bowl_poses.append(bowl_pose)

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.04, 0.04, 0.12)  # x, y, z dimensions for the cylinder size
        cylinders = []
        for i, color_name in enumerate(color_names):
            cylinder_pose = self.get_random_pose(env, obj_size=cylinder_size)
            cylinder_color = utils.COLORS[color_name]
            replace = {'COLOR': (cylinder_color[0], cylinder_color[1], cylinder_color[2], 1)}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Define the language goal for each cylinder
            language_goal = self.lang_template.format(color=color_name)

            # Add goal for each cylinder to be in the corresponding colored bowl
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[bowl_poses[i]], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1,
                          language_goal=language_goal)

        # The task is set up with cylinders and bowls, and goals have been added for sorting