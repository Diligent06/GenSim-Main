import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderZoneSorting(Task):
    """Sort colored cylinders into matching colored zones on the tabletop, ensuring precise placement within the boundaries."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # Assuming we will have 2 goals, so max_steps is twice that
        self.lang_template = "place the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done sorting cylinders."
        self.ee = Suction  # Suction is needed to lift cylinders on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones
        n_cylinders = 2
        n_zones = n_cylinders  # Assuming one zone per cylinder

        # Define cylinder size
        cylinder_size = (0.04, 0.04, 0.1)  # (radius, radius, height)

        # Define zone size
        zone_size = (0.15, 0.15, 0)  # (x_length, y_width, z_height)

        # Define colors for cylinders and zones
        colors = ['red', 'green']  # Add more colors if more cylinders are needed

        # Add cylinders with matching colors
        for i in range(n_cylinders):
            # Generate a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Get the color for the cylinder
            color = utils.COLORS[colors[i]]
            # Fill the cylinder URDF template with size and color
            cylinder_urdf = self.fill_template('cylinder/cylinder-template.urdf', {'COLOR': color})
            # Add the cylinder object to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            # Generate a random pose for the zone
            zone_pose = self.get_random_pose(env, zone_size)
            # Fill the zone URDF template with size
            zone_urdf = self.fill_template('zone/zone.urdf', {'COLOR': color})
            # Add the zone object to the environment
            env.add_object(zone_urdf, zone_pose, 'fixed')

            # Define the language goal
            language_goal = self.lang_template.format(color=colors[i])
            # Add the goal for the cylinder to be in the zone
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_pose], replace=True,
                          rotations=False, metric='zone', params=[(zone_pose, zone_size)], step_max_reward=1,
                          language_goal=language_goal)

        # Note: If more cylinders are added, ensure to update self.max_steps accordingly