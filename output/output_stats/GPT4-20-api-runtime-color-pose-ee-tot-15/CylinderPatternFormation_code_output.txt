import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderPatternFormation(Task):
    """Arrange a series of five differently colored cylinders into a predefined pattern."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call self.add_goal 5 times, so max_steps is set to twice that number.
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector.
        self.lang_template = "place the {color} cylinder at the {position} position of the pattern"
        self.task_completed_desc = "completed cylinder pattern formation."

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders.
        colors = ['red', 'blue', 'green', 'yellow', 'purple']
        color_names = ['red', 'blue', 'green', 'yellow', 'purple']

        # Define the size of the cylinders.
        cylinder_size = (0.05, 0.05, 0.1)  # (radius, radius, height)

        # Add the target zone where the pattern will be formed.
        zone_size = (0.3, 0.3, 0)  # (x_size, y_size, z_size)
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Add cylinders.
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_poses = []
        for i, color in enumerate(colors):
            # Get a random pose for the cylinder.
            pose = self.get_random_pose(env, cylinder_size)
            cylinder_poses.append(pose)

            # Set the color of the cylinder.
            rgb_color = utils.COLORS[color]

            # IMPORTANT: REPLACE THE TEMPLATE URDF with `fill_template`
            replace = {'COLOR': rgb_color}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment.
            env.add_object(cylinder_urdf, pose)

        # Define the pattern positions relative to the center of the zone.
        # Here we form a cross pattern as an example.
        pattern_offsets = [
            (0, 0.1, 0),  # top
            (0.1, 0, 0),  # right
            (0, 0, 0),    # center
            (-0.1, 0, 0), # left
            (0, -0.1, 0)  # bottom
        ]

        # Add goals for each cylinder to be placed in the pattern.
        for i, offset in enumerate(pattern_offsets):
            # Calculate the target pose for the cylinder in the pattern.
            target_pose = utils.apply(zone_pose, offset)

            # Create a language goal for the current cylinder.
            language_goal = self.lang_template.format(color=color_names[i], position=offset)

            # Add the goal for the current cylinder.
            self.add_goal(
                objs=[i],  # The object ID is the same as its index in this case.
                matches=np.int32([[1]]),  # Each cylinder has a unique target pose.
                targ_poses=[target_pose],  # The target pose for the current cylinder.
                replace=False,  # Each cylinder has a unique target pose.
                rotations=False,  # We don't need to rotate the cylinders for this pattern.
                metric='pose',  # We use the 'pose' metric to check if the cylinder is in the right place.
                params=None,  # No additional parameters are needed for the 'pose' metric.
                step_max_reward=1 / len(colors),  # The reward is evenly distributed across all cylinders.
                language_goal=language_goal  # The language goal for the current cylinder.
            )