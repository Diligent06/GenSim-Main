import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PalletBallOrganization(Task):
    """
    Organize balls of different sizes onto a pallet, with each row containing balls of the same size,
    arranged from smallest to largest from top to bottom.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have 5 balls and 2 steps per ball (pick and place)
        self.ee = Suction  # Using Suction end-effector as we need to move balls on the Z axis

        # Task-specific language templates
        self.lang_template = "place the {size} ball on the pallet in the {row} row"
        self.task_completed_desc = "done organizing the balls on the pallet."

    def reset(self, env):
        super().reset(env)

        # Define the sizes for the balls, small to large
        ball_sizes = [0.04, 0.06, 0.08, 0.1, 0.12]  # Example sizes in meters

        # Define the colors for the balls
        ball_colors = [utils.COLORS['red'], utils.COLORS['blue'], utils.COLORS['green'],
                       utils.COLORS['yellow'], utils.COLORS['purple']]

        # Add the pallet
        pallet_size = (0.3, 0.3, 0.1)  # Example size in meters
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Add balls of different sizes and colors onto the scene
        balls = []
        ball_template = 'ball/ball-template.urdf'
        for i, size in enumerate(ball_sizes):
            # Generate a random pose for the ball
            pose = self.get_random_pose(env, (size, size, size))
            replace = {'SIZE': size}
            # Replace the template URDF with the correct size
            ball_urdf = self.fill_template(ball_template, replace)
            # Add the ball to the environment with the generated color
            ball_id = env.add_object(ball_urdf, pose, color=ball_colors[i])
            balls.append(ball_id)

        # Define the rows on the pallet for each ball size
        rows = ['top', 'second', 'middle', 'fourth', 'bottom']

        # Add goals for each ball to be placed in the correct row on the pallet
        for i, ball_id in enumerate(balls):
            # Define the target pose for the ball on the pallet
            # Assuming the pallet is divided into 5 rows and balls are placed in the center of each row
            row_pose = (pallet_pose[0][0], pallet_pose[0][1] - 0.1 + i * 0.05, pallet_size[2] / 2 + ball_sizes[i] / 2)
            target_pose = (row_pose, (0, 0, 0, 1))  # No rotation needed, quaternions for no rotation

            # Define the language goal for this step
            language_goal = self.lang_template.format(size=ball_sizes[i], row=rows[i])

            # Add the goal for the ball
            self.add_goal(objs=[ball_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / len(balls),
                          language_goal=language_goal)

        # Additional reset steps if needed
        self.additional_reset()