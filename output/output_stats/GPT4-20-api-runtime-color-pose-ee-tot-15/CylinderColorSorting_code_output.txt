import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderColorSorting(Task):
    """Sort a set of five differently colored cylinders by placing each onto a corresponding colored line."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to sort 5 cylinders, so 10 steps should be sufficient.
        self.lang_template = "place the {color} cylinder on the {color} line"
        self.task_completed_desc = "done sorting all cylinders."
        self.ee = Suction  # We need to move cylinders on the Z axis, so we use the Suction end-effector.

    def reset(self, env):
        super().reset(env)

        # Define the colors available for the cylinders and lines.
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        n_cylinders = 5  # We have five cylinders to sort.

        # Add cylinders with corresponding colors.
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i in range(n_cylinders):
            # Generate a random pose for the cylinder.
            size = (0.05, 0.05, 0.1)  # Approximate size of the cylinder for pose generation.
            pose = self.get_random_pose(env, size)
            color = utils.COLORS[colors[i]]  # Get the RGB values for the cylinder's color.

            # Replace the template URDF with the color and size of the cylinder.
            replace = {'COLOR': color, 'SIZE': size}
            urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment.
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append((cylinder_id, colors[i]))

        # Add lines with corresponding colors.
        line_template = 'line/single-green-line-template.urdf'
        for color in colors:
            # Generate a random pose for the line.
            size = (0.15, 0.02, 0.001)  # Approximate size of the line for pose generation.
            pose = self.get_random_pose(env, size)
            line_color = utils.COLORS[color]  # Get the RGB values for the line's color.

            # Replace the template URDF with the color of the line.
            replace = {'COLOR': line_color}
            urdf = self.fill_template(line_template, replace)

            # Add the line to the environment as a fixed object.
            env.add_object(urdf, pose, 'fixed')

            # Find the cylinder that matches the color of the line.
            matching_cylinder = next(cyl for cyl in cylinders if cyl[1] == color)

            # Define the language goal for placing the cylinder on the line.
            language_goal = self.lang_template.format(color=color)

            # Add the goal for the cylinder to be placed on the line.
            self.add_goal(objs=[matching_cylinder[0]], matches=np.int32([[1]]),
                          targ_poses=[pose], replace=False, rotations=False,
                          metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

        # Set the number of steps to twice the number of goals.
        self.max_steps = len(self.goals) * 2