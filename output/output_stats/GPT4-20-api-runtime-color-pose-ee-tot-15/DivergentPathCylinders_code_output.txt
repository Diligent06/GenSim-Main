import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class DivergentPathCylinders(Task):
    """Arrange five differently colored cylinders along diverging paths marked by green lines, with each cylinder placed at the end of its corresponding colored line."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call self.add_goal 5 times, so we set max_steps to twice that number.
        self.lang_template = "place the {color} cylinder at the end of the {color} line"
        self.task_completed_desc = "all cylinders are placed at the end of their corresponding colored lines."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector.

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders.
        cylinder_colors = ['red', 'blue', 'green', 'yellow', 'purple']
        # Define the colors for the lines, which should match the cylinder colors.
        line_colors = cylinder_colors

        # Add lines to the environment.
        line_template = 'line/single-green-line-template.urdf'
        line_poses = []
        for i, color in enumerate(line_colors):
            # Generate a random pose for the line within the workspace bounds.
            line_pose = self.get_random_pose(env, (0.01, 0.5, 0))  # Thin and long line
            # Add the line to the environment with a fixed category.
            env.add_object(line_template, line_pose, 'fixed', utils.COLORS['green'])
            line_poses.append(line_pose)

        # Add cylinders to the environment.
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.04, 0.04, 0.1)  # Diameter and height of the cylinder
        cylinders = []
        for i, color in enumerate(cylinder_colors):
            # Generate a random pose for the cylinder within the workspace bounds.
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Fill in the cylinder URDF template with the specific color and size.
            replace = {'COLOR': utils.COLORS[color], 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment with a rigid category.
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose, 'rigid')
            cylinders.append(cylinder_id)

            # Define the language goal for placing this cylinder.
            language_goal = self.lang_template.format(color=color)

            # The target pose for the cylinder is at the end of the corresponding line.
            # We assume the line is oriented along the y-axis and we place the cylinder at the end.
            line_end_translation = (line_poses[i][0][0], line_poses[i][0][1] + 0.25, line_poses[i][0][2])
            target_pose = (line_end_translation, (0, 0, 0, 1))  # No rotation needed, keep the default orientation.

            # Add the goal for this cylinder.
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/5,
                          language_goal=language_goal)