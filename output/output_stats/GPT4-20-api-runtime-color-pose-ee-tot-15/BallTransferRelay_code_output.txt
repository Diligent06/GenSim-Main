import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BallTransferRelay(Task):
    """Transfer a series of colored balls from a starting bowl to a matching colored bowl across the table without dropping them."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have up to 5 balls to transfer, 2 steps per ball.
        self.lang_template = "transfer the {color} ball to the matching colored bowl"
        self.task_completed_desc = "all balls have been transferred to the matching bowls."
        self.ee = Suction  # Using Suction end-effector to pick up balls.

    def reset(self, env):
        super().reset(env)

        # Define the colors for the balls and bowls.
        ball_colors = ['red', 'green', 'blue', 'yellow', 'purple']
        np.random.shuffle(ball_colors)  # Shuffle to randomize the order of the balls.

        # Add bowls and balls to the environment.
        bowl_size = (0.15, 0.15, 0.05)  # Size of the bowl.
        ball_size = (0.04, 0.04, 0.04)  # Size of the ball.
        bowl_urdf = 'bowl/bowl.urdf'
        ball_template = 'ball/ball-template.urdf'

        # Create two bowls for each color, one for starting and one for the target.
        start_bowls = []
        target_bowls = []
        balls = []

        for color in ball_colors:
            # Add starting bowl.
            start_bowl_pose = self.get_random_pose(env, bowl_size)
            start_bowl_id = env.add_object(bowl_urdf, start_bowl_pose, 'fixed', color=utils.COLORS[color])
            start_bowls.append((start_bowl_id, start_bowl_pose))

            # Add target bowl.
            target_bowl_pose = self.get_random_pose(env, bowl_size)
            target_bowl_id = env.add_object(bowl_urdf, target_bowl_pose, 'fixed', color=utils.COLORS[color])
            target_bowls.append((target_bowl_id, target_bowl_pose))

            # Add ball.
            ball_pose = self.get_random_pose(env, ball_size)
            replace = {'COLOR': utils.COLORS[color]}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append((ball_id, ball_pose))

            # Define the language goal for transferring the ball.
            language_goal = self.lang_template.format(color=color)

            # Add goal for transferring the ball to the matching colored bowl.
            self.add_goal(objs=[ball_id], matches=np.int32([[1]]), targ_poses=[target_bowl_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/len(ball_colors),
                          language_goal=language_goal)

        # Set the task description.
        self.lang_goals = [self.lang_template.format(color=color) for color in ball_colors]