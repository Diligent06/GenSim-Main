import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BallOnStandPlacement(Task):
    """Place a series of colored balls onto their corresponding colored stands."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to place two balls, so max_steps is twice that number
        self.lang_template = "place the {color} ball on the {color} stand"
        self.task_completed_desc = "done placing balls on stands."
        self.ee = Suction  # We need to move balls on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors for the balls and stands
        ball_colors = ['red', 'green']
        stand_colors = ball_colors  # Matching colors for stands

        # Add balls and stands to the environment
        balls = []
        stands = []
        for color in ball_colors:
            # Ball size and URDF
            ball_size = (0.06, 0.06, 0.06)  # Assuming a uniform size for all balls
            ball_urdf = 'ball/ball-template.urdf'
            ball_pose = self.get_random_pose(env, ball_size)
            ball_color = utils.COLORS[color]
            ball_id = env.add_object(ball_urdf, ball_pose, color=ball_color)
            balls.append((ball_id, ball_pose))

            # Stand size and URDF
            stand_size = (0.07, 0.07, 0.1)  # Slightly larger than the ball to ensure it can sit on top
            stand_urdf = 'stacking/stand.urdf'
            stand_pose = self.get_random_pose(env, stand_size)
            stand_color = utils.COLORS[color]
            env.add_object(stand_urdf, stand_pose, 'fixed', color=stand_color)
            stands.append(stand_pose)

        # Add goals for placing each ball on the corresponding stand
        for i, (ball_id, _) in enumerate(balls):
            color_name = ball_colors[i]
            # The target pose for the ball is on top of the stand with the same color
            # We use the x, y coordinates of the stand and add the z height of the stand
            # plus the radius of the ball to the z coordinate of the stand
            stand_pose = stands[i]
            target_pose = (stand_pose[0], (stand_pose[1][0], stand_pose[1][1], stand_pose[1][2] + stand_size[2] / 2 + ball_size[2] / 2))
            language_goal = self.lang_template.format(color=color_name)
            self.add_goal(objs=[ball_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1, language_goal=language_goal)

        # Set the description for the language goal
        self.lang_goals = [self.lang_template.format(color=color) for color in ball_colors]