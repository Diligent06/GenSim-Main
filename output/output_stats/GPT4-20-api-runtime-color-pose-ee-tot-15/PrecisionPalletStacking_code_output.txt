import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionPalletStacking(Task):
    """
    Stack a specific sequence of differently colored cylinders onto a pallet,
    ensuring each cylinder is precisely aligned with the one below it without any overhang.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have 5 cylinders to stack, 2 steps per cylinder
        self.lang_template = "stack the {color} cylinder on the pallet"
        self.task_completed_desc = "done stacking cylinders."
        self.ee = Suction  # Use Suction end-effector for vertical stacking
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders to stack
        n_cylinders = 5

        # Define the size of the pallet
        pallet_size = (0.3, 0.3, 0.02)  # x, y, z dimensions

        # Add pallet to the environment
        pallet_urdf = 'pallet/pallet.urdf'
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object(pallet_urdf, pallet_pose, 'fixed')

        # Define cylinder size and template
        cylinder_size = (0.05, 0.05, 0.1)  # x, y, z dimensions
        cylinder_template = 'cylinder/cylinder-template.urdf'

        # Define the sequence of colors for the cylinders
        cylinder_colors = ['red', 'green', 'blue', 'yellow', 'purple']
        cylinder_color_values = [utils.COLORS[color] for color in cylinder_colors]

        # Add cylinders to the environment
        cylinders = []
        for i in range(n_cylinders):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {
                'COLOR': cylinder_color_values[i],
                'SIZE': cylinder_size
            }
            # Fill the cylinder URDF template with color and size
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder object to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

        # Define the target poses for each cylinder on the pallet
        # The target pose is directly above the center of the pallet, with increasing z for each cylinder
        targ_poses = []
        for i in range(n_cylinders):
            targ_pose = (pallet_pose[0], (0, 0, pallet_size[2] / 2 + cylinder_size[2] * (i + 0.5)))
            targ_poses.append(targ_pose)

        # Add goals for each cylinder
        for i in range(n_cylinders):
            language_goal = self.lang_template.format(color=cylinder_colors[i])
            self.add_goal(
                objs=[cylinders[i]],
                matches=np.ones((1, 1)),  # Each cylinder has only one correct placement
                targ_poses=[targ_poses[i]],
                replace=False,  # Each cylinder has a unique target pose
                rotations=False,  # No need to rotate cylinders, they are symmetrical
                metric='pose',  # We are using pose metric for precision
                params=None,  # No additional parameters needed
                step_max_reward=1,  # Full reward for placing each cylinder correctly
                language_goal=language_goal
            )