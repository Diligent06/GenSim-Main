import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderColorBalance(Task):
    """Balance a specific number of differently colored cylinders on the flat surface of a box without any of them falling off."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Set to twice the number of expected goals
        self.lang_template = "balance the {color} cylinder on the box"
        self.task_completed_desc = "done balancing cylinders."
        self.ee = Suction  # Use Suction end-effector to move cylinders in Z axis

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders to balance
        n_cylinders = 3

        # Define the size of the box
        box_size = (0.3, 0.3, 0.05)  # (length, width, height)

        # Add the box to the environment
        box_pose = self.get_random_pose(env, box_size)
        box_template = 'box/box-template.urdf'
        replace = {'SIZE': box_size}
        box_urdf = self.fill_template(box_template, replace)
        env.add_object(box_urdf, box_pose, 'fixed')

        # Define cylinder size
        cylinder_size = (0.05, 0.05, 0.1)  # (radius, radius, height)

        # Define available colors
        colors = ['red', 'green', 'blue']

        # Add cylinders to the environment
        for i in range(n_cylinders):
            # Get a random color for the cylinder
            color_name = colors[i]
            color_rgb = utils.COLORS[color_name]

            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)

            # Create the cylinder URDF using the template
            cylinder_template = 'cylinder/cylinder-template.urdf'
            replace = {'SIZE': cylinder_size, 'COLOR': color_rgb}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

            # Define the language goal
            language_goal = self.lang_template.format(color=color_name)

            # Add the goal for the cylinder to be balanced on the box
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[box_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

        # Set the task description
        self.lang_goals = [self.lang_template.format(color=color) for color in colors]