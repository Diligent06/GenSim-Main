import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class SequentialBowlFilling(Task):
    """
    Place a sequence of colored balls into a bowl without knocking any out,
    challenging precision and gentle handling.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have 5 balls to place, 2 steps per ball
        self.lang_template = "put the {color} ball in the bowl"
        self.task_completed_desc = "done filling the bowl."
        self.ee = Suction  # Using Suction end-effector for precise placement in Z axis

    def reset(self, env):
        super().reset(env)

        # Define the size and pose of the bowl
        bowl_size = (0.18, 0.18, 0.06)  # Size of the bowl
        bowl_pose = self.get_random_pose(env, bowl_size)  # Random pose for the bowl
        bowl_urdf = 'bowl/bowl.urdf'
        env.add_object(bowl_urdf, bowl_pose, 'fixed')  # Add the bowl to the environment

        # Define colors for the balls
        ball_colors = ['red', 'green', 'blue', 'yellow', 'purple']
        ball_color_names = [utils.COLORS[color] for color in ball_colors]  # Get RGB values

        # Add balls to the environment
        ball_size = (0.04, 0.04, 0.04)  # Size of the balls
        ball_template = 'ball/ball-template.urdf'
        ball_poses = []  # Store initial poses to use as target poses
        for color in ball_color_names:
            # Get a random pose for the ball
            ball_pose = self.get_random_pose(env, ball_size)
            ball_poses.append(ball_pose)

            # Replace the color in the ball URDF template
            replace = {'COLOR': color}
            ball_urdf = self.fill_template(ball_template, replace)

            # Add the ball to the environment
            env.add_object(ball_urdf, ball_pose)

        # Add goals for each ball to be placed in the bowl sequentially
        for i, color_name in enumerate(ball_colors):
            # Language goal for placing the current ball
            language_goal = self.lang_template.format(color=color_name)

            # Add the goal for the current ball
            self.add_goal(
                objs=[i],  # Object index corresponds to the order they were added
                matches=np.ones((1, 1)),  # Each ball has a single match (the bowl)
                targ_poses=[bowl_pose],  # Target pose is the bowl's pose
                replace=False,  # Balls should not replace each other
                rotations=False,  # Rotation is not considered for the balls
                metric='pose',  # We use pose metric for precise placement
                params=None,  # No additional parameters needed
                step_max_reward=1 / len(ball_colors),  # Reward is split across all balls
                language_goal=language_goal  # Language goal for the current step
            )