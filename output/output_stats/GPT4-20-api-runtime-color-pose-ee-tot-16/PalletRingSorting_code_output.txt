import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PalletRingSorting(Task):
    """
    Sort differently colored cylinders onto corresponding colored zones on a pallet,
    creating separate stacks for each color.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we have 5 rings to sort, 2 steps per ring (pick & place)
        self.ee = Suction  # Use Suction end-effector to pick up cylinders
        self.lang_template = "put the {color} cylinder on the {color} zone"
        self.task_completed_desc = "done sorting all the rings."

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones
        n_cylinders = 5
        n_zones = 5

        # Define the colors available for cylinders and zones
        cylinder_colors = ['red', 'green', 'blue', 'yellow', 'purple']
        zone_colors = cylinder_colors.copy()  # Zones have the same colors as cylinders

        # Add pallet
        pallet_size = (0.3, 0.3, 0.1)  # Size of the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Add zones to the pallet for each color
        zone_size = (0.05, 0.05, 0)  # Size of the zone
        zone_urdf = 'zone/zone.urdf'
        zone_poses = []
        for i, color in enumerate(zone_colors):
            # Calculate zone position on the pallet
            x = 0.25 + (i % 3) * 0.1
            y = -0.5 + (i // 3) * 0.1
            z = 0.1  # Height of the pallet
            zone_pose = ((x, y, z), (0, 0, 0, 1))  # No rotation for zones
            env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[color])
            zone_poses.append(zone_pose)

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i, color in enumerate(cylinder_colors):
            # Randomly place cylinders in the environment
            cylinder_size = (0.02, 0.02, 0.08)  # Size of the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': utils.COLORS[color]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

            # Define the goal for each cylinder
            language_goal = self.lang_template.format(color=color)
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]),
                          targ_poses=[zone_poses[i]], replace=True,
                          rotations=False, metric='pose', params=None,
                          step_max_reward=1/n_cylinders, language_goal=language_goal)

        # Set the task description
        self.task_desc = "Sort the cylinders by color onto the corresponding zones on the pallet."