import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderRingStack(Task):
    """
    Stack a series of differently colored cylinders inside a fixture with concentric rings,
    matching the cylinder colors to the corresponding colored rings.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to stack 2 cylinders, so we set max_steps to twice that number
        self.lang_template = "put the {color} cylinder in the {color} ring"
        self.task_completed_desc = "done stacking cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Add fixture with concentric rings.
        fixture_size = (0.15, 0.15, 0.05)  # x, y, z dimensions for the fixture size
        fixture_urdf = 'insertion/fixture.urdf'
        fixture_pose = self.get_random_pose(env, fixture_size)
        env.add_object(fixture_urdf, fixture_pose, 'fixed')

        # Define cylinder colors and sizes.
        cylinder_colors = ['red', 'green']
        cylinder_size = (0.05, 0.05, 0.1)  # x, y, z dimensions for the cylinder size

        # Add cylinders.
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for color in cylinder_colors:
            # Generate a random pose for the cylinder.
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Set the color of the cylinder using the utils.COLORS dictionary.
            cylinder_color = utils.COLORS[color]
            # Replace the placeholders in the URDF template with the actual values.
            replace = {'COLOR': cylinder_color}
            # Generate the URDF file for the cylinder.
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment.
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            # Define the target pose for the cylinder, which is the same as the fixture pose.
            target_pose = fixture_pose

            # Add the goal for the cylinder to be placed in the corresponding colored ring.
            language_goal = self.lang_template.format(color=color)
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / len(cylinder_colors),
                          language_goal=language_goal)

        # Note: The target poses for the cylinders are set to the fixture pose, assuming that the fixture has
        # concentric rings designed to hold the cylinders at the same pose. If the rings have different poses,
        # the target poses would need to be adjusted accordingly.