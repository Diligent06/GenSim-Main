import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderStackChallenge(Task):
    """Stack a series of three different colored cylinders in ascending height order on a designated zone."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will call self.add_goal three times, so max_steps is set to twice that number
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.lang_template = "stack the {color} cylinder"
        self.task_completed_desc = "done stacking cylinders."

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders
        colors = ['red', 'green', 'blue']
        color_names = ['red cylinder', 'green cylinder', 'blue cylinder']

        # Define the sizes for the cylinders (ascending order)
        sizes = [(0.04, 0.04, 0.08),  # smallest
                 (0.04, 0.04, 0.12),  # medium
                 (0.04, 0.04, 0.16)]  # largest

        # Add the zone where cylinders will be stacked
        zone_size = (0.1, 0.1, 0)  # Zone size (x, y, z)
        zone_pose = self.get_random_pose(env, zone_size)  # Get a random pose for the zone
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')  # Add the zone to the environment

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_ids = []
        for i in range(3):
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, sizes[i])
            # Set the color for the cylinder
            color = utils.COLORS[colors[i]]
            # Replace the placeholders in the URDF template
            replace = {'SIZE': sizes[i], 'COLOR': color}
            # Fill in the URDF template
            urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinder_ids.append(cylinder_id)

        # Add goals for stacking cylinders in ascending height order
        for i in range(3):
            # Define the language goal
            language_goal = self.lang_template.format(color=color_names[i])
            # Define the target pose (same x, y as the zone, with incremental z for stacking)
            target_pose = (zone_pose[0], (0, 0, 0, 1))  # We don't need to specify rotation for cylinders
            # Add the goal
            self.add_goal(objs=[cylinder_ids[i]], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/3, language_goal=language_goal)

            # Update the z-coordinate for the next cylinder to be stacked on top of the previous one
            zone_pose = (zone_pose[0][0], zone_pose[0][1], zone_pose[0][2] + sizes[i][2])