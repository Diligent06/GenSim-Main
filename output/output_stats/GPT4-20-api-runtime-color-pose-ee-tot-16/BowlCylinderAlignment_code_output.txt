import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlCylinderAlignment(Task):
    """
    Align a series of colored cylinders in a row within a rectangular zone,
    each cylinder standing on one end, sorted by color from one side of the zone to the other.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Set to twice the number of expected goals
        self.lang_template = "align the {color} cylinder in the row"
        self.task_completed_desc = "done aligning cylinders."
        self.ee = Suction  # Use Suction end-effector for vertical movement
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders
        cylinder_colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']
        n_cylinders = len(cylinder_colors)  # Number of cylinders to align

        # Add the rectangular zone where cylinders will be aligned
        zone_size = (0.3, 0.05, 0)  # Size of the zone (x, y, z)
        zone_pose = self.get_random_pose(env, zone_size)  # Random pose within workspace bounds
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')  # Add zone to the environment

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.02, 0.02, 0.08)  # Size of the cylinder (radius, radius, height)
        cylinders = []
        for i, color in enumerate(cylinder_colors):
            # Generate the color for the cylinder
            rgb_color = utils.COLORS[color]

            # Generate a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)

            # Fill the cylinder URDF template with the specific color and size
            replace = {'COLOR': rgb_color, 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Define the target pose for the cylinder within the zone
            # Cylinders should be sorted by color, so we calculate the x-offset based on the index
            x_offset = (i - (n_cylinders - 1) / 2) * (cylinder_size[0] * 2)
            target_pose = (zone_pose[0][0] + x_offset, zone_pose[0][1], zone_pose[0][2]), zone_pose[1]

            # Add a goal for each cylinder
            language_goal = self.lang_template.format(color=color)
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=True,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

        # Add a bowl as a distractor object
        bowl_size = (0.15, 0.15, 0.07)  # Size of the bowl (radius, radius, height)
        bowl_pose = self.get_random_pose(env, bowl_size)  # Random pose within workspace bounds
        env.add_object('bowl/bowl.urdf', bowl_pose, 'fixed')  # Add bowl to the environment