import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderSorting(Task):
    """Sort cylinders of three different colors into three separate zones marked on the tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We expect to sort 3 cylinders, so max_steps is twice the number of cylinders
        self.lang_template = "put the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done sorting cylinders."
        self.ee = Suction  # We need to move cylinders on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders and zones
        cylinder_colors = ['red', 'green', 'blue']
        zone_colors = cylinder_colors  # Each zone color corresponds to a cylinder color

        # Add zones for each color
        zone_size = (0.12, 0.12, 0)  # Zones are flat squares on the table
        zones = []
        for color in zone_colors:
            zone_pose = self.get_random_pose(env, zone_size)
            env.add_object('zone/zone.urdf', zone_pose, 'fixed', color=utils.COLORS[color])
            zones.append((zone_pose, color))

        # Add cylinders for each color
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for color in cylinder_colors:
            # Generate a random pose for the cylinder
            cylinder_size = (0.04, 0.04, 0.12)  # Diameter and height for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': utils.COLORS[color]}
            # Replace the template URDF with the specific color for the cylinder
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append((cylinder_id, color))

        # Define the sorting task goals
        for cylinder, cylinder_color in cylinders:
            # Find the corresponding zone for the cylinder color
            zone_pose, _ = next((z for z in zones if z[1] == cylinder_color), (None, None))
            if zone_pose:
                # Define the language goal for the current cylinder
                language_goal = self.lang_template.format(color=cylinder_color)
                # Add the goal for the cylinder to be in the correct zone
                self.add_goal(objs=[cylinder], matches=np.int32([[1]]), targ_poses=[zone_pose],
                              replace=False, rotations=False, metric='zone', params=[(zone_pose, zone_size)],
                              step_max_reward=1/3, language_goal=language_goal)

# Note: The task assumes that the zones and cylinders are uniquely color-coded and that there is a one-to-one
# correspondence between the color of the cylinder and the color of the zone it needs to be sorted into.