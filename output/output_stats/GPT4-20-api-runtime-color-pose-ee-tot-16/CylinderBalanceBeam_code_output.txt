import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderBalanceBeam(Task):
    """Balance a cylinder on top of a narrow stand without it falling off."""

    def __init__(self):
        super().__init__()
        self.max_steps = 2  # We have one goal, but we allow an extra step for adjustments
        self.lang_template = "balance the {color} cylinder on the stand"
        self.task_completed_desc = "done balancing the cylinder."
        self.ee = Suction  # Suction is needed to lift the cylinder in Z axis

    def reset(self, env):
        super().reset(env)

        # Define the size and color of the cylinder
        cylinder_size = (0.05, 0.05, 0.15)  # (radius, radius, height)
        cylinder_color = utils.COLORS['blue']  # Blue color for the cylinder

        # Define the size of the stand
        stand_size = (0.02, 0.02, 0.1)  # (length, width, height)

        # Add the stand to the environment
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, 'fixed')

        # Add the cylinder to the environment
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_pose = self.get_random_pose(env, cylinder_size)
        replace = {
            'DIM': cylinder_size,
            'COLOR': cylinder_color,
        }
        # IMPORTANT: REPLACE THE TEMPLATE URDF with `fill_template`
        cylinder_urdf = self.fill_template(cylinder_template, replace)
        cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

        # Define the target pose for the cylinder, which is on top of the stand
        # The target pose is the same as the stand's pose but with an adjusted z-coordinate
        target_pose = (stand_pose[0], stand_pose[1])
        target_pose[0][2] += stand_size[2] / 2 + cylinder_size[2] / 2  # Adjust z-coordinate

        # Add the goal for balancing the cylinder on the stand
        language_goal = self.lang_template.format(color='blue')
        self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=False,
                      rotations=False, metric='pose', params=None, step_max_reward=1,
                      language_goal=language_goal)

# Instantiate the task
task = CylinderBalanceBeam()