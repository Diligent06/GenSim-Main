import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderPrecisionStacking(Task):
    """
    Stack a designated number of colored cylinders onto the smallest area of the pallet,
    challenging the robot's precision and stability control.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will call self.add_goal 5 times
        self.lang_template = "stack the {color} cylinder on the pallet"
        self.task_completed_desc = "done stacking cylinders."
        self.ee = Suction  # Using Suction end-effector for vertical stacking

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders to stack
        n_cylinders = 5

        # Add pallet to the environment
        pallet_size = (0.15, 0.15, 0.02)  # Size of the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)
        pallet_urdf = 'pallet/pallet.urdf'
        env.add_object(pallet_urdf, pallet_pose, 'fixed')

        # Define cylinder properties
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.04, 0.04, 0.08)  # Diameter and height of the cylinder
        cylinder_colors = ['red', 'green', 'blue', 'yellow', 'purple']  # Cylinder colors

        # Add cylinders to the environment
        cylinders = []
        for i in range(n_cylinders):
            color_name = cylinder_colors[i]
            color_rgb = utils.COLORS[color_name]
            pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': color_rgb}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append((cylinder_id, pose))

        # Stack cylinders on the pallet
        for i, (cylinder_id, _) in enumerate(cylinders):
            # Calculate the target pose for the cylinder on top of the pallet
            # Assuming cylinders are stacked vertically in the center of the pallet
            targ_pose = (pallet_pose[0], pallet_pose[1])
            targ_pose[0][2] += cylinder_size[2] * (i + 0.5)  # Adjust z-coordinate for height

            # Define the language goal
            language_goal = self.lang_template.format(color=cylinder_colors[i])

            # Add goal for each cylinder
            self.add_goal(
                objs=[cylinder_id],
                matches=np.ones((1, 1)),
                targ_poses=[targ_pose],
                replace=False,
                rotations=False,  # No need for rotations as cylinders are symmetrical
                metric='pose',
                params=None,
                step_max_reward=1 / n_cylinders,
                language_goal=language_goal
            )

# Instantiate the task
task = CylinderPrecisionStacking()