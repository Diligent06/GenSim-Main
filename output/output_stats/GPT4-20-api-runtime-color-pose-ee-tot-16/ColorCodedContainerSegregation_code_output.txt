import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedContainerSegregation(Task):
    """Segregate colored cylinders into matching colored containers based on the colored zones they are placed in."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to call self.add_goal twice, so we set max_steps to twice that number
        self.lang_template = "put the {color} cylinder in the {color} container"
        self.task_completed_desc = "done segregating cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the colors for the zones and cylinders
        zone_colors = ['red', 'green', 'blue']
        cylinder_colors = zone_colors.copy()  # Cylinders will have the same set of colors as the zones

        # Shuffle the colors to ensure randomness
        np.random.shuffle(zone_colors)
        np.random.shuffle(cylinder_colors)

        # Add colored zones
        zone_size = (0.15, 0.15, 0)  # Zones are flat squares on the table
        zones = []
        for color_name in zone_colors:
            zone_pose = self.get_random_pose(env, zone_size)
            zone_urdf = 'zone/zone.urdf'
            zone_color = utils.COLORS[color_name]
            zone_id = env.add_object(zone_urdf, zone_pose, 'fixed', color=zone_color)
            zones.append((zone_id, zone_pose, zone_color, color_name))

        # Add colored cylinders
        cylinders = []
        for color_name in cylinder_colors:
            cylinder_size = (0.05, 0.05, 0.1)  # Diameter and height for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_template = 'cylinder/cylinder-template.urdf'
            cylinder_color = utils.COLORS[color_name]
            replace = {'DIM': cylinder_size, 'COLOR': cylinder_color}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append((cylinder_id, cylinder_pose, cylinder_color, color_name))

        # Add colored containers
        container_size = (0.2, 0.2, 0.05)  # Length, width, and height for the container
        containers = []
        for color_name in zone_colors:
            container_pose = self.get_random_pose(env, container_size)
            container_template = 'container/container-template.urdf'
            container_color = utils.COLORS[color_name]
            replace = {'DIM': container_size, 'COLOR': container_color}
            container_urdf = self.fill_template(container_template, replace)
            container_id = env.add_object(container_urdf, container_pose, 'fixed')
            containers.append((container_id, container_pose, container_color, color_name))

        # Create goals for each cylinder to be placed in the container with the matching color
        for cylinder in cylinders:
            cylinder_id, _, _, cylinder_color_name = cylinder
            # Find the container with the matching color
            matching_container = next(cont for cont in containers if cont[3] == cylinder_color_name)
            _, container_pose, _, _ = matching_container

            # Define the language goal
            language_goal = self.lang_template.format(color=cylinder_color_name)

            # Add the goal for the cylinder to be in the matching container
            self.add_goal(
                objs=[cylinder_id],
                matches=np.int32([[1]]),
                targ_poses=[container_pose],
                replace=False,
                rotations=False,  # Rotation is not important for this task
                metric='zone',
                params=[(container_pose, container_size)],
                step_max_reward=1,  # Since we have only one goal per cylinder, the max reward is 1
                language_goal=language_goal
            )