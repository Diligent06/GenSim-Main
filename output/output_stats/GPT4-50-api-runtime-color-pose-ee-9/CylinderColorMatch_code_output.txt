import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderColorMatch(Task):
    """Pick up five differently colored cylinders and place them standing upright into correspondingly colored circles on a zone mat, without knocking over adjacent cylinders."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call self.add_goal 5 times, so we set max_steps to twice that number
        self.lang_template = "put the {color} cylinder in the {color} circle"
        self.task_completed_desc = "done placing all cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and their size
        n_cylinders = 5
        cylinder_size = (0.05, 0.05, 0.15)  # (radius, radius, height)

        # Define the zone size where the colored circles will be
        zone_size = (0.3, 0.3, 0)  # (x_size, y_size, z_size)
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Define available colors for the cylinders
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [color for color in colors]  # Store color names for language goals

        # Add cylinders to the environment
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i in range(n_cylinders):
            color = utils.COLORS[colors[i]]  # Get the RGB value for the color
            pose = self.get_random_pose(env, cylinder_size)  # Get a random pose for the cylinder
            replace = {'COLOR': color}
            # Replace the color placeholder in the URDF template
            urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append(cylinder_id)

        # Add goals for each cylinder
        for i, cylinder_id in enumerate(cylinders):
            # The target pose is the same as the zone pose but with a specific offset for each color
            # The offset is calculated to match the colored circles on the zone mat
            offset = (i * 0.1 - 0.2, 0, 0.075)  # Offset for x, y, and z
            targ_pose = utils.apply(zone_pose, offset)  # Apply the offset to the zone pose
            language_goal = self.lang_template.format(color=color_names[i])
            self.add_goal(objs=[cylinder_id],
                          matches=np.int32([[1]]),  # Each cylinder has one unique target
                          targ_poses=[targ_pose],  # Target pose for the cylinder
                          replace=False,  # Each cylinder has a unique target
                          rotations=False,  # Cylinders should be upright, no rotation needed
                          metric='pose',  # We use pose metric since we need precise placement
                          params=None,  # No additional parameters needed
                          step_max_reward=1,  # Full reward for placing each cylinder correctly
                          language_goal=language_goal)  # Language goal for the cylinder