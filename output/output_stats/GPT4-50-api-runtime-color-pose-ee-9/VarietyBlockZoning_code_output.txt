import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class VarietyBlockZoning(Task):
    """Arrange a set of six blocks, each with a unique color, into six separate corresponding colored zones on the tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 12  # We have 6 blocks to place, so 12 steps should be sufficient
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

        # Define the language template for the task
        self.lang_template = "place the {color} block in the {color} zone"
        self.task_completed_desc = "done arranging blocks into zones."

    def reset(self, env):
        super().reset(env)

        # Define the colors for the blocks and zones
        colors = ['blue', 'red', 'green', 'orange', 'yellow', 'purple']
        color_names = [f"{color} block" for color in colors]

        # Add zones with corresponding colors
        zone_size = (0.1, 0.1, 0)  # Zones are flat squares on the table
        zones = []
        for color in colors:
            zone_pose = self.get_random_pose(env, zone_size)
            env.add_object('zone/zone.urdf', zone_pose, 'fixed', color=utils.COLORS[color])
            zones.append(zone_pose)

        # Add blocks with corresponding colors
        block_size = (0.05, 0.05, 0.05)  # Each block is a small cube
        blocks = []
        for color in colors:
            block_pose = self.get_random_pose(env, block_size)
            block_id = env.add_object('stacking/block.urdf', block_pose, color=utils.COLORS[color])
            blocks.append(block_id)

        # Add goals for each block to be placed in the corresponding zone
        for i, block_id in enumerate(blocks):
            # The language goal describes the action to be taken
            language_goal = self.lang_template.format(color=color_names[i])

            # Add the goal with the corresponding zone pose and size
            self.add_goal(objs=[block_id], matches=np.int32([[1]]), targ_poses=[zones[i]], replace=False,
                          rotations=False, metric='zone', params=[(zones[i], zone_size)], step_max_reward=1/6,
                          language_goal=language_goal)

# Instantiate the task
variety_block_zoning = VarietyBlockZoning()