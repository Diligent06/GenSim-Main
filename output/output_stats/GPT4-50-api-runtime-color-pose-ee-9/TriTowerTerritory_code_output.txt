import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class TriTowerTerritory(Task):
    """Build three separate towers each comprising three differently colored blocks on designated zones on a pallet, arranging the blocks within each tower in a specific color sequence."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is twice that number
        self.lang_template = "build a tower with {blocks} blocks on the {color} zone"
        self.task_completed_desc = "done building the tri-tower territory."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors for the blocks in each tower
        tower_colors = [
            ['red', 'green', 'blue'],
            ['orange', 'yellow', 'purple'],
            ['pink', 'cyan', 'indigo']
        ]

        # Add pallet as the base for the towers
        pallet_size = (0.3, 0.3, 0.02)  # x, y, z dimensions for the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, category='fixed')

        # Add zones on the pallet for each tower
        zone_size = (0.1, 0.1, 0)  # x, y, z dimensions for the zones
        zone_urdf = 'zone/zone.urdf'
        zone_poses = []
        for i in range(3):
            # Calculate zone poses with an offset from the pallet's pose
            zone_pose = (pallet_pose[0][0] + (i - 1) * 0.1, pallet_pose[0][1], pallet_pose[0][2] + 0.01)
            env.add_object(zone_urdf, (zone_pose, pallet_pose[1]), 'fixed')
            zone_poses.append((zone_pose, pallet_pose[1]))

        # Add blocks and define goals for each tower
        block_size = (0.04, 0.04, 0.04)  # x, y, z dimensions for the blocks
        block_urdf = 'stacking/block.urdf'
        for i, colors in enumerate(tower_colors):
            objs = []
            for j, color_name in enumerate(colors):
                # Get the color RGB values
                color = utils.COLORS[color_name]
                # Get a random pose for the block
                block_pose = self.get_random_pose(env, block_size)
                # Add the block to the environment
                block_id = env.add_object(block_urdf, block_pose, color=color)
                objs.append(block_id)

                # Define the target pose for the block on the zone
                targ_pose = (zone_poses[i][0][0], zone_poses[i][0][1], zone_poses[i][0][2] + (j + 1) * block_size[2])
                # Add the goal for the block
                self.add_goal(
                    objs=[block_id],
                    matches=np.ones((1, 1)),
                    targ_poses=[(targ_pose, zone_poses[i][1])],
                    replace=False,
                    rotations=True,
                    metric='pose',
                    params=None,
                    step_max_reward=1 / 9,  # There are 9 blocks in total, so each block placed correctly contributes 1/9 to the total reward
                    language_goal=self.lang_template.format(blocks=color_name, color=colors[i])
                )