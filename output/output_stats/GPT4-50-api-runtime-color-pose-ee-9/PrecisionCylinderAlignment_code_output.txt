import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionCylinderAlignment(Task):
    """Arrange three cylinders of distinct colors in a precise linear formation within a narrow marked zone."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is set to twice the number of goals
        self.lang_template = "align the {color} cylinder in the marked zone"
        self.task_completed_desc = "done aligning cylinders."
        self.ee = Suction  # Use Suction end-effector to move cylinders on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the colors for the three cylinders
        colors = ['red', 'green', 'blue']
        color_names = ['red', 'green', 'blue']
        cylinder_sizes = [(0.04, 0.04, 0.08),  # Small cylinder
                          (0.04, 0.04, 0.12),  # Medium cylinder
                          (0.04, 0.04, 0.16)]  # Large cylinder

        # Add the line zone where cylinders will be aligned
        line_size = (0.12, 0.02, 0)  # Size of the line zone
        line_pose = self.get_random_pose(env, line_size)  # Random pose for the line zone
        line_urdf = 'line/single-green-line-template.urdf'
        env.add_object(line_urdf, line_pose, 'fixed')

        # Add cylinders with distinct colors and sizes
        cylinder_urdf_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i in range(3):
            # Get random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_sizes[i])
            # Fill the URDF template with the specific size and color for the cylinder
            replace = {'SIZE': cylinder_sizes[i], 'COLOR': utils.COLORS[colors[i]]}
            cylinder_urdf = self.fill_template(cylinder_urdf_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append(cylinder_id)

        # Define the target poses for the cylinders within the line zone
        # The target poses are spaced evenly along the line zone
        targ_x_positions = [line_pose[0][0] - line_size[0] / 4,
                            line_pose[0][0],
                            line_pose[0][0] + line_size[0] / 4]
        targ_poses = [([x, line_pose[0][1], line_pose[0][2]], line_pose[1]) for x in targ_x_positions]

        # Add goals for each cylinder
        for i in range(3):
            language_goal = self.lang_template.format(color=color_names[i])
            self.add_goal(objs=[cylinders[i]], matches=np.int32([[1]]), targ_poses=[targ_poses[i]], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/3,
                          language_goal=language_goal)

# Note: The cylinders are placed in the environment with random initial poses.
# The target poses are calculated based on the position of the line zone, ensuring that the cylinders
# are aligned within the boundaries of the line zone. The Suction end-effector is used to pick and place
# the cylinders vertically. The `step_max_reward` is divided equally among the three goals.