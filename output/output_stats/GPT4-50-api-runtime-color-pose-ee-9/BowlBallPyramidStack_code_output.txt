import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlBallPyramidStack(Task):
    """
    Construct a symmetrical pyramid by stacking three colored balls on top of each other within a bowl,
    without any of the balls rolling out of the bowl or losing balance.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is twice the number of goals
        self.lang_template = "stack the {color} ball on top of the {base_color} ball in the bowl"
        self.task_completed_desc = "done stacking the ball pyramid in the bowl."
        self.ee = Suction  # Using Suction end-effector to pick and place balls in the Z axis
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the bowl properties
        bowl_size = (0.18, 0.18, 0.06)  # Size of the bowl (x, y, z)
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_pose = self.get_random_pose(env, bowl_size)
        env.add_object(bowl_urdf, bowl_pose, category='fixed')

        # Define the balls properties
        ball_template = 'ball/ball-template.urdf'
        ball_radius = 0.04  # Radius of the balls
        ball_scale = [ball_radius] * 3  # Scale for the ball URDF

        # Colors for the balls
        ball_colors = ['red', 'green', 'blue']
        ball_color_values = [utils.COLORS[color] for color in ball_colors]

        # Add balls and set goals
        balls = []
        for i, color in enumerate(ball_colors):
            replace = {'COLOR': ball_color_values[i], 'SCALE': ball_scale}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_pose = self.get_random_pose(env, (ball_radius, ball_radius, ball_radius))
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append(ball_id)

            # Define the target pose for each ball
            # The z-coordinate is incremented by 2 * ball_radius for each subsequent ball
            targ_pose = (bowl_pose[0], bowl_pose[1], bowl_pose[2] + (i * 2 * ball_radius))
            targ_poses = [(targ_pose, (0, 0, 0, 1))]  # Quaternion (0, 0, 0, 1) represents no rotation

            # Define the language goal for each ball
            base_color = 'the bowl' if i == 0 else ball_colors[i - 1]
            language_goal = self.lang_template.format(color=color, base_color=base_color)

            # Add the goal for the current ball
            self.add_goal(objs=[ball_id], matches=np.ones((1, 1)), targ_poses=targ_poses, replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / len(ball_colors),
                          language_goal=language_goal)

        # Set the primitive action to be used (pick and place)
        self.primitive = primitives.pick_place