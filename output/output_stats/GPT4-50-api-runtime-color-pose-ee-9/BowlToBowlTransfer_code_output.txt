import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlToBowlTransfer(Task):
    """Pick up a series of five differently colored balls from a single blue bowl and transfer each one into separate bowls of matching color."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to add 5 goals, so max_steps is set to twice that number
        self.lang_template = "transfer the {color} ball to the {color} bowl"
        self.task_completed_desc = "done transferring balls."
        self.ee = Suction  # Using Suction end-effector to pick up balls

    def reset(self, env):
        super().reset(env)

        # Define the colors for the balls and bowls
        ball_colors = ['red', 'green', 'orange', 'yellow', 'purple']
        bowl_colors = ball_colors.copy()  # Matching bowls for each ball color

        # Add the blue bowl with the balls
        blue_bowl_size = (0.18, 0.18, 0.06)  # Size of the blue bowl
        blue_bowl_pose = self.get_random_pose(env, blue_bowl_size)
        blue_bowl_urdf = 'bowl/bowl.urdf'
        env.add_object(blue_bowl_urdf, blue_bowl_pose, 'fixed', color=utils.COLORS['blue'])

        # Add balls to the blue bowl
        ball_size = (0.04, 0.04, 0.04)  # Size of the balls
        ball_template = 'ball/ball-template.urdf'
        balls = []
        for color in ball_colors:
            ball_pose = self.get_random_pose(env, ball_size)
            replace = {'COLOR': utils.COLORS[color]}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append((ball_id, color))

        # Add target bowls for each ball
        target_bowls = []
        for color in bowl_colors:
            bowl_pose = self.get_random_pose(env, blue_bowl_size)
            env.add_object(blue_bowl_urdf, bowl_pose, 'fixed', color=utils.COLORS[color])
            target_bowls.append((bowl_pose, color))

        # Add goals for transferring each ball to the matching bowl
        for ball, ball_color in balls:
            # Find the target bowl pose for the current ball color
            target_bowl_pose = next(bowl_pose for bowl_pose, color in target_bowls if color == ball_color)
            # Define the language goal for the current step
            language_goal = self.lang_template.format(color=ball_color)
            # Add the goal for the current ball
            self.add_goal(objs=[ball], matches=np.ones((1, 1)), targ_poses=[target_bowl_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/5,
                          language_goal=language_goal)

# Instantiate the task
task = BowlToBowlTransfer()