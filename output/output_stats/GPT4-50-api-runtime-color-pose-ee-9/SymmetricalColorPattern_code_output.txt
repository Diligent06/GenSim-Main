import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class SymmetricalColorPattern(Task):
    """Pick up and place a series of differently colored cylinders on each side of a central green line marked on the tabletop, mirroring the position and color of each cylinder to form a symmetrical pattern."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have at most 5 cylinders to place, 2 steps per cylinder
        self.lang_template = "place the {color} cylinder on the {side} side of the green line"
        self.task_completed_desc = "done creating a symmetrical color pattern."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Add central green line to the environment
        line_size = (0.01, 0.5, 0.001)  # Thin and long line
        line_pose = self.get_random_pose(env, line_size)
        line_template = 'line/single-green-line-template.urdf'
        replace = {'DIM': line_size}
        line_urdf = self.fill_template(line_template, replace)
        env.add_object(line_urdf, line_pose, 'fixed')

        # Define the number of cylinders and their colors
        n_cylinders = 5
        colors = ['red', 'blue', 'yellow', 'purple', 'orange']
        np.random.shuffle(colors)  # Shuffle colors to randomize the order

        # Add cylinders to the environment
        cylinder_size = (0.02, 0.02, 0.08)  # Diameter, Diameter, Height
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_poses = []  # Store initial poses to mirror them later
        for i in range(n_cylinders):
            # Generate a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)
            cylinder_poses.append(pose)
            replace = {
                'DIM': cylinder_size,
                'COLOR': utils.COLORS[colors[i]]  # Get the RGB values for the color
            }
            # Create the URDF for the cylinder with the specified color
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            env.add_object(cylinder_urdf, pose)

        # Add goals for placing the cylinders in a symmetrical pattern
        for i, pose in enumerate(cylinder_poses):
            # Mirror the x-coordinate across the green line to get the target position
            mirrored_x = 1 - pose[0][0]  # Assuming the green line is at x=0.5
            target_pose = [(mirrored_x, pose[0][1], pose[0][2]), pose[1]]  # Same orientation as the initial pose
            # Define the language goal for each cylinder
            side = 'left' if mirrored_x < 0.5 else 'right'
            language_goal = self.lang_template.format(color=colors[i], side=side)
            # Add the goal for the current cylinder
            self.add_goal(objs=[i], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

# Note: The actual positions of the cylinders and the green line may need to be adjusted to ensure
# that they are within the workspace bounds and that the cylinders do not collide with each other.
# The mirroring calculation assumes that the green line is at x=0.5 in the workspace.