import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedPalletOrganization(Task):
    """Arrange colored cylinders on a pallet by matching cylinder colors to designated zones."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Set max steps to twice the number of goals
        self.lang_template = "place the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done organizing the pallet."
        self.ee = Suction  # Use Suction end-effector for vertical movement

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones
        n_cylinders = 5
        n_zones = 5

        # Add pallet
        pallet_size = (0.3, 0.3, 0.02)  # Define the size of the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)  # Get a random pose for the pallet
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')  # Add the pallet to the environment

        # Define available colors
        colors = ['red', 'green', 'blue', 'yellow', 'purple']

        # Add zones to the pallet
        zone_size = (0.1, 0.1, 0)  # Define the size of the zones
        zone_urdf = 'zone/zone.urdf'
        zone_poses = []
        for i in range(n_zones):
            # Calculate zone position based on pallet position and zone size
            zone_x = pallet_pose[0][0] - pallet_size[0]/2 + zone_size[0]/2 + i * zone_size[0]
            zone_y = pallet_pose[0][1]
            zone_z = pallet_pose[0][2] + pallet_size[2]
            zone_pose = ((zone_x, zone_y, zone_z), pallet_pose[1])
            env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[colors[i]])
            zone_poses.append(zone_pose)

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.02, 0.02, 0.1)  # Define the size of the cylinders
        for i in range(n_cylinders):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Set the color of the cylinder
            color = colors[i]
            replace = {'COLOR': utils.COLORS[color]}
            # Fill the cylinder URDF template with the color
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            # Define the language goal
            language_goal = self.lang_template.format(color=color)
            # Add the goal for the cylinder to be placed in the matching color zone
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_poses[i]], replace=True,
                          rotations=False, metric='zone', params=[(zone_poses[i], zone_size)], step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

# Instantiate the task
task = ColorCodedPalletOrganization()