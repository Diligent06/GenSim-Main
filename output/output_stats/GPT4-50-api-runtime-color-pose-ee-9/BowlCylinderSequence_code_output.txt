import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlCylinderSequence(Task):
    """Place a series of different colored cylinders into corresponding colored bowls arranged in a line, ensuring that the sequence of cylinder colors matches the sequence of bowl colors from left to right."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have 5 goals (one for each cylinder)
        self.lang_template = "put the {color} cylinder in the {color} bowl"
        self.task_completed_desc = "done placing cylinders in sequence."
        self.ee = Suction  # Using Suction end-effector to pick and place cylinders
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the colors for the bowls and cylinders
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_sequence = np.random.choice(colors, len(colors), replace=False)

        # Add bowls in a line with corresponding colors from left to right
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_size = (0.12, 0.12, 0.06)  # Approximate size of the bowl
        bowl_poses = []
        for i, color in enumerate(color_sequence):
            x = 0.25 + i * (0.1 + bowl_size[0])  # Space out the bowls along the x-axis
            y = 0  # Align bowls along the y-axis
            z = 0.03  # Place bowls slightly above the ground to avoid collision
            bowl_pose = self.get_random_pose(env, bowl_size, x_bounds=(x, x), y_bounds=(y, y), z_bounds=(z, z))
            env.add_object(bowl_urdf, bowl_pose, 'fixed', color=utils.COLORS[color])
            bowl_poses.append(bowl_pose)

        # Add cylinders with corresponding colors
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.05, 0.05, 0.1)  # Approximate size of the cylinder
        cylinders = []
        for i, color in enumerate(color_sequence):
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': utils.COLORS[color]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Add goal for each cylinder to be placed in the corresponding bowl
            language_goal = self.lang_template.format(color=color)
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[bowl_poses[i]], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / len(colors),
                          language_goal=language_goal)