import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderHeightSorting(Task):
    """Arrange five cylinders of varying heights and colors into ascending order within a designated zone on the tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to sort 5 cylinders, so 10 steps should be sufficient
        self.lang_template = "sort the {color} cylinder by height in the designated zone"
        self.task_completed_desc = "done sorting cylinders by height."
        self.ee = Suction  # We need to move cylinders vertically, so Suction is appropriate

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and their possible colors
        n_cylinders = 5
        colors = ['red', 'green', 'blue', 'yellow', 'purple']

        # Add the sorting zone
        zone_size = (0.3, 0.3, 0)  # A flat zone with enough space to sort cylinders
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Initialize list to store cylinder objects and their heights
        cylinders = []
        heights = []

        # Add cylinders with varying heights and colors
        for i in range(n_cylinders):
            # Generate a random height for the cylinder
            height = np.random.uniform(0.1, 0.2)  # Heights between 0.1 and 0.2 meters
            heights.append(height)

            # Choose a color for the cylinder
            color_name = np.random.choice(colors)
            color_rgb = utils.COLORS[color_name]

            # Define the cylinder size
            size = (0.05, 0.05, height)  # Diameter is fixed, height varies

            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, size)

            # Create the cylinder URDF using the template
            cylinder_template = 'cylinder/cylinder-template.urdf'
            replace = {'SIZE': size, 'COLOR': color_rgb}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder object to the environment
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append((cylinder_id, height))

        # Sort the cylinders by height
        sorted_cylinders = sorted(cylinders, key=lambda x: x[1])

        # Add goals for each cylinder to be placed in ascending order of height within the zone
        for i, (cylinder_id, _) in enumerate(sorted_cylinders):
            # Define the target position within the zone for the cylinder
            # We place them in a line with equal spacing
            target_x = zone_pose[0][0] - zone_size[0] / 2 + zone_size[0] * (i + 1) / (n_cylinders + 1)
            target_y = zone_pose[0][1]
            target_z = 0.01  # Slightly above the zone to avoid collision
            target_pose = [(target_x, target_y, target_z), (0, 0, 0, 1)]  # No rotation needed

            # Add the goal for the cylinder
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=self.lang_template.format(color=color_name))

        # Set the language goal for the entire task
        self.lang_goals = [self.lang_template.format(color=color) for color in colors]

# Instantiate the task
task = CylinderHeightSorting()