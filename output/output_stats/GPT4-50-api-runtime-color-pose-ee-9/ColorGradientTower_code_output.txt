import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorGradientTower(Task):
    """Build a tower using six differently colored cylinders by stacking them onto a stand in an order that creates a color gradient from darkest to lightest, while avoiding placement inside marked no-go zones."""

    def __init__(self):
        super().__init__()
        self.max_steps = 12  # We expect to call self.add_goal six times, so we set max_steps to twice that number
        self.lang_template = "stack the {color} cylinder on the stand"
        self.task_completed_desc = "done building the color gradient tower."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors in order from darkest to lightest
        color_names = ['indigo', 'blue', 'green', 'yellow', 'orange', 'red']
        colors = [utils.COLORS[name] for name in color_names]

        # Add the stand
        stand_size = (0.05, 0.05, 0.005)  # Size of the stand
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Add the no-go zone
        zone_size = (0.15, 0.15, 0)  # Size of the no-go zone
        zone_urdf = 'zone/zone.urdf'
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object(zone_urdf, zone_pose, 'fixed')

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.02, 0.02, 0.08)  # Size of the cylinders
        cylinder_poses = []
        for i, color in enumerate(colors):
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': color}
            # Fill the URDF template with the color
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinder_poses.append((cylinder_id, pose))

        # Define the target poses for the cylinders on the stand
        # The cylinders should be stacked on top of each other in the order of the color gradient
        targ_poses = []
        for i in range(len(cylinder_poses)):
            x, y, z = stand_pose[0]
            # Increment the z-coordinate for each cylinder to stack them
            z += (i + 1) * cylinder_size[2]
            targ_poses.append(((x, y, z), (0, 0, 0, 1)))  # We keep the orientation the same

        # Add goals for each cylinder
        for i, (cylinder_id, _) in enumerate(cylinder_poses):
            language_goal = self.lang_template.format(color=color_names[i])
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[targ_poses[i]],
                          replace=False, rotations=False, metric='pose', params=None,
                          step_max_reward=1/6, language_goal=language_goal)

        # The task is set up with cylinders and goals, ready for the agent to execute