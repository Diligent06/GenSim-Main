import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderTowerBalancing(Task):
    """
    Build a tower by stacking three different colored cylinders on top of each other
    on a single colored block, ensuring that the tower remains balanced and does not
    topple over for at least five seconds.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 cylinders to stack, so 6 steps should be enough
        self.lang_template = "stack the {color} cylinder on top of the {base_color} block"
        self.task_completed_desc = "done building the cylinder tower."
        self.ee = Suction  # Suction is needed to lift cylinders along the Z axis
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the size and color of the base block
        base_size = (0.1, 0.1, 0.02)  # x, y, z dimensions
        base_color = 'blue'  # Color of the base block
        base_urdf = 'stacking/block.urdf'  # URDF file for the base block

        # Add the base block to the environment
        base_pose = self.get_random_pose(env, base_size)
        base_id = env.add_object(base_urdf, base_pose, 'fixed', color=utils.COLORS[base_color])

        # Define the properties of the cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_height = 0.06
        cylinder_radius = 0.025
        cylinder_colors = ['red', 'green', 'yellow']  # Colors of the cylinders

        # Add cylinders to the environment
        cylinders = []
        for color in cylinder_colors:
            # Generate a random pose for the cylinder
            cylinder_size = (2 * cylinder_radius, 2 * cylinder_radius, cylinder_height)
            cylinder_pose = self.get_random_pose(env, cylinder_size)

            # Replace the template URDF with the specific cylinder properties
            replace = {
                'COLOR': utils.COLORS[color],
                'SIZE': cylinder_size
            }
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

        # Define the target poses for the cylinders to be stacked on the base block
        # The cylinders are stacked along the z-axis, so we only need to increment the z-coordinate
        z_offset = base_size[2]  # Start stacking from the top of the base block
        targ_poses = []
        for i in range(len(cylinder_colors)):
            # The x, y coordinates are the same as the base block, only z changes
            targ_pose = (base_pose[0], (0, 0, z_offset))
            targ_poses.append(targ_pose)
            z_offset += cylinder_height  # Increment z for the next cylinder

            # Add a goal for each cylinder
            language_goal = self.lang_template.format(color=cylinder_colors[i], base_color=base_color)
            self.add_goal(objs=[cylinders[i]], matches=np.ones((1, 1)), targ_poses=[targ_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/3,
                          language_goal=language_goal)

        # The task is to stack the cylinders in the order red, green, yellow on the blue block