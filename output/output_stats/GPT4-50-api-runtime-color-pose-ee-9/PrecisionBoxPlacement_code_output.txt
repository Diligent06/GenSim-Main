import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionBoxPlacement(Task):
    """Pick up a small blue box and place it precisely within the bounds of a marked white zone on a pallet, ensuring the box does not touch the zone's edges."""

    def __init__(self):
        super().__init__()
        self.max_steps = 2  # One step to pick and one step to place
        self.lang_template = "place the blue box in the center of the white zone without touching the edges"
        self.task_completed_desc = "done placing the blue box."
        self.ee = Suction  # Using Suction end-effector to pick up the box

    def reset(self, env):
        super().reset(env)

        # Define the size of the blue box
        box_size = (0.05, 0.05, 0.05)  # Small box size

        # Define the size and pose of the white zone
        zone_size = (0.15, 0.15, 0)  # Larger than the box to fit within bounds
        zone_pose = self.get_random_pose(env, zone_size)  # Random pose within workspace bounds

        # Define the size and pose of the pallet
        pallet_size = (0.3, 0.3, 0.02)  # Size of the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)  # Random pose within workspace bounds

        # Add the pallet to the environment
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Add the white zone to the environment
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Generate the blue color for the box
        blue_color = utils.COLORS['blue']

        # Add the blue box to the environment
        box_template = 'box/box-template.urdf'
        box_pose = self.get_random_pose(env, box_size)  # Random pose within workspace bounds
        replace = {'SIZE': box_size, 'COLOR': blue_color}
        box_urdf = self.fill_template(box_template, replace)
        box_id = env.add_object(box_urdf, box_pose)

        # Define the language goal
        language_goal = self.lang_template

        # Add the goal for the task
        # The target pose is the same as the zone pose but with a z-offset to place the box above the zone
        target_pose = (zone_pose[0], zone_pose[1])
        self.add_goal(objs=[box_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                      rotations=False, metric='pose', params=None, step_max_reward=1, language_goal=language_goal)

# Instantiate the task
task = PrecisionBoxPlacement()