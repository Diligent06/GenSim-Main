import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderSortIntoBowls(Task):
    """
    Sort a set of five differently colored cylinders by placing each into a bowl with a matching color outline around the rim,
    without disturbing surrounding neutral-colored objects.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Set to twice the number of cylinders to allow for repositioning if needed
        self.lang_template = "put the {color} cylinder in the {color} bowl"
        self.task_completed_desc = "done sorting cylinders into bowls."
        self.ee = Suction  # Use Suction end-effector to pick and place cylinders

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and bowls
        n_cylinders = 5
        n_bowls = 5

        # Define the size of the cylinders and bowls
        cylinder_size = (0.04, 0.04, 0.1)  # (radius, radius, height)
        bowl_size = (0.15, 0.15, 0.06)  # (radius, radius, height)

        # Define the colors for the cylinders and bowls
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        neutral_color = 'gray'

        # Add bowls with matching color outlines
        bowls = []
        for i in range(n_bowls):
            color = utils.COLORS[colors[i]]
            bowl_pose = self.get_random_pose(env, bowl_size)
            bowl_urdf = 'bowl/bowl.urdf'
            bowl_id = env.add_object(bowl_urdf, bowl_pose, color=color)
            bowls.append((bowl_id, bowl_pose))

        # Add cylinders
        cylinders = []
        for i in range(n_cylinders):
            color = utils.COLORS[colors[i]]
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_template = 'cylinder/cylinder-template.urdf'
            replace = {'COLOR': color}
            # IMPORTANT: REPLACE THE TEMPLATE URDF with `fill_template`
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append((cylinder_id, cylinder_pose))

        # Add neutral-colored objects as distractors
        n_distractors = 5
        for _ in range(n_distractors):
            distractor_pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': utils.COLORS[neutral_color]}
            # IMPORTANT: REPLACE THE TEMPLATE URDF with `fill_template`
            distractor_urdf = self.fill_template(cylinder_template, replace)
            env.add_object(distractor_urdf, distractor_pose)

        # Define goals for each cylinder to be placed in the matching bowl
        for i in range(n_cylinders):
            color_name = colors[i]
            cylinder_id, _ = cylinders[i]
            _, bowl_pose = bowls[i]
            language_goal = self.lang_template.format(color=color_name)
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[bowl_pose], replace=True,
                          rotations=False, metric='pose', params=None, step_max_reward=1,
                          language_goal=language_goal)

# Instantiate the task
task = CylinderSortIntoBowls()