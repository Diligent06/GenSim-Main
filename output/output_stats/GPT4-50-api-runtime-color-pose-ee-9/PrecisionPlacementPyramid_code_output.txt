import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionPlacementPyramid(Task):
    """
    Carefully place one red, one green, and one blue cylinder in a vertical arrangement
    to form a small pyramid within a demarcated zone on the tabletop, with the red cylinder
    at the base, green in the middle, and blue at the apex.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is twice the number of goals
        self.lang_template = "place the {color} cylinder {position} in the pyramid"
        self.task_completed_desc = "done building the pyramid."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define cylinder size and colors
        cylinder_size = (0.04, 0.04, 0.12)  # Diameter, Diameter, Height
        cylinder_urdf = 'cylinder/cylinder-template.urdf'
        colors = {'red': utils.COLORS['red'], 'green': utils.COLORS['green'], 'blue': utils.COLORS['blue']}

        # Add goal zone
        zone_size = (0.15, 0.15, 0)  # Size of the zone where the pyramid will be built
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Add cylinders and store their IDs
        cylinder_ids = {}
        for color_name, color_rgb in colors.items():
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Replace the color in the URDF template
            replace = {'COLOR': color_rgb}
            # Fill the URDF template with the specific color
            urdf = self.fill_template(cylinder_urdf, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, cylinder_pose)
            cylinder_ids[color_name] = cylinder_id

        # Define the target poses for each cylinder in the pyramid
        base_height = cylinder_size[2] / 2
        second_height = cylinder_size[2] + base_height
        apex_height = cylinder_size[2] / 2 + second_height

        # Target poses are directly above the center of the zone, at the correct height for each layer
        target_poses = {
            'red': (zone_pose[0], (0, 0, base_height)),
            'green': (zone_pose[0], (0, 0, second_height)),
            'blue': (zone_pose[0], (0, 0, apex_height))
        }

        # Add goals for each cylinder
        for color, cylinder_id in cylinder_ids.items():
            # Language goal describes the color and position of the cylinder in the pyramid
            language_goal = self.lang_template.format(color=color, position="at the base" if color == 'red' else "in the middle" if color == 'green' else "at the apex")
            # Add the goal with the target pose and language goal
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_poses[color]],
                          replace=False, rotations=False, metric='pose', params=None, step_max_reward=1,
                          language_goal=language_goal)