import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionBallPlacement(Task):
    """
    Carefully place a sequence of three differently colored balls into a corresponding set of three bowls aligned in a straight line,
    without knocking over the bowls or displacing the previously placed balls.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have three balls to place, so we set max_steps to twice the number of balls
        self.lang_template = "place the {color} ball in the {color} bowl"
        self.task_completed_desc = "done placing all balls in the bowls."
        self.ee = Suction  # Using Suction end-effector to pick and place balls
        self.primitive = None  # No primitive action is specified as we are using pick and place actions
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the colors for the balls and bowls
        ball_colors = ['red', 'green', 'blue']
        bowl_colors = ball_colors  # Corresponding colors for the bowls

        # Add bowls to the environment
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_size = (0.12, 0.12, 0.06)  # Approximate size of the bowl
        bowl_poses = []  # To store the poses of the bowls
        for i in range(3):
            # Generate a random pose for the bowl within the workspace bounds
            bowl_pose = self.get_random_pose(env, bowl_size)
            # Add the bowl to the environment with the corresponding color
            env.add_object(bowl_urdf, bowl_pose, 'fixed', color=utils.COLORS[bowl_colors[i]])
            bowl_poses.append(bowl_pose)

        # Add balls to the environment
        ball_template = 'ball/ball-template.urdf'
        ball_size = (0.04, 0.04, 0.04)  # Approximate size of the ball
        ball_ids = []  # To store the IDs of the balls
        for i, color in enumerate(ball_colors):
            # Generate a random pose for the ball within the workspace bounds
            ball_pose = self.get_random_pose(env, ball_size)
            # Replace the color in the URDF template
            replace = {'COLOR': utils.COLORS[color]}
            # IMPORTANT: REPLACE THE TEMPLATE URDF with `fill_template`
            ball_urdf = self.fill_template(ball_template, replace)
            # Add the ball to the environment
            ball_id = env.add_object(ball_urdf, ball_pose)
            ball_ids.append(ball_id)

            # Define the language goal for placing the ball
            language_goal = self.lang_template.format(color=color)
            # Add the goal for placing the ball in the corresponding bowl
            self.add_goal(objs=[ball_id], matches=np.int32([[1]]), targ_poses=[bowl_poses[i]], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/3,
                          language_goal=language_goal)

        # The task is set up with three balls and corresponding bowls with matching colors