import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlAndBlockTower(Task):
    """Construct a color-coordinated tower by placing a series of three differently colored blocks on top of a bowl."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is twice that number
        self.lang_template = "place the {color} block on the {target}"
        self.task_completed_desc = "done constructing the block tower."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors for the blocks and the zones on the pallet
        block_colors = ['red', 'green', 'blue']
        zone_colors = ['red', 'green', 'blue']

        # Add a bowl to the environment
        bowl_size = (0.12, 0.12, 0.06)  # x, y, z dimensions for the bowl
        bowl_pose = self.get_random_pose(env, bowl_size)
        bowl_urdf = 'bowl/bowl.urdf'
        env.add_object(bowl_urdf, bowl_pose, 'fixed')

        # Add blocks to the environment
        blocks = []
        block_sizes = [(0.06, 0.06, 0.02), (0.05, 0.05, 0.02), (0.04, 0.04, 0.02)]  # Sizes for large, medium, small blocks
        block_urdf = 'stacking/block.urdf'
        for i in range(3):
            block_pose = self.get_random_pose(env, block_sizes[i])
            color = utils.COLORS[block_colors[i]]  # Get the RGB values for the block color
            block_id = env.add_object(block_urdf, block_pose, color=color)
            blocks.append(block_id)

        # Add a pallet to the environment
        pallet_size = (0.3, 0.3, 0.02)  # x, y, z dimensions for the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)
        pallet_urdf = 'pallet/pallet.urdf'
        env.add_object(pallet_urdf, pallet_pose, 'fixed')

        # Add zones to the pallet for color matching
        zone_size = (0.1, 0.1, 0)  # x, y dimensions for the zones (z is 0 because it's a flat zone)
        zone_urdf = 'zone/zone.urdf'
        zone_poses = []
        for i in range(3):
            # Calculate the position for each zone based on the pallet pose
            zone_pose = (pallet_pose[0][0] + (i - 1) * zone_size[0], pallet_pose[0][1], pallet_pose[0][2])
            zone_color = utils.COLORS[zone_colors[i]]  # Get the RGB values for the zone color
            env.add_object(zone_urdf, (zone_pose, pallet_pose[1]), 'fixed', color=zone_color)
            zone_poses.append((zone_pose, pallet_pose[1]))  # We only need the position for the goal

        # Add goals for placing blocks on the bowl in the correct order and color coordination
        for i in range(3):
            # The target pose for each block is on top of the bowl, with increasing z-coordinate
            targ_pose = (bowl_pose[0][0], bowl_pose[0][1], bowl_pose[0][2] + (i + 1) * 0.02)
            language_goal = self.lang_template.format(color=block_colors[i], target=zone_colors[i])
            self.add_goal(objs=[blocks[i]], matches=np.ones((1, 1)), targ_poses=[(targ_pose, (0, 0, 0, 1))], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/3, language_goal=language_goal)