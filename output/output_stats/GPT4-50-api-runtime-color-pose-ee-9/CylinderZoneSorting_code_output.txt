import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderZoneSorting(Task):
    """Arrange cylinders of different colors in designated zones marked with matching color outlines."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to complete the task in 5 steps, but allow extra steps for adjustments
        self.lang_template = "place the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done sorting all cylinders."
        self.ee = Suction  # Use suction end-effector to pick and place cylinders vertically

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones
        n_cylinders = 5
        n_zones = 5

        # Define available colors
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        np.random.shuffle(colors)  # Shuffle colors to randomize the task each time

        # Add cylinders
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i in range(n_cylinders):
            # Generate a random size for the cylinder
            size = self.get_random_size(0.04, 0.04, 0.1, 0.1, 0.1, 0.2)
            # Generate a random pose for the cylinder
            pose = self.get_random_pose(env, size)
            # Set the color of the cylinder
            color = utils.COLORS[colors[i]]
            # Replace the template URDF with the specific size and color
            replace = {'DIM': size, 'COLOR': color}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append((cylinder_id, colors[i]))

        # Add zones
        zone_template = 'zone/zone.urdf'
        for i, color in enumerate(colors):
            # Generate a random size for the zone
            zone_size = self.get_random_size(0.1, 0.1, 0, 0, 0, 0)
            # Generate a random pose for the zone
            zone_pose = self.get_random_pose(env, zone_size)
            # Set the color of the zone
            zone_color = utils.COLORS[color]
            # Replace the template URDF with the specific size and color
            replace = {'DIM': zone_size, 'COLOR': zone_color}
            zone_urdf = self.fill_template(zone_template, replace)
            # Add the zone to the environment
            env.add_object(zone_urdf, zone_pose, 'fixed')

            # Find the corresponding cylinder for the current zone
            for cylinder_id, cylinder_color in cylinders:
                if cylinder_color == color:
                    # Define the language goal for placing the cylinder in the zone
                    language_goal = self.lang_template.format(color=color)
                    # Add the goal for the cylinder to be placed in the zone
                    self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_pose], replace=False,
                                  rotations=False, metric='zone', params=[(zone_pose, zone_size)], step_max_reward=1/n_cylinders,
                                  language_goal=language_goal)
                    break  # Move on to the next zone after setting the goal for the current one

        # All cylinders and zones have been added, and goals have been set