import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlBallTower(Task):
    """
    Stack three differently colored balls inside a bowl without the tower toppling over,
    ordering them from largest at the bottom to smallest at the top.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is twice the number of goals
        self.lang_template = "put the {color} ball in the bowl"
        self.task_completed_desc = "done stacking the balls in the bowl."
        self.ee = Suction  # Using Suction end-effector as we need to move objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the colors and sizes for the balls
        ball_colors = ['red', 'green', 'blue']  # Colors for the balls
        ball_sizes = [(0.04, 0.04, 0.04), (0.03, 0.03, 0.03), (0.02, 0.02, 0.02)]  # Sizes from largest to smallest

        # Add the bowl
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_size = (0.15, 0.15, 0.07)  # Size of the bowl
        bowl_pose = self.get_random_pose(env, bowl_size)  # Get a random pose for the bowl
        env.add_object(bowl_urdf, bowl_pose, 'fixed')  # Add the bowl to the environment

        # Add the balls
        ball_template = 'ball/ball-template.urdf'
        ball_poses = []  # To store the initial poses of the balls
        ball_ids = []  # To store the IDs of the balls
        for i in range(3):
            # Get a random pose for the ball
            ball_pose = self.get_random_pose(env, ball_sizes[i])
            ball_poses.append(ball_pose)

            # Fill the ball URDF template with the specific color and size
            replace = {'COLOR': utils.COLORS[ball_colors[i]], 'SIZE': ball_sizes[i]}
            ball_urdf = self.fill_template(ball_template, replace)

            # Add the ball to the environment and store its ID
            ball_id = env.add_object(ball_urdf, ball_pose)
            ball_ids.append(ball_id)

        # Define the goals
        for i in range(3):
            # The target pose is inside the bowl, stacked on top of the previous ball (or the bowl if it's the first ball)
            z_offset = sum([size[2] for size in ball_sizes[:i]]) + bowl_size[2] / 2
            target_pose = (bowl_pose[0], (bowl_pose[1][0], bowl_pose[1][1], bowl_pose[1][2] + z_offset))

            # Define the language goal
            language_goal = self.lang_template.format(color=ball_colors[i])

            # Add the goal for the current ball
            self.add_goal(objs=[ball_ids[i]], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/3,
                          language_goal=language_goal)

        # The task is set up with three balls and a bowl, with goals to stack the balls in the bowl in size order.