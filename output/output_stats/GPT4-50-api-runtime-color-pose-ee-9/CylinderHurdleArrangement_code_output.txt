import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderHurdleArrangement(Task):
    """
    Arrange six different colored cylinders in ascending order of height over a sequence of three
    increasingly tall stands while avoiding the box obstacles placed between them.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have six cylinders to arrange, so we set max_steps to twice the number of goals.
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector.
        self.lang_template = "place the {color} cylinder on the {height} stand"
        self.task_completed_desc = "done arranging cylinders."

    def reset(self, env):
        super().reset(env)

        # Define the colors and sizes for the cylinders and stands.
        cylinder_colors = ['red', 'orange', 'yellow', 'green', 'blue', 'purple']
        cylinder_heights = [0.06, 0.08, 0.10, 0.12, 0.14, 0.16]  # Ascending order of heights.
        stand_heights = [0.10, 0.15, 0.20]  # Increasing stand heights.
        box_size = (0.05, 0.05, 0.05)  # Size of the box obstacles.

        # Add stands.
        stand_urdf = 'stacking/stand.urdf'
        stand_poses = []
        for i, stand_height in enumerate(stand_heights):
            stand_size = (0.05, 0.05, stand_height)
            stand_pose = self.get_random_pose(env, stand_size)
            env.add_object(stand_urdf, stand_pose, 'fixed')
            stand_poses.append(stand_pose)

        # Add cylinders.
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i, (color_name, height) in enumerate(zip(cylinder_colors, cylinder_heights)):
            cylinder_size = (0.02, 0.02, height)
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            color = utils.COLORS[color_name]
            replace = {'DIM': cylinder_size, 'COLOR': color}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append((cylinder_id, color_name))

        # Add box obstacles.
        box_template = 'box/box-template.urdf'
        for _ in range(3):  # Three box obstacles.
            box_pose = self.get_random_pose(env, box_size)
            replace = {'DIM': box_size}
            box_urdf = self.fill_template(box_template, replace)
            env.add_object(box_urdf, box_pose, 'rigid')

        # Add goals for each cylinder to be placed on the stands in ascending order of height.
        for i, (cylinder_id, color_name) in enumerate(cylinders):
            # The target stand is chosen based on the cylinder's height (shortest to tallest).
            target_stand_pose = stand_poses[i // 2]  # Three stands, two cylinders per stand.
            language_goal = self.lang_template.format(color=color_name, height=f"{stand_heights[i // 2]}m stand")
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_stand_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1,
                          language_goal=language_goal)