import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlTowerConstruction(Task):
    """
    Stack three differently colored bowls in a vertical tower with the largest at the bottom
    and the smallest at the top, then place a same-colored ball on the smallest bowl to complete the tower.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 8  # We expect to add 4 goals, so max_steps is twice that number
        self.lang_template = "stack the {color} bowl"
        self.task_completed_desc = "done constructing the bowl tower."
        self.ee = Suction  # Using Suction since we need to move objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the colors and sizes for the bowls and balls
        bowl_colors = ['red', 'green', 'blue']
        bowl_sizes = [(0.18, 0.18, 0.08), (0.15, 0.15, 0.06), (0.12, 0.12, 0.04)]
        ball_size = (0.04, 0.04, 0.04)  # Uniform size for all balls

        # Add bowls and balls to the environment
        bowls = []
        balls = []
        for i in range(3):
            # Add bowl
            bowl_pose = self.get_random_pose(env, bowl_sizes[i])
            bowl_urdf = 'bowl/bowl.urdf'
            bowl_id = env.add_object(bowl_urdf, bowl_pose, 'rigid', color=utils.COLORS[bowl_colors[i]])
            bowls.append((bowl_id, bowl_pose))

            # Add ball with the same color as the bowl
            ball_template = 'ball/ball-template.urdf'
            ball_pose = self.get_random_pose(env, ball_size)
            replace = {'COLOR': utils.COLORS[bowl_colors[i]]}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose, 'rigid')
            balls.append((ball_id, ball_pose))

        # Define the target poses for the bowls, stacked vertically
        base_height = 0.01  # Starting height for the first bowl
        targ_poses = []
        for size in bowl_sizes:
            base_height += size[2]  # Increment the z-coordinate for each bowl
            targ_poses.append((0.5, 0, base_height))

        # Add goals for stacking the bowls
        for i in range(3):
            language_goal = self.lang_template.format(color=bowl_colors[i])
            self.add_goal(objs=[bowls[i][0]], matches=np.ones((1, 1)), targ_poses=[targ_poses[i]],
                          replace=False, rotations=True, metric='pose', params=None,
                          step_max_reward=1/4, language_goal=language_goal)

        # Add the final goal for placing the ball on top of the smallest bowl
        ball_target_pose = (0.5, 0, base_height + bowl_sizes[-1][2] / 2 + ball_size[2] / 2)
        language_goal = "place the ball on the smallest bowl"
        self.add_goal(objs=[balls[-1][0]], matches=np.ones((1, 1)), targ_poses=[ball_target_pose],
                      replace=False, rotations=False, metric='pose', params=None,
                      step_max_reward=1/4, language_goal=language_goal)