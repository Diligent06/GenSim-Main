import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionPalletPlacement(Task):
    """Arrange four differently colored cylinders on a pallet, placing each one in a dedicated corner without any overlap between them."""

    def __init__(self):
        super().__init__()
        self.max_steps = 8  # We have 4 objects to place, so 8 steps should be sufficient
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.lang_template = "place the {color} cylinder in the {corner} corner of the pallet"
        self.task_completed_desc = "done placing all cylinders on the pallet."

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders
        colors = ['red', 'green', 'blue', 'yellow']
        color_names = [utils.COLORS[c] for c in colors]

        # Add the pallet
        pallet_size = (0.3, 0.3, 0.05)  # x, y, z dimensions for the pallet size
        pallet_pose = self.get_random_pose(env, pallet_size)
        pallet_urdf = 'pallet/pallet.urdf'
        env.add_object(pallet_urdf, pallet_pose, 'fixed')

        # Define the size for the cylinders
        cylinder_size = (0.05, 0.05, 0.1)  # x, y, z dimensions for the cylinder size

        # Add cylinders at random positions
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i, color in enumerate(colors):
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': color_names[i], 'SIZE': cylinder_size}
            # Replace the template URDF with the actual color and size
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append(cylinder_id)

        # Define the corners of the pallet for placing the cylinders
        corners = ['top left', 'top right', 'bottom left', 'bottom right']
        corner_poses = [
            (pallet_pose[0][0] - pallet_size[0] / 4, pallet_pose[0][1] - pallet_size[1] / 4, pallet_size[2]),
            (pallet_pose[0][0] + pallet_size[0] / 4, pallet_pose[0][1] - pallet_size[1] / 4, pallet_size[2]),
            (pallet_pose[0][0] - pallet_size[0] / 4, pallet_pose[0][1] + pallet_size[1] / 4, pallet_size[2]),
            (pallet_pose[0][0] + pallet_size[0] / 4, pallet_pose[0][1] + pallet_size[1] / 4, pallet_size[2])
        ]

        # Add goals for each cylinder to be placed in a corner of the pallet
        for i, (cylinder_id, corner, corner_pose) in enumerate(zip(cylinders, corners, corner_poses)):
            # Define the language goal
            language_goal = self.lang_template.format(color=colors[i], corner=corner)
            # Define the target pose for the cylinder
            targ_pose = (corner_pose, (0, 0, 0, 1))  # No rotation needed, keep the original orientation
            # Add the goal
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[targ_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1,
                          language_goal=language_goal)

        # Task is set up with all cylinders and goals added