import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderTowerZonePlacement(Task):
    """Stack a specified number of colored cylinders into a tower and place the tower within a designated zone on the tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we'll call self.add_goal twice, once for stacking and once for placing
        self.lang_template = "stack {num} {color} cylinders into a tower and place it in the designated zone"
        self.task_completed_desc = "done placing the cylinder tower in the zone."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders to stack.
        num_cylinders = np.random.randint(2, 5)  # Randomly choose between 2 to 4 cylinders to stack.

        # Define the color of the cylinders.
        cylinder_color_name = np.random.choice(['red', 'green', 'blue', 'yellow', 'purple', 'orange'])  # Random color.
        cylinder_color = utils.COLORS[cylinder_color_name]  # Get the RGB values for the chosen color.

        # Add the zone where the tower of cylinders needs to be placed.
        zone_size = (0.15, 0.15, 0)  # Define the size of the zone.
        zone_pose = self.get_random_pose(env, zone_size)  # Get a random pose for the zone within the workspace bounds.
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')  # Add the zone to the environment.

        # Add cylinders.
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.04, 0.04, 0.12)  # Define the size of the cylinder (diameter, diameter, height).
        cylinder_urdfs = []
        cylinder_poses = []
        for _ in range(num_cylinders):
            # Get a random pose for the cylinder.
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # IMPORTANT: REPLACE THE TEMPLATE URDF with `fill_template`
            replace = {'COLOR': cylinder_color, 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment and save its ID.
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinder_urdfs.append(cylinder_urdf)
            cylinder_poses.append(cylinder_pose)

        # Define the language goal.
        language_goal = self.lang_template.format(num=num_cylinders, color=cylinder_color_name)

        # Add the goal for stacking the cylinders.
        # IMPORTANT: Specify the target poses for the stacked cylinders.
        stack_height = cylinder_size[2]  # The height of one cylinder.
        stack_poses = []
        for i in range(num_cylinders):
            # Calculate the pose for each cylinder in the stack.
            stack_pose = (cylinder_poses[0][0], (cylinder_poses[0][1][0], cylinder_poses[0][1][1], cylinder_poses[0][1][2] + i * stack_height, cylinder_poses[0][1][3]))
            stack_poses.append(stack_pose)

        # Add the stacking goal.
        self.add_goal(objs=cylinder_urdfs, matches=np.eye(num_cylinders), targ_poses=stack_poses, replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=0.5, language_goal=language_goal)

        # Add the goal for placing the tower in the zone.
        # IMPORTANT: Specify the target pose for the tower in the zone.
        # We use the bottom cylinder's pose as the reference for the tower's base.
        tower_base_pose = stack_poses[0]
        zone_tower_pose = (zone_pose[0], tower_base_pose[1])  # The tower's base should be at the zone's position.
        self.add_goal(objs=cylinder_urdfs, matches=np.eye(num_cylinders), targ_poses=[zone_tower_pose] * num_cylinders, replace=True,
                      rotations=True, metric='zone', params=[(zone_pose, zone_size)], step_max_reward=0.5, language_goal=language_goal)