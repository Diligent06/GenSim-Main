import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlOnPalletArrangement(Task):
    """Arrange a set of four bowls in specific colors on the corners of a pallet, ensuring each bowl is centered within a marked zone."""

    def __init__(self):
        super().__init__()
        self.max_steps = 8  # We expect to call self.add_goal twice, so we set max_steps to 4 times that number
        self.lang_template = "place the {color} bowl on the {location} corner of the pallet"
        self.task_completed_desc = "done arranging the bowls on the pallet."
        self.ee = Suction  # We need to move bowls on the Z axis, so we use the Suction end-effector
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the colors for the bowls
        bowl_colors = ['red', 'green', 'blue', 'yellow']
        # Define the locations for the language template
        locations = ['top left', 'top right', 'bottom left', 'bottom right']

        # Add pallet
        pallet_size = (0.3, 0.3, 0.05)  # x, y, z dimensions for the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)
        pallet_urdf = 'pallet/pallet.urdf'
        env.add_object(pallet_urdf, pallet_pose, 'fixed')

        # Add zones on the corners of the pallet for bowl placement
        zone_size = (0.1, 0.1, 0)  # x, y, z dimensions for the zone
        zone_urdf = 'zone/zone.urdf'
        zone_poses = [
            (pallet_pose[0][0] - 0.1, pallet_pose[0][1] - 0.1, pallet_pose[0][2] + 0.05),  # top left
            (pallet_pose[0][0] + 0.1, pallet_pose[0][1] - 0.1, pallet_pose[0][2] + 0.05),  # top right
            (pallet_pose[0][0] - 0.1, pallet_pose[0][1] + 0.1, pallet_pose[0][2] + 0.05),  # bottom left
            (pallet_pose[0][0] + 0.1, pallet_pose[0][1] + 0.1, pallet_pose[0][2] + 0.05),  # bottom right
        ]
        for zone_pose in zone_poses:
            env.add_object(zone_urdf, (zone_pose, pallet_pose[1]), 'fixed')

        # Add bowls
        bowl_size = (0.1, 0.1, 0.05)  # x, y, z dimensions for the bowl
        bowl_urdf = 'bowl/bowl.urdf'
        bowls = []
        for i, color in enumerate(bowl_colors):
            bowl_pose = self.get_random_pose(env, bowl_size)
            bowl_color = utils.COLORS[color]
            bowl_id = env.add_object(bowl_urdf, bowl_pose, color=bowl_color)
            bowls.append(bowl_id)

            # Define the language goal for placing each bowl
            language_goal = self.lang_template.format(color=color, location=locations[i])
            # Add goal for each bowl to be placed in the corresponding zone
            self.add_goal(objs=[bowl_id], matches=np.ones((1, 1)), targ_poses=[(zone_poses[i], (0, 0, 0, 1))],
                          replace=True, rotations=False, metric='pose', params=None, step_max_reward=1/4,
                          language_goal=language_goal)

        # The task is set up with four bowls, each with a specific target zone on the pallet