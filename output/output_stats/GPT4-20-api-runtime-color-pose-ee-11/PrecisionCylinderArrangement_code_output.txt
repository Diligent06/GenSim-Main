import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionCylinderArrangement(Task):
    """Arrange cylinders in a line with precise spacing on a fixture, matching a color sequence."""

    def __init__(self):
        super().__init__()
        self.max_steps = 8  # We have 4 cylinders to place, so 8 steps should be sufficient
        self.lang_template = "place the {color} cylinder on the fixture at position {position}"
        self.task_completed_desc = "done arranging the cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so Suction is required

    def reset(self, env):
        super().reset(env)

        # Define the colors and the order in which the cylinders should be arranged
        color_sequence = ['red', 'green', 'blue', 'yellow']
        n_cylinders = len(color_sequence)

        # Add the fixture where the cylinders will be placed
        fixture_size = (0.05, 0.6, 0.01)  # Size of the fixture
        fixture_urdf = 'insertion/fixture.urdf'
        fixture_pose = self.get_random_pose(env, fixture_size)
        env.add_object(fixture_urdf, fixture_pose, 'fixed')

        # Initialize list to store cylinder IDs
        cylinder_ids = []

        # Add cylinders with the specified colors
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i, color_name in enumerate(color_sequence):
            # Generate the color for the cylinder
            color = utils.COLORS[color_name]

            # Generate a random pose for the cylinder
            cylinder_size = (0.02, 0.02, 0.1)  # Diameter and height of the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)

            # Replace the template URDF with the color and size of the cylinder
            replace = {'COLOR': color, 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinder_ids.append(cylinder_id)

        # Define the target positions for the cylinders on the fixture
        # The cylinders should be spaced evenly along the length of the fixture
        spacing = fixture_size[1] / (n_cylinders + 1)
        target_positions = [(fixture_pose[0][0], fixture_pose[0][1] - fixture_size[1]/2 + (i+1) * spacing, fixture_pose[0][2] + cylinder_size[2]/2) for i in range(n_cylinders)]

        # Add goals for each cylinder
        for i, (cylinder_id, target_position) in enumerate(zip(cylinder_ids, target_positions)):
            # The target pose is the position on the fixture with no rotation (identity quaternion)
            target_pose = (target_position, (0, 0, 0, 1))

            # Create the language goal for placing this cylinder
            language_goal = self.lang_template.format(color=color_sequence[i], position=i+1)

            # Add the goal for the cylinder
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

# Instantiate the task
task = PrecisionCylinderArrangement()