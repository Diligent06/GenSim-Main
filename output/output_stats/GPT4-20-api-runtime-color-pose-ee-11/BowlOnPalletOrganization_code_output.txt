import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlOnPalletOrganization(Task):
    """Arrange a set of three colored bowls on a pallet by placing them in a triangle formation."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We expect to call self.add_goal three times, so max_steps is set to twice that number
        self.lang_template = "place the {color} bowl on the pallet to form a triangle"
        self.task_completed_desc = "done organizing bowls on pallet."
        self.ee = Suction  # We need to move bowls on the Z axis, so we use the Suction end-effector
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the colors for the bowls
        bowl_colors = ['red', 'green', 'blue']
        # Define the size for the bowls
        bowl_size = (0.12, 0.12, 0.06)  # (x, y, z) dimensions

        # Add pallet
        pallet_size = (0.3, 0.3, 0.02)  # (x, y, z) dimensions
        pallet_pose = self.get_random_pose(env, pallet_size)
        pallet_urdf = 'pallet/pallet.urdf'
        env.add_object(pallet_urdf, pallet_pose, 'fixed')

        # Add bowls and set their target poses
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_poses = []
        target_poses = []
        for i in range(3):
            # Get a random pose for the bowl
            bowl_pose = self.get_random_pose(env, bowl_size)
            bowl_poses.append(bowl_pose)
            # Add the bowl to the environment
            env.add_object(bowl_urdf, bowl_pose, color=utils.COLORS[bowl_colors[i]])

            # Calculate the target pose for the bowl on the pallet
            # We want to arrange them in a triangle formation
            offset = np.array([[-bowl_size[0], 0, bowl_size[2]], [bowl_size[0], 0, bowl_size[2]], [0, bowl_size[1], bowl_size[2]]])
            target_pose = (pallet_pose[0] + offset[i], pallet_pose[1])  # Use the pallet's orientation
            target_poses.append(target_pose)

            # Define the language goal
            language_goal = self.lang_template.format(color=bowl_colors[i])

            # Add the goal for placing the bowl on the pallet
            self.add_goal(objs=[bowl_poses[i]], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/3, language_goal=language_goal)

        # Note: The bowls are placed in a way that they touch each other to form a triangle on the pallet
        # without any overlaps. The target poses are calculated based on the pallet's pose and an offset
        # that arranges the bowls in a triangle formation.