import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedCylinderAlignment(Task):
    """Arrange three differently colored cylinders in a row on a tabletop, with each cylinder touching a corresponding colored line without overlapping."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 goals, so max_steps is set to twice that number
        self.lang_template = "put the {color} cylinder on the {color} line"
        self.task_completed_desc = "done arranging cylinders."
        self.ee = Suction  # Using Suction since we need to move objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders and lines
        cylinder_colors = ['red', 'green', 'blue']
        line_colors = ['red', 'green', 'blue']
        np.random.shuffle(cylinder_colors)  # Shuffle to randomize the order of cylinders

        # Define the size of the cylinders
        cylinder_size = (0.04, 0.04, 0.12)  # (radius, radius, height)

        # Add cylinders with corresponding colors
        cylinders = []
        for color in cylinder_colors:
            # Generate a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Set the color using the utils.COLORS dictionary
            cylinder_color = utils.COLORS[color]
            # Fill the URDF template with the cylinder's properties
            cylinder_urdf = self.fill_template('cylinder/cylinder-template.urdf', {'COLOR': cylinder_color})
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append((cylinder_id, color))

        # Add lines with corresponding colors
        lines = []
        for color in line_colors:
            # Generate a random pose for the line
            line_pose = self.get_random_pose(env, (0.5, 0.02, 0))  # (length, width, height)
            # Set the color using the utils.COLORS dictionary
            line_color = utils.COLORS[color]
            # Fill the URDF template with the line's properties
            line_urdf = self.fill_template(f'line/single-{color}-line-template.urdf', {'COLOR': line_color})
            # Add the line to the environment
            line_id = env.add_object(line_urdf, line_pose, 'fixed')
            lines.append((line_id, color))

        # Add goals for each cylinder to be aligned with the corresponding colored line
        for cylinder, cylinder_color in cylinders:
            # Find the line that matches the cylinder's color
            line_pose = next(line_pose for line_id, line_color in lines if line_color == cylinder_color)
            # Define the language goal
            language_goal = self.lang_template.format(color=cylinder_color)
            # Add the goal to the task
            self.add_goal(objs=[cylinder], matches=np.ones((1, 1)), targ_poses=[line_pose],
                          replace=False, rotations=False, metric='pose', params=None,
                          step_max_reward=1/3, language_goal=language_goal)

        # Note: The rotation for the cylinders is set to False since we only care about the alignment on the table, not the cylinder's orientation