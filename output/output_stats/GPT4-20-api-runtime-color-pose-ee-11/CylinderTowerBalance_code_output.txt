import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderTowerBalance(Task):
    """Stack a specified number of colored cylinders into a vertical tower on top of a flat surface on the pallet, ensuring that the tower does not topple over."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have 5 cylinders to stack, 2 steps per cylinder
        self.lang_template = "stack the {color} cylinder on top of the tower"
        self.task_completed_desc = "done stacking the cylinder tower."
        self.ee = Suction  # Suction is needed to lift cylinders along the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders to stack
        n_cylinders = 5

        # Define the size of the cylinders
        cylinder_size = (0.05, 0.05, 0.1)  # (radius, radius, height)

        # Define the size and pose of the pallet
        pallet_size = (0.3, 0.3, 0.02)  # (x, y, z)
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Add cylinders with different colors
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        for i in range(n_cylinders):
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)
            color_name = colors[i]
            color_rgb = utils.COLORS[color_name]

            # Fill the cylinder URDF template with the specific color
            replace = {'COLOR': color_rgb}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append(cylinder_id)

        # Define the target poses for the cylinders to form a tower
        # The base cylinder uses the pallet's pose, and each subsequent cylinder is stacked on top
        z_offset = pallet_size[2]  # Start at the top surface of the pallet
        targ_poses = []
        for i in range(n_cylinders):
            # The x, y coordinates are the same as the pallet, and z is incremented for each cylinder
            x, y, _ = pallet_pose[0]
            z = z_offset + i * cylinder_size[2]
            targ_poses.append([(x, y, z), (0, 0, 0, 1)])  # No rotation needed, quaternions for no rotation

        # Add goals for each cylinder
        for i in range(n_cylinders):
            language_goal = self.lang_template.format(color=colors[i])
            self.add_goal(objs=[cylinders[i]], matches=np.ones((1, 1)), targ_poses=[targ_poses[i]],
                          replace=False, rotations=False, metric='pose', params=None,
                          step_max_reward=1/n_cylinders, language_goal=language_goal)

# Instantiate the task
task = CylinderTowerBalance()