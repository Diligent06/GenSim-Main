import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Spatula

class CylinderPalletMaze(Task):
    """
    Create a maze using a predefined number of boxes on the tabletop,
    then carefully push different colored cylinders through the maze to their respective
    colored zones located at the exit points on the pallet, without knocking over any boxes.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Set to twice the number of goals we expect to have
        self.lang_template = "push the {color} cylinder to the {color} zone"
        self.task_completed_desc = "done pushing cylinders through the maze."
        self.primitive = primitives.push  # Use the push primitive
        self.ee = Spatula  # Use the Spatula end-effector
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and boxes to create the maze
        n_cylinders = 3
        n_boxes = 10

        # Define the size of the pallet, cylinders, and boxes
        pallet_size = (0.6, 0.4, 0.1)
        cylinder_size = (0.05, 0.05, 0.1)  # Diameter, Diameter, Height
        box_size = (0.05, 0.05, 0.1)  # Length, Width, Height

        # Add pallet
        pallet_urdf = 'pallet/pallet.urdf'
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object(pallet_urdf, pallet_pose, 'fixed')

        # Add zones on the pallet for each cylinder
        zone_urdf = 'zone/zone.urdf'
        zone_poses = []
        for i in range(n_cylinders):
            # Place zones on the pallet with some buffer from the edges
            zone_pose = self.get_random_pose(env, pallet_size)
            env.add_object(zone_urdf, zone_pose, 'fixed')
            zone_poses.append(zone_pose)

        # Add cylinders with different colors
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_colors = ['red', 'green', 'blue']  # Define cylinder colors
        cylinders = []
        for i in range(n_cylinders):
            color = utils.COLORS[cylinder_colors[i]]
            pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': color}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append(cylinder_id)

            # Add language goal for pushing the cylinder to the correct zone
            language_goal = self.lang_template.format(color=cylinder_colors[i])
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_poses[i]],
                          replace=False, rotations=False, metric='zone', params=[(zone_poses[i], cylinder_size)],
                          step_max_reward=1, language_goal=language_goal)

        # Add boxes to create the maze
        box_template = 'box/box-template.urdf'
        for _ in range(n_boxes):
            pose = self.get_random_pose(env, box_size)
            replace = {'DIM': box_size}
            box_urdf = self.fill_template(box_template, replace)
            env.add_object(box_urdf, pose, 'rigid')  # Boxes are movable but not part of the task goal

        # Set the gripper to Spatula for pushing
        self.ee = Spatula