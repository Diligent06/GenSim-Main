import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderSortIntoBoxes(Task):
    """Sort a set of five differently colored cylinders into five uniquely colored boxes."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call self.add_goal 5 times, so we set this to twice that number
        self.lang_template = "put the {color} cylinder in the {color} box"
        self.task_completed_desc = "done sorting cylinders into boxes."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders and boxes
        cylinder_colors = ['red', 'blue', 'green', 'yellow', 'purple']
        box_colors = cylinder_colors.copy()  # Same colors as cylinders for one-to-one matching

        # Shuffle colors to avoid always picking an object of the same color
        np.random.shuffle(cylinder_colors)
        np.random.shuffle(box_colors)

        # Add cylinders and boxes to the environment
        cylinders = []
        boxes = []
        for i in range(5):
            # Add cylinder
            cylinder_size = (0.04, 0.04, 0.1)  # x, y, z dimensions for the cylinder size
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_template = 'cylinder/cylinder-template.urdf'
            cylinder_color = utils.COLORS[cylinder_colors[i]]
            cylinder_replace = {'COLOR': cylinder_color}
            cylinder_urdf = self.fill_template(cylinder_template, cylinder_replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append((cylinder_id, cylinder_colors[i]))

            # Add box
            box_size = (0.1, 0.1, 0.05)  # x, y, z dimensions for the box size
            box_pose = self.get_random_pose(env, box_size)
            box_template = 'box/box-template.urdf'
            box_color = utils.COLORS[box_colors[i]]
            box_replace = {'COLOR': box_color}
            box_urdf = self.fill_template(box_template, box_replace)
            box_id = env.add_object(box_urdf, box_pose, 'fixed')
            boxes.append((box_id, box_colors[i]))

        # Define goals for sorting cylinders into the correct boxes
        for cylinder, cylinder_color in cylinders:
            # Find the matching box for the current cylinder
            for box_id, box_color in boxes:
                if cylinder_color == box_color:
                    # Get the pose of the matching box to use as the target pose for the cylinder
                    box_pose = env.get_pose(box_id)
                    # Define the language goal
                    language_goal = self.lang_template.format(color=cylinder_color)
                    # Add the goal for the current cylinder
                    self.add_goal(objs=[cylinder], matches=np.int32([[1]]), targ_poses=[box_pose], replace=False,
                                  rotations=False, metric='pose', params=None, step_max_reward=1/5,
                                  language_goal=language_goal)
                    break  # Move on to the next cylinder once the goal is added