import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ZoneCylinderClassification(Task):
    """Sort and place three different colored cylinders into their matching colored zones on a tabletop without any overlap between them."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 goals and we set max_steps to twice the number of goals
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.lang_template = "place the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done sorting cylinders."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders and zones
        colors = ['red', 'green', 'blue']
        color_names = ['red', 'green', 'blue']

        # Add zones with matching colors to cylinders
        zone_size = (0.12, 0.12, 0)  # Zones are flat squares on the table
        zone_urdfs = []
        zone_poses = []
        for color in colors:
            zone_pose = self.get_random_pose(env, zone_size)
            zone_urdf = 'zone/zone.urdf'
            env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[color])
            zone_urdfs.append(zone_urdf)
            zone_poses.append(zone_pose)

        # Add cylinders with matching colors to zones
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i, color in enumerate(colors):
            # Define the size of the cylinder
            size = (0.04, 0.04, 0.12)  # Diameter 0.08 and height 0.12
            pose = self.get_random_pose(env, size)
            replace = {'COLOR': utils.COLORS[color]}
            # IMPORTANT: REPLACE THE TEMPLATE URDF
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append(cylinder_id)

            # Define the language goal for placing each cylinder
            language_goal = self.lang_template.format(color=color_names[i])

            # Add goal for each cylinder to be placed in the matching color zone
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_poses[i]], replace=False,
                          rotations=True, metric='zone', params=[(zone_poses[i], zone_size)], step_max_reward=1/3,
                          language_goal=language_goal)

        # The task is to place each cylinder in the zone of the same color
        # There are three cylinders and three zones, each with a unique color
        # The cylinders must be placed such that they do not overlap within the zones