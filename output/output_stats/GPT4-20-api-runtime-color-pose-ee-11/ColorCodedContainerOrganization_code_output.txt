import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedContainerOrganization(Task):
    """Sort and place colored cylinders into the corresponding colored zones of a multi-sectioned container."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we have 5 cylinders to place, 2 steps per cylinder
        self.lang_template = "put the {color} cylinder in the {color} section"
        self.task_completed_desc = "done organizing the cylinders."
        self.ee = Suction  # Using Suction end-effector to pick and place cylinders vertically

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and container sections
        n_cylinders = 5
        n_sections = n_cylinders  # Assuming one section per cylinder

        # Define the size of the cylinders and container sections
        cylinder_size = (0.04, 0.04, 0.1)  # (radius, radius, height)
        section_size = (0.1, 0.1, 0.1)  # (x, y, z)

        # Define the colors for the cylinders and corresponding sections
        colors = ['red', 'blue', 'green', 'yellow', 'purple']
        color_names = [f"{color} section" for color in colors]

        # Add container with multiple sections
        container_template = 'container/container-template.urdf'
        container_pose = self.get_random_pose(env, section_size)
        replace = {'DIM': section_size, 'HALF': (section_size[0] / 2, section_size[1] / 2, section_size[2] / 2)}
        container_urdf = self.fill_template(container_template, replace)
        env.add_object(container_urdf, container_pose, 'fixed')

        # Add cylinders and define their goal poses
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_poses = []
        for i in range(n_cylinders):
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)
            color = utils.COLORS[colors[i]]  # Get the RGB value for the cylinder color

            # Fill the cylinder URDF template with the specific color and size
            replace = {'COLOR': color, 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinder_poses.append(pose)

            # Define the goal pose for the cylinder in its corresponding section
            # Assuming each section is directly above the container's base pose
            section_pose = (container_pose[0], container_pose[1])  # Same orientation as the container
            section_translation = np.array(container_pose[0]) + np.array([0, i * section_size[1], section_size[2]])
            goal_pose = (section_translation, section_pose[1])

            # Define the language goal for placing the cylinder
            language_goal = self.lang_template.format(color=color_names[i])

            # Add the goal for the cylinder to be placed in the correct section
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[goal_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / n_cylinders,
                          language_goal=language_goal)

        # Set the task description
        self.lang_goals = [self.lang_template.format(color=color) for color in color_names]

# Instantiate the task
task = ColorCodedContainerOrganization()