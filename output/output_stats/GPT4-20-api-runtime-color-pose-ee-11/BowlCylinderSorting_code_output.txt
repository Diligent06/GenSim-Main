import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlCylinderSorting(Task):
    """Sort a set of differently colored cylinders by placing each one into uniquely colored bowls, ensuring that the color of the cylinder matches the color of the bowl."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to call self.add_goal twice, so we set this to twice that number
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.lang_template = "put the {color} cylinder in the {color} bowl"
        self.task_completed_desc = "done sorting cylinders into bowls."

    def reset(self, env):
        super().reset(env)

        # Define the number of bowls and cylinders
        n_bowls = 2
        n_cylinders = 2

        # Define the size of the bowls and cylinders
        bowl_size = (0.12, 0.12, 0.06)  # (x, y, z) dimensions
        cylinder_size = (0.05, 0.05, 0.1)  # (x, y, z) dimensions

        # Define the URDF files for the bowls and cylinders
        bowl_urdf = 'bowl/bowl.urdf'
        cylinder_template = 'cylinder/cylinder-template.urdf'

        # Initialize lists to store the poses and colors of the bowls and cylinders
        bowl_poses = []
        cylinder_poses = []
        cylinder_colors = []

        # Add bowls with unique colors
        for i in range(n_bowls):
            color_name = np.random.choice(list(utils.COLORS.keys()))
            color = utils.COLORS[color_name]
            bowl_pose = self.get_random_pose(env, bowl_size)
            env.add_object(bowl_urdf, bowl_pose, color=color, category='fixed')
            bowl_poses.append((bowl_pose, color_name))

        # Add cylinders with matching colors to the bowls
        for i in range(n_cylinders):
            color_name = bowl_poses[i][1]
            color = utils.COLORS[color_name]
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': color}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinder_poses.append(cylinder_pose)
            cylinder_colors.append(color_name)

            # Define the language goal
            language_goal = self.lang_template.format(color=color_name)

            # Add goal for each cylinder to be placed in the matching colored bowl
            self.add_goal(objs=[cylinder_id],
                          matches=np.int32([[1]]),
                          targ_poses=[bowl_poses[i][0]],
                          replace=True,
                          rotations=False,
                          metric='pose',
                          params=None,
                          step_max_reward=1,
                          language_goal=language_goal)

        # Note: We assume that the number of bowls and cylinders is the same and that they have matching colors.
        # In a more complex scenario, we would need to handle cases with more cylinders than bowls and non-matching colors.