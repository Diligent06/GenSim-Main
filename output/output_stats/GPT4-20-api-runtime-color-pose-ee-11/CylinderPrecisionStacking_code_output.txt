import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderPrecisionStacking(Task):
    """
    Strategically stack five differently colored cylinders on top of each other
    on the center of a marked zone, ensuring that the stack remains stable for a set duration.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to stack 5 cylinders, so 10 steps should be sufficient
        self.ee = Suction  # Use Suction end-effector for vertical stacking

        # Language templates for the task
        self.lang_template = "stack the {color} cylinder on top of the {base_color} one"
        self.task_completed_desc = "done stacking cylinders."

        # Additional initialization if needed
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [utils.COLORS[color] for color in colors]

        # Add the zone where the cylinders will be stacked
        zone_size = (0.1, 0.1, 0)  # Define the size of the zone
        zone_pose = self.get_random_pose(env, zone_size)  # Get a random pose for the zone within workspace bounds
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')  # Add the zone to the environment

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.05, 0.05, 0.1)  # Define the size of the cylinder (radius, radius, height)
        cylinder_urdf = self.fill_template(cylinder_template, {'DIM': cylinder_size})  # Fill in the URDF template

        # Initialize an empty list to store cylinder IDs
        cylinder_ids = []

        # Add five cylinders with different colors
        for i, color in enumerate(color_names):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Add the cylinder to the environment and store its ID
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose, color=color)
            cylinder_ids.append(cylinder_id)

            # Define the target pose for the cylinder. It should be stacked on top of the previous one.
            # The x, y coordinates are the same as the zone's center, and z is incremented with each cylinder.
            target_pose = (zone_pose[0], (0, 0, 0, 1))  # We don't need to specify rotation for cylinders

            # If it's the first cylinder, its base color is the zone. Otherwise, it's the color of the cylinder below.
            base_color = 'zone' if i == 0 else colors[i - 1]

            # Define the language goal for the current cylinder
            language_goal = self.lang_template.format(color=colors[i], base_color=base_color)

            # Add the goal for the current cylinder
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / len(cylinder_ids),
                          language_goal=language_goal)

        # Set the max steps to twice the number of goals
        self.max_steps = len(self.goals) * 2