import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PalletRingStack(Task):
    """Sequentially stack five differently colored rings around a vertical pole fixed to a pallet."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to stack 5 rings, so 10 steps should be sufficient
        self.lang_template = "stack the {color} ring on the pole"
        self.task_completed_desc = "done stacking all rings."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors for the rings
        ring_colors = ['red', 'blue', 'green', 'yellow', 'purple']
        ring_color_names = [utils.COLORS[color] for color in ring_colors]

        # Define the sizes for the rings, from smallest to largest diameter
        ring_sizes = [(0.08, 0.08, 0.02), (0.10, 0.10, 0.02), (0.12, 0.12, 0.02),
                      (0.14, 0.14, 0.02), (0.16, 0.16, 0.02)]

        # Add the pallet with a fixed pole
        pallet_urdf = 'pallet/pallet.urdf'
        pallet_pose = self.get_random_pose(env, (0.3, 0.3, 0))  # Pallet size is arbitrary for pose generation
        env.add_object(pallet_urdf, pallet_pose, category='fixed')

        # Add rings
        rings = []
        template = 'cylinder/cylinder-template.urdf'
        for i in range(5):
            size = ring_sizes[i]
            pose = self.get_random_pose(env, size)
            replace = {'DIM': size, 'HALF': (size[0] / 2, size[1] / 2, size[2] / 2)}
            urdf = self.fill_template(template, replace)
            ring_id = env.add_object(urdf, pose, color=ring_color_names[i])
            rings.append(ring_id)

        # Define the target poses for the rings on the pole
        pole_height = 0.02  # Starting height of the pole
        targ_poses = []
        for size in ring_sizes:
            # The x, y coordinates are the same as the pallet's, and z is incremented for each ring
            targ_poses.append((pallet_pose[0], (0, 0, 0, 1)))  # We don't need to rotate the rings
            pole_height += size[2]  # Increment the pole height by the ring's thickness

        # Add goals for each ring
        for i in range(5):
            language_goal = self.lang_template.format(color=ring_colors[i])
            self.add_goal(objs=[rings[i]], matches=np.ones((1, 1)), targ_poses=[targ_poses[i]], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/5,
                          language_goal=language_goal)

# Instantiate the task
task = PalletRingStack()