import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderStackMatch(Task):
    """Arrange colored cylinders in a vertical stack by matching the top color of the bottom cylinder with the bottom color of the top cylinder."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to stack two cylinders, so we set max_steps to twice the number of add_goal calls
        self.lang_template = "stack the {top_color} cylinder on top of the {bottom_color} cylinder"
        self.task_completed_desc = "done stacking cylinders."
        self.ee = Suction  # We use Suction since we need to move objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders
        colors = ['red', 'green', 'blue', 'yellow', 'purple', 'orange']
        color_combinations = [(colors[i], colors[j]) for i in range(len(colors)) for j in range(len(colors)) if i != j]
        selected_colors = np.random.choice(len(color_combinations), 2, replace=False)
        bottom_color_name, top_color_name = color_combinations[selected_colors[0]]

        # Get the RGB values for the colors
        bottom_color = utils.COLORS[bottom_color_name]
        top_color = utils.COLORS[top_color_name]

        # Define the size of the cylinders
        cylinder_size = (0.05, 0.05, 0.1)  # (radius, radius, height)

        # Add the bottom cylinder
        bottom_cylinder_pose = self.get_random_pose(env, cylinder_size)
        bottom_cylinder_template = 'cylinder/cylinder-template.urdf'
        replace_bottom = {'COLOR': bottom_color, 'SIZE': cylinder_size}
        bottom_cylinder_urdf = self.fill_template(bottom_cylinder_template, replace_bottom)
        bottom_cylinder_id = env.add_object(bottom_cylinder_urdf, bottom_cylinder_pose)

        # Add the top cylinder
        top_cylinder_pose = self.get_random_pose(env, cylinder_size)
        replace_top = {'COLOR': top_color, 'SIZE': cylinder_size}
        top_cylinder_urdf = self.fill_template(bottom_cylinder_template, replace_top)
        top_cylinder_id = env.add_object(top_cylinder_urdf, top_cylinder_pose)

        # Define the target pose for the top cylinder, which should be stacked on the bottom cylinder
        # The target pose is the same x, y coordinates as the bottom cylinder, but with z offset by the cylinder's height
        target_pose = (bottom_cylinder_pose[0], bottom_cylinder_pose[1] + cylinder_size[2])

        # Add the goal for stacking the top cylinder on the bottom cylinder
        language_goal = self.lang_template.format(top_color=top_color_name, bottom_color=bottom_color_name)
        self.add_goal(objs=[top_cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                      rotations=False, metric='pose', params=None, step_max_reward=1, language_goal=language_goal)

# Instantiate the task
task = CylinderStackMatch()