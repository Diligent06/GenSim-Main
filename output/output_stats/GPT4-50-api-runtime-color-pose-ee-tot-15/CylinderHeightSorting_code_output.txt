import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderHeightSorting(Task):
    """Sort a set of cylinders of varying heights into ascending order on the stand from shortest to tallest."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have 5 cylinders and 2 steps per cylinder (pick and place)
        self.lang_template = "sort the cylinders on the stand in ascending order of height"
        self.task_completed_desc = "done sorting cylinders by height."
        self.ee = Suction  # Suction is needed to pick up cylinders along the z-axis
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Add the stand where cylinders will be sorted
        stand_size = (0.05, 0.15, 0.005)  # Size of the stand
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Define the number of cylinders and their heights
        n_cylinders = 5
        heights = np.linspace(0.05, 0.15, n_cylinders)  # Heights ranging from 0.05 to 0.15 meters
        np.random.shuffle(heights)  # Shuffle the heights to randomize initial cylinder order

        # Add cylinders with varying heights
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i in range(n_cylinders):
            # Define cylinder size and color
            size = (0.02, 0.02, heights[i])  # Diameter is fixed, height varies
            color = utils.COLORS['silver']  # All cylinders are silver colored

            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, size)

            # Fill the URDF template with size and color
            replace = {'SIZE': size, 'COLOR': color}
            urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append((cylinder_id, heights[i]))

        # Sort cylinders by height for the goal
        cylinders.sort(key=lambda x: x[1])  # Sort by the second element in the tuple (height)

        # Define target poses on the stand for sorted cylinders
        targ_poses = []
        for i in range(n_cylinders):
            x_offset = stand_pose[0][0] - stand_size[0] / 2 + 0.01 + i * (stand_size[0] / n_cylinders)
            targ_poses.append(((x_offset, stand_pose[0][1], stand_pose[0][2] + size[2] / 2), stand_pose[1]))

        # Add goal for each cylinder
        for i, (cylinder_id, _) in enumerate(cylinders):
            language_goal = self.lang_template
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[targ_poses[i]], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / n_cylinders,
                          language_goal=language_goal)

# Note: The code assumes that the cylinders are sorted on the stand from left to right in ascending order of height.
# The x_offset calculation ensures that cylinders are placed evenly across the length of the stand.