import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderColiseum(Task):
    """Arrange different colored cylinders into a coliseum shape by placing them on their ends in ascending order of height on the pallet."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to have 5 goals, so max_steps is set to twice that number
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.lang_template = "place the {color} cylinder on the pallet in ascending order of height"
        self.task_completed_desc = "done arranging the cylinders."

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and their colors
        n_cylinders = 5
        cylinder_colors = ['red', 'green', 'blue', 'yellow', 'purple']

        # Add pallet
        pallet_size = (0.3, 0.3, 0.02)  # x, y, z dimensions for the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Add cylinders with ascending heights
        cylinders = []
        for i in range(n_cylinders):
            # Define cylinder size and color
            height = 0.05 + i * 0.01  # Incremental height for each cylinder
            diameter = 0.05  # Constant diameter for all cylinders
            color_name = cylinder_colors[i]
            color_rgb = utils.COLORS[color_name]

            # Define cylinder pose and URDF
            cylinder_size = (diameter, diameter, height)
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'DIM': cylinder_size, 'COLOR': color_rgb}
            cylinder_urdf = self.fill_template('cylinder/cylinder-template.urdf', replace)

            # Add cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append((cylinder_id, height))

        # Sort cylinders by height to create goals in ascending order
        cylinders.sort(key=lambda x: x[1])

        # Create goals for each cylinder to be placed on the pallet
        for i, (cylinder_id, _) in enumerate(cylinders):
            # Define the language goal
            color_name = cylinder_colors[i]
            language_goal = self.lang_template.format(color=color_name)

            # Define the target pose on the pallet
            # We use the initial pallet pose and add an offset for each cylinder
            x_offset = (i - n_cylinders // 2) * (diameter + 0.01)  # Offset each cylinder to arrange in a line
            target_pose = (pallet_pose[0] + np.array([x_offset, 0, height / 2]), pallet_pose[1])

            # Add goal for the current cylinder
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=True,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

# Note: The replace parameter is set to True to allow each cylinder to match with one unique target pose.
# Rotations are set to False since cylinders are symmetric about their vertical axis and we only care about their position.
# The step_max_reward is divided by the number of cylinders to distribute the reward evenly across all placement goals.