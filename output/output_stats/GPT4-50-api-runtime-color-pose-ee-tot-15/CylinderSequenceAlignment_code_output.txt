import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderSequenceAlignment(Task):
    """
    Align differently colored cylinders end-to-end on their corresponding colored lines marked on the tabletop.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to call self.add_goal twice, so we set max_steps to twice that number
        self.lang_template = "align the {color} cylinder on the {color} line"
        self.task_completed_desc = "done aligning cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders and lines
        cylinder_colors = ['red', 'green', 'blue', 'yellow']
        line_colors = cylinder_colors.copy()  # Lines have the same colors as cylinders

        # Shuffle the colors to ensure randomness
        np.random.shuffle(cylinder_colors)
        np.random.shuffle(line_colors)

        # Add lines to the environment
        line_size = (0.25, 0.02, 0.001)  # Size of the line
        line_template = 'line/single-green-line-template.urdf'
        line_poses = []
        for color in line_colors:
            # Get a random pose for the line
            line_pose = self.get_random_pose(env, line_size)
            # Replace the color in the template URDF
            replace = {'COLOR': utils.COLORS[color]}
            line_urdf = self.fill_template(line_template, replace)
            # Add the line to the environment
            env.add_object(line_urdf, line_pose, 'fixed')
            line_poses.append(line_pose)

        # Add cylinders to the environment
        cylinder_size = (0.02, 0.02, 0.08)  # Size of the cylinder
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for idx, color in enumerate(cylinder_colors):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Replace the color in the template URDF
            replace = {'COLOR': utils.COLORS[color]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            # Define the language goal
            language_goal = self.lang_template.format(color=color)
            # Add the goal for the cylinder to be aligned on the corresponding line
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[line_poses[idx]],
                          replace=False, rotations=False, metric='pose', params=None,
                          step_max_reward=1, language_goal=language_goal)

        # Note: We assume that the cylinders and lines are matched by index after shuffling.