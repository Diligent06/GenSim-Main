import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionBoxPlacement(Task):
    """Arrange a series of five different-sized boxes in ascending order of size on a narrow beam without knocking them over."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to place 5 boxes, so max_steps is set to twice the number of boxes
        self.ee = Suction  # Use Suction end-effector to lift boxes on the Z axis
        self.lang_template = "place the {size} box on the beam in ascending order"
        self.task_completed_desc = "done placing all boxes in order."

    def reset(self, env):
        super().reset(env)

        # Define the sizes for the five boxes in ascending order
        box_sizes = [
            (0.05, 0.05, 0.05),  # Smallest box
            (0.06, 0.06, 0.06),
            (0.07, 0.07, 0.07),
            (0.08, 0.08, 0.08),
            (0.09, 0.09, 0.09)   # Largest box
        ]

        # Define the colors for the boxes
        box_colors = [
            utils.COLORS['red'],
            utils.COLORS['blue'],
            utils.COLORS['green'],
            utils.COLORS['orange'],
            utils.COLORS['yellow']
        ]

        # Add the narrow beam where boxes will be placed
        beam_size = (0.6, 0.02, 0.05)  # Length, width, and height of the beam
        beam_pose = ((0.5, 0, 0.025), (0, 0, 0, 1))  # Centered in the workspace, flat on the table
        beam_urdf = 'line/single-green-line-template.urdf'
        env.add_object(beam_urdf, beam_pose, 'fixed')

        # Add boxes to the environment
        box_urdf_template = 'box/box-template.urdf'
        boxes = []
        for i, size in enumerate(box_sizes):
            # Get a random pose for the box
            pose = self.get_random_pose(env, size)
            # Fill in the URDF template for the box
            replace = {'SIZE': size, 'HALF': tuple(s / 2 for s in size)}
            box_urdf = self.fill_template(box_urdf_template, replace)
            # Add the box to the environment
            box_id = env.add_object(box_urdf, pose, color=box_colors[i])
            boxes.append(box_id)

        # Define the target poses for the boxes on the beam, in ascending order
        target_x_positions = np.linspace(0.35, 0.65, len(box_sizes))  # Evenly spaced along the beam
        target_poses = [((x, 0, beam_size[2] + size[2] / 2), (0, 0, 0, 1)) for x, size in zip(target_x_positions, box_sizes)]

        # Add goals for each box
        for i, (box_id, target_pose) in enumerate(zip(boxes, target_poses)):
            size_desc = ['smallest', 'small', 'medium', 'large', 'largest'][i]
            language_goal = self.lang_template.format(size=size_desc)
            self.add_goal(objs=[box_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / len(box_sizes),
                          language_goal=language_goal)

# Instantiate the task
task = PrecisionBoxPlacement()