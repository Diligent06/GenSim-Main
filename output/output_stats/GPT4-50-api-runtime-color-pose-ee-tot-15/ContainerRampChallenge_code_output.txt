import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ContainerRampChallenge(Task):
    """
    Construct a ramp using inclined boxes to guide a red ball into a green bowl
    placed at a higher elevation on the tabletop.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to add two goals, so max_steps is twice that
        self.lang_template = "build a ramp with the boxes and guide the red ball into the green bowl"
        self.task_completed_desc = "done constructing the ramp and guiding the ball."
        self.ee = Suction  # We need to move objects on the Z axis, so we use Suction

    def reset(self, env):
        super().reset(env)

        # Add a green bowl at a higher elevation on the tabletop
        bowl_size = (0.12, 0.12, 0.06)  # Size of the bowl
        bowl_pose = self.get_random_pose(env, bowl_size)  # Random pose for the bowl
        bowl_pose[0][2] += 0.15  # Raise the bowl to a higher elevation
        bowl_urdf = 'bowl/bowl.urdf'
        env.add_object(bowl_urdf, bowl_pose, 'fixed', utils.COLORS['green'])

        # Add a red ball that needs to be guided into the bowl
        ball_size = (0.06, 0.06, 0.06)  # Size of the ball
        ball_pose = self.get_random_pose(env, ball_size)  # Random pose for the ball
        ball_urdf = 'ball/ball-template.urdf'
        ball_id = env.add_object(ball_urdf, ball_pose, 'rigid', utils.COLORS['red'])

        # Add boxes to construct the ramp
        box_template = 'box/box-template.urdf'
        box_size = (0.15, 0.05, 0.05)  # Size of the boxes
        box_poses = []  # Store poses of boxes to construct the ramp
        box_ids = []  # Store IDs of boxes
        for _ in range(2):  # We use two boxes to form the ramp
            box_pose = self.get_random_pose(env, box_size)
            box_pose[0][2] += 0.025  # Slightly elevate the box to form an incline
            replace = {'DIM': box_size}
            box_urdf = self.fill_template(box_template, replace)
            box_id = env.add_object(box_urdf, box_pose, 'rigid')
            box_poses.append(box_pose)
            box_ids.append(box_id)

        # Define the language goal
        language_goal = self.lang_template

        # Goal 1: Place the first box to start forming the ramp
        self.add_goal(objs=[box_ids[0]], matches=np.ones((1, 1)), targ_poses=[box_poses[0]],
                      replace=False, rotations=True, metric='pose', params=None,
                      step_max_reward=0.5, language_goal=language_goal)

        # Goal 2: Place the second box to complete the ramp
        self.add_goal(objs=[box_ids[1]], matches=np.ones((1, 1)), targ_poses=[box_poses[1]],
                      replace=False, rotations=True, metric='pose', params=None,
                      step_max_reward=0.5, language_goal=language_goal)

        # Note: The ball will roll down the ramp due to physics simulation,
        # so we do not need to define a separate goal for the ball.