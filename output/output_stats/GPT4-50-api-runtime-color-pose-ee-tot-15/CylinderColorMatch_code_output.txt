import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderColorMatch(Task):
    """Pick up cylinders of different colors and place them upright into matching color zones marked on the tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to add two goals, so max_steps is twice that number
        self.lang_template = "put the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done placing all cylinders in matching color zones."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones
        n_cylinders = 2

        # Define cylinder size
        cylinder_size = (0.05, 0.05, 0.1)  # (radius, radius, height)

        # Define colors for cylinders and zones
        colors = ['red', 'green']
        color_names = [f"{color} cylinder" for color in colors]

        # Add matching color zones
        zone_size = (0.15, 0.15, 0)  # Zones are flat, so z dimension is 0
        zone_urdf = 'zone/zone.urdf'
        zone_poses = []
        for color in colors:
            zone_pose = self.get_random_pose(env, zone_size)
            env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[color])
            zone_poses.append(zone_pose)

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i, color in enumerate(colors):
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)
            replace = {
                'DIM': cylinder_size,
                'COLOR': utils.COLORS[color],
            }
            # Replace the template URDF with the specific color and size
            urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append(cylinder_id)

            # Define the language goal
            language_goal = self.lang_template.format(color=color)

            # Add goal for each cylinder to be placed in the matching color zone
            self.add_goal(
                objs=[cylinder_id],
                matches=np.int32([[1]]),
                targ_poses=[zone_poses[i]],  # Target pose is the matching color zone
                replace=False,
                rotations=False,  # Cylinders should be upright, so no rotation needed
                metric='pose',
                params=None,
                step_max_reward=1,  # Only one goal, so max reward is 1
                language_goal=language_goal
            )

# Instantiate the task
task = CylinderColorMatch()