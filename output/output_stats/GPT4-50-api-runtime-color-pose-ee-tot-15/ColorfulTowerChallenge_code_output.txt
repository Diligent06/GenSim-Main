import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorfulTowerChallenge(Task):
    """Sequentially stack one cylinder, one block, and one ball on top of each other on a designated zone, 
    with each object in a different specified color, maintaining balance."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is set to twice that number
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.lang_template = "stack the {object} on the {location}"
        self.task_completed_desc = "done building the colorful tower."

    def reset(self, env):
        super().reset(env)

        # Define the colors for the objects
        cylinder_color = utils.COLORS['red']
        block_color = utils.COLORS['green']
        ball_color = utils.COLORS['blue']

        # Add the zone where the tower will be built
        zone_size = (0.15, 0.15, 0)  # x, y, z dimensions for the zone size
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Add cylinder
        cylinder_size = (0.04, 0.04, 0.08)  # x, y, z dimensions for the cylinder size
        cylinder_pose = self.get_random_pose(env, cylinder_size)
        cylinder_template = 'cylinder/cylinder-template.urdf'
        replace = {'DIM': cylinder_size, 'COLOR': cylinder_color}
        cylinder_urdf = self.fill_template(cylinder_template, replace)
        cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

        # Add block
        block_size = (0.04, 0.04, 0.04)  # x, y, z dimensions for the block size
        block_pose = self.get_random_pose(env, block_size)
        block_urdf = 'stacking/block.urdf'
        block_id = env.add_object(block_urdf, block_pose, color=block_color)

        # Add ball
        ball_size = (0.04, 0.04, 0.04)  # x, y, z dimensions for the ball size
        ball_pose = self.get_random_pose(env, ball_size)
        ball_template = 'ball/ball-template.urdf'
        replace = {'DIM': ball_size, 'COLOR': ball_color}
        ball_urdf = self.fill_template(ball_template, replace)
        ball_id = env.add_object(ball_urdf, ball_pose)

        # Define the target poses for each object on the zone
        # The target pose is the same as the zone pose for the base object (cylinder)
        # but with an offset on the z-axis for the block and the ball
        cylinder_target_pose = zone_pose
        block_target_pose = (zone_pose[0], (zone_pose[1][0], zone_pose[1][1], zone_pose[1][2] + cylinder_size[2]))
        ball_target_pose = (zone_pose[0], (zone_pose[1][0], zone_pose[1][1], zone_pose[1][2] + cylinder_size[2] + block_size[2]))

        # Add goals for stacking each object
        # Goal 1: Place the cylinder on the zone
        self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[cylinder_target_pose], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3,
                      language_goal=self.lang_template.format(object='red cylinder', location='designated zone'))

        # Goal 2: Place the block on top of the cylinder
        self.add_goal(objs=[block_id], matches=np.ones((1, 1)), targ_poses=[block_target_pose], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3,
                      language_goal=self.lang_template.format(object='green block', location='on top of the red cylinder'))

        # Goal 3: Place the ball on top of the block
        self.add_goal(objs=[ball_id], matches=np.ones((1, 1)), targ_poses=[ball_target_pose], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3,
                      language_goal=self.lang_template.format(object='blue ball', location='on top of the green block'))