import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BalanceCylinderOnBall(Task):
    """Balance a cylinder upright on top of a ball without it falling off."""

    def __init__(self):
        super().__init__()
        self.max_steps = 2  # We have one main goal, but allow an extra step for adjustments
        self.lang_template = "balance the cylinder on top of the ball"
        self.task_completed_desc = "done balancing."
        self.ee = Suction  # Suction is needed to lift the cylinder in Z axis

    def reset(self, env):
        super().reset(env)

        # Ball properties
        ball_size = (0.1, 0.1, 0.1)  # Size of the ball (diameter)
        ball_color = utils.COLORS['silver']  # Color of the ball
        ball_pose = self.get_random_pose(env, ball_size)  # Random pose for the ball
        ball_template = 'ball/ball-template.urdf'
        ball_replace = {'DIM': ball_size, 'COLOR': ball_color}
        ball_urdf = self.fill_template(ball_template, ball_replace)
        ball_id = env.add_object(ball_urdf, ball_pose, 'rigid')  # Add ball to the environment

        # Cylinder properties
        cylinder_height = 0.2  # Height of the cylinder
        cylinder_radius = 0.05  # Radius of the cylinder
        cylinder_size = (cylinder_radius * 2, cylinder_radius * 2, cylinder_height)  # Size of the cylinder
        cylinder_color = utils.COLORS['blue']  # Color of the cylinder
        cylinder_pose = self.get_random_pose(env, cylinder_size)  # Random pose for the cylinder
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_replace = {'DIM': cylinder_size, 'COLOR': cylinder_color}
        cylinder_urdf = self.fill_template(cylinder_template, cylinder_replace)
        cylinder_id = env.add_object(cylinder_urdf, cylinder_pose, 'rigid')  # Add cylinder to the environment

        # Define the target pose for the cylinder, which is on top of the ball
        # The target pose is the ball's position with the cylinder's height added to the z-coordinate
        target_pose = (ball_pose[0], (0, 0, 0, 1))  # We don't need to change the orientation for the cylinder

        # Add the goal for the task
        self.add_goal(objs=[cylinder_id], 
                      matches=np.ones((1, 1)), 
                      targ_poses=[target_pose], 
                      replace=False, 
                      rotations=False,  # No need for rotation as the cylinder is symmetrical
                      metric='pose', 
                      params=None, 
                      step_max_reward=1,  # Full reward for a single goal
                      language_goal=self.lang_template)

# Instantiate the task
task = BalanceCylinderOnBall()