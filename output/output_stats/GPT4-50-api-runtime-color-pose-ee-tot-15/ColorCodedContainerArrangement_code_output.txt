import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedContainerArrangement(Task):
    """
    Arrange a sequence of colored balls into matching colored containers in a specific order based on their size.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have 5 goals, so max_steps is twice the number of goals
        self.lang_template = "put the {color} ball in the {color} container"
        self.task_completed_desc = "done arranging the colored balls."
        self.ee = Suction  # Using Suction since we need to move balls on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the number of balls and containers
        n_balls = 5
        n_containers = 5

        # Define the colors available for balls and containers
        colors = ['red', 'green', 'blue', 'yellow', 'purple']

        # Define the sizes for the balls and containers
        ball_sizes = [(0.04, 0.04, 0.04), (0.06, 0.06, 0.06), (0.08, 0.08, 0.08),
                      (0.10, 0.10, 0.10), (0.12, 0.12, 0.12)]
        container_size = (0.15, 0.15, 0.15)

        # Shuffle colors to ensure randomness
        np.random.shuffle(colors)

        # Add containers with matching colors
        containers = []
        for i in range(n_containers):
            color = colors[i]
            container_pose = self.get_random_pose(env, container_size)
            container_template = 'container/container-template.urdf'
            replace = {'DIM': container_size, 'HALF': (container_size[0] / 2, container_size[1] / 2, container_size[2] / 2),
                       'COLOR': utils.COLORS[color]}
            container_urdf = self.fill_template(container_template, replace)
            container_id = env.add_object(container_urdf, container_pose, 'fixed')
            containers.append((container_id, container_pose))

        # Add balls with matching colors and sizes
        balls = []
        for i in range(n_balls):
            color = colors[i]
            size = ball_sizes[i]
            ball_pose = self.get_random_pose(env, size)
            ball_template = 'ball/ball-template.urdf'
            replace = {'SCALE': size, 'COLOR': utils.COLORS[color]}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append((ball_id, ball_pose))

            # Define the language goal
            language_goal = self.lang_template.format(color=color)

            # Add goal for each ball to be placed in the container with the same color
            self.add_goal(objs=[ball_id], matches=np.int32([[1]]), targ_poses=[containers[i][1]], replace=True,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_balls,
                          language_goal=language_goal)

        # The task is set up with each ball having a corresponding container of the same color