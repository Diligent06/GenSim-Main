import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils

class CylinderLineup(Task):
    """Align five cylinders of different colors in a row on the tabletop, following a specific color sequence provided."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call self.add_goal once, so set max_steps to twice that number
        self.lang_template = "align the {color} cylinder in the {position} position"
        self.task_completed_desc = "done aligning the cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the color sequence for the cylinders
        color_sequence = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = ['red', 'green', 'blue', 'yellow', 'purple']

        # Define the size of the cylinders
        cylinder_size = (0.05, 0.05, 0.1)  # (radius, radius, height)

        # Define the initial positions for the cylinders
        cylinder_poses = [self.get_random_pose(env, cylinder_size) for _ in range(5)]

        # Define the target positions for the cylinders, aligned in a row on the x-axis
        x_positions = np.linspace(0.25, 0.75, 5)  # Five positions evenly spaced along the x-axis
        y_position = 0  # All cylinders will have the same y-coordinate
        z_position = 0.05  # The z-coordinate is half the height of the cylinder to place it on the table
        target_positions = [(x, y_position, z_position) for x in x_positions]

        # Add cylinders to the environment
        cylinders = []
        for i in range(5):
            color = utils.COLORS[color_sequence[i]]
            replace = {'COLOR': color, 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template('cylinder/cylinder-template.urdf', replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_poses[i])
            cylinders.append(cylinder_id)

        # Add the goal for each cylinder
        for i, cylinder_id in enumerate(cylinders):
            position_name = ['first', 'second', 'third', 'fourth', 'fifth'][i]
            language_goal = self.lang_template.format(color=color_names[i], position=position_name)
            self.add_goal(objs=[cylinder_id],
                          matches=np.ones((1, 1)),  # Each cylinder has a unique target position
                          targ_poses=[(target_positions[i], (0, 0, 0, 1))],  # No rotation needed, use identity quaternion
                          replace=False,  # Each cylinder has a unique target
                          rotations=False,  # No rotation of the cylinders needed
                          metric='pose',  # We are using pose metric for evaluation
                          params=None,  # No additional parameters needed
                          step_max_reward=1,  # Full reward for placing each cylinder correctly
                          language_goal=language_goal)