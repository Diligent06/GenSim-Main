import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderHeightOrdering(Task):
    """
    Arrange a sequence of cylinders of increasing heights into a designated zone on the tabletop,
    from shortest to tallest, without knocking them over.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call self.add_goal 5 times, so set max_steps to twice that number
        self.ee = Suction  # Use Suction end-effector to pick and place cylinders vertically
        self.lang_template = "place the {color} cylinder in the {order} place"
        self.task_completed_desc = "done ordering cylinders by height."

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and their heights
        n_cylinders = 5
        heights = np.linspace(0.05, 0.15, n_cylinders)  # Create 5 heights evenly spaced between 0.05 and 0.15

        # Add goal zone
        zone_size = (0.15, 0.15, 0)  # Define the size of the zone
        zone_pose = self.get_random_pose(env, zone_size)  # Get a random pose for the zone within the workspace
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')  # Add the zone to the environment

        # Add cylinders
        cylinders = []
        for i in range(n_cylinders):
            # Define the size of the cylinder based on its height
            size = (0.04, 0.04, heights[i])  # Diameter is fixed at 0.04, height varies
            pose = self.get_random_pose(env, size)  # Get a random pose for the cylinder within the workspace

            # Define the color of the cylinder
            color_name = utils.COLORS[np.random.choice(list(utils.COLORS.keys()))]  # Randomly choose a color name
            color = utils.COLORS[color_name]  # Get the RGB values for the chosen color

            # Define the cylinder URDF using a template
            cylinder_template = 'cylinder/cylinder-template.urdf'
            replace = {'SIZE': size, 'COLOR': color}
            cylinder_urdf = self.fill_template(cylinder_template, replace)  # Fill the template with size and color

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append((cylinder_id, heights[i], color_name))  # Store the cylinder ID, height, and color name

        # Sort cylinders by height
        cylinders.sort(key=lambda x: x[1])

        # Add goals for each cylinder
        for i, (cylinder_id, _, color_name) in enumerate(cylinders):
            # Define the order (place) of the cylinder in the goal zone
            order = ['first', 'second', 'third', 'fourth', 'fifth'][i]
            language_goal = self.lang_template.format(color=color_name, order=order)

            # Define the target pose for the cylinder in the goal zone
            # We place them next to each other along the x-axis within the zone
            target_x = zone_pose[0][0] - zone_size[0]/2 + 0.04 + i*(0.04*2)
            target_pose = [(target_x, zone_pose[0][1], zone_pose[0][2]), zone_pose[1]]

            # Add the goal for the current cylinder
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)