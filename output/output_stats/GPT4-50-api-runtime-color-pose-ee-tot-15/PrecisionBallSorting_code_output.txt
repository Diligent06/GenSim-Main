import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionBallSorting(Task):
    """Sort differently colored balls by placing them in designated zones marked on the tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we have 5 balls to sort, 2 steps per ball (pick and place)
        self.ee = Suction  # Suction end-effector is suitable for picking up balls
        self.lang_template = "place the {color} ball in the {color} zone"
        self.task_completed_desc = "done sorting all the balls."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of balls and zones
        n_balls = 5
        n_zones = 5

        # Define ball size
        ball_size = (0.04, 0.04, 0.04)  # (x, y, z) dimensions

        # Define colors for the balls and corresponding zones
        ball_colors = ['red', 'green', 'blue', 'yellow', 'purple']
        zone_colors = ball_colors.copy()  # Each ball has a matching zone color

        # Shuffle colors to avoid always picking a ball of the same color first
        np.random.shuffle(ball_colors)
        np.random.shuffle(zone_colors)

        # Add zones
        zone_size = (0.1, 0.1, 0)  # Zones are flat squares on the table
        zone_urdf = 'zone/zone.urdf'
        zone_poses = []
        for color in zone_colors:
            zone_pose = self.get_random_pose(env, zone_size)
            env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[color])
            zone_poses.append(zone_pose)

        # Add balls
        balls = []
        ball_template = 'ball/ball-template.urdf'
        for color in ball_colors:
            ball_pose = self.get_random_pose(env, ball_size)
            replace = {'COLOR': utils.COLORS[color]}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append(ball_id)

        # Add goals for each ball to be in the matching color zone
        for i, ball_id in enumerate(balls):
            color = ball_colors[i]
            zone_idx = zone_colors.index(color)  # Find the index of the zone with the matching color
            zone_pose = zone_poses[zone_idx]

            # Define the language goal for placing the ball in the correct zone
            language_goal = self.lang_template.format(color=color)

            # Add the goal for the current ball
            self.add_goal(objs=[ball_id], matches=np.int32([[1]]), targ_poses=[zone_pose], replace=False,
                          rotations=False, metric='zone', params=[(zone_pose, zone_size)], step_max_reward=1/n_balls,
                          language_goal=language_goal)

        # Note: We do not need to add distractors for this task as it is purely about sorting the balls