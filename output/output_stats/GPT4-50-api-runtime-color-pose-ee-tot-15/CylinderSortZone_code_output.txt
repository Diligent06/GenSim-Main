import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderSortZone(Task):
    """Sort differently colored cylinders into their respective colored zones marked on the tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # Assuming we will have 2 goals, so max_steps is twice that
        self.ee = Suction  # Using Suction since we need to move objects on the Z axis
        self.lang_template = "put the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done sorting cylinders."

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones
        n_cylinders = 2
        n_zones = n_cylinders  # Assuming one zone per cylinder

        # Define cylinder size
        cylinder_size = (0.05, 0.05, 0.15)  # (radius, radius, height)

        # Define colors for cylinders and zones
        cylinder_colors = ['red', 'blue']
        zone_colors = cylinder_colors  # Matching zones to cylinder colors

        # Add zones to the environment
        zone_urdf = 'zone/zone.urdf'
        zone_poses = []
        for color in zone_colors:
            zone_pose = self.get_random_pose(env, obj_size=(0.1, 0.1, 0))  # Zones are flat
            env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[color])
            zone_poses.append(zone_pose)

        # Add cylinders to the environment
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for color in cylinder_colors:
            cylinder_pose = self.get_random_pose(env, obj_size=cylinder_size)
            replace = {'COLOR': utils.COLORS[color]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

        # Add goals for each cylinder
        for i, cylinder_id in enumerate(cylinders):
            color = cylinder_colors[i]
            language_goal = self.lang_template.format(color=color)
            # Target pose is the same as the zone pose but with the height of the cylinder
            target_pose = (zone_poses[i][0], (0, 0, 0, 1))  # No rotation needed, quaternions for no rotation
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=True,
                          rotations=False, metric='zone', params=[(zone_poses[i], (0.1, 0.1, 0))],
                          step_max_reward=1, language_goal=language_goal)

        # Set the task description
        self.task_description = "Sort differently colored cylinders into their respective colored zones marked on the tabletop."