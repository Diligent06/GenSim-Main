import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderTowerConstruction(Task):
    """
    Build a tower using three cylinders of different colors by stacking them on the pallet
    in a specific color order from the base to the top.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is twice that number
        self.lang_template = "stack the {color} cylinder"
        self.task_completed_desc = "done constructing the cylinder tower."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders
        colors = ['red', 'green', 'blue']
        color_names = ['red', 'green', 'blue']
        cylinder_sizes = [(0.05, 0.05, 0.1), (0.05, 0.05, 0.1), (0.05, 0.05, 0.1)]  # All cylinders have the same size

        # Add pallet
        pallet_size = (0.3, 0.3, 0.02)  # x, y, z dimensions for the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_poses = []
        for i in range(3):
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_sizes[i])
            replace = {
                'COLOR': utils.COLORS[colors[i]],  # Set the color of the cylinder
            }
            # IMPORTANT: REPLACE THE TEMPLATE URDF
            urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(urdf, pose)
            cylinder_poses.append(pose)

        # Define target poses for the cylinders on the pallet
        # The cylinders should be stacked on top of each other in the order blue, green, red from bottom to top
        target_poses = [
            (pallet_pose[0], pallet_pose[1]),  # Base cylinder (blue) goes directly on the pallet
            utils.apply(pallet_pose, (0, 0, cylinder_sizes[0][2])),  # Middle cylinder (green) on top of the base
            utils.apply(pallet_pose, (0, 0, cylinder_sizes[0][2] + cylinder_sizes[1][2])),  # Top cylinder (red)
        ]

        # Add goals for stacking the cylinders
        for i in range(3):
            # The language goal describes the action to be performed
            language_goal = self.lang_template.format(color=color_names[i])
            # Add the goal for the current cylinder
            self.add_goal(
                objs=[cylinder_id],  # The object to be moved
                matches=np.ones((1, 1)),  # The object matches with one target pose
                targ_poses=[target_poses[i]],  # The target pose for the cylinder
                replace=False,  # The object cannot match with multiple targets
                rotations=True,  # The placement action includes rotation
                metric='pose',  # The evaluation metric is the pose of the object
                params=None,  # No additional parameters for the metric
                step_max_reward=1 / 3,  # The reward for completing this step of the task
                language_goal=language_goal  # The language goal for this step
            )