import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class SortBallsIntoContainers(Task):
    """Sort colored balls into corresponding colored containers based on their colors."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we have 5 balls and 5 containers, 2 steps per goal
        self.lang_template = "put the {color} ball into the {color} container"
        self.task_completed_desc = "done sorting balls into containers."
        self.ee = Suction  # We need to move balls on the Z axis, so we use Suction

    def reset(self, env):
        super().reset(env)

        # Define the number of balls and containers
        n_balls = 5
        n_containers = 5

        # Define colors for the balls and containers
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [f"{color} ball" for color in colors]

        # Add containers with matching colors to the balls
        container_size = (0.1, 0.1, 0.05)  # L x W x H
        container_template = 'container/container-template.urdf'
        container_poses = []
        for i in range(n_containers):
            # Generate a random pose for the container
            container_pose = self.get_random_pose(env, container_size)
            container_poses.append(container_pose)

            # Fill the container URDF template with size and color
            replace = {'DIM': container_size, 'HALF': (container_size[0] / 2, container_size[1] / 2, container_size[2] / 2),
                       'COLOR': utils.COLORS[colors[i]]}
            container_urdf = self.fill_template(container_template, replace)

            # Add the container to the environment
            env.add_object(container_urdf, container_pose, 'fixed')

        # Add balls with matching colors to the containers
        ball_size = (0.05, 0.05, 0.05)  # Diameter
        ball_template = 'ball/ball-template.urdf'
        for i in range(n_balls):
            # Generate a random pose for the ball
            ball_pose = self.get_random_pose(env, ball_size)

            # Fill the ball URDF template with size and color
            replace = {'SCALE': ball_size, 'COLOR': utils.COLORS[colors[i]]}
            ball_urdf = self.fill_template(ball_template, replace)

            # Add the ball to the environment
            ball_id = env.add_object(ball_urdf, ball_pose)

            # Define the language goal for sorting this ball
            language_goal = self.lang_template.format(color=colors[i])

            # Add the sorting goal for this ball
            self.add_goal(objs=[ball_id], matches=np.int32([[1]]), targ_poses=[container_poses[i]], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / n_balls,
                          language_goal=language_goal)

# Note: The task assumes that there is a one-to-one correspondence between the colors of the balls and containers.
# Each ball must be placed into the container of the same color.