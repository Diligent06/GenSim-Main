import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderColorCoordination(Task):
    """
    Arrange a set of colored cylinders in a specific sequence inside a container,
    matching the order of colored zones inside it.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We will have two goals, so max_steps is twice that
        self.ee = Suction  # We need to move objects on the Z axis, so we use Suction
        self.lang_template = "put the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done arranging the cylinders."

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones
        n_cylinders = 3
        n_zones = 3

        # Define the size of the container
        container_size = (0.15, 0.15, 0.05)  # (length, width, height)
        container_pose = self.get_random_pose(env, container_size)
        container_template = 'container/container-template.urdf'
        replace = {'DIM': container_size, 'HALF': (container_size[0] / 2, container_size[1] / 2, container_size[2] / 2)}
        container_urdf = self.fill_template(container_template, replace)
        env.add_object(container_urdf, container_pose, 'fixed')

        # Define the size of the cylinders
        cylinder_size = (0.05, 0.05, 0.1)  # (radius, radius, height)
        cylinder_template = 'cylinder/cylinder-template.urdf'

        # Define the size of the zones
        zone_size = (0.05, 0.05, 0)  # (length, width, height)

        # Define colors for the cylinders and zones
        colors = ['red', 'green', 'blue']
        np.random.shuffle(colors)  # Shuffle colors to randomize the order

        # Add cylinders and zones to the environment
        cylinders = []
        zones = []
        for i in range(n_cylinders):
            # Add cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            color = utils.COLORS[colors[i]]
            replace = {'DIM': cylinder_size, 'COLOR': color}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Add zone
            zone_pose = self.get_random_pose(env, zone_size)
            zone_urdf = self.fill_template('zone/zone.urdf', {'COLOR': color})
            env.add_object(zone_urdf, zone_pose, 'fixed')
            zones.append(zone_pose)

        # Add goals for each cylinder to be placed in the matching color zone
        for i in range(n_cylinders):
            color_name = colors[i]
            language_goal = self.lang_template.format(color=color_name)
            self.add_goal(objs=[cylinders[i]], matches=np.int32([[1]]), targ_poses=[zones[i]], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / n_cylinders,
                          language_goal=language_goal)