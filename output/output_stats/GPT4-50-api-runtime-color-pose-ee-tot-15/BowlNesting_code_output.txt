import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlNesting(Task):
    """Nest three differently sized bowls into each other with the largest on the bottom and the smallest on top, within a designated zone on the tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 goals, so max_steps is set to twice the number of goals
        self.lang_template = "nest the {size} bowl into the {target_size} bowl"
        self.task_completed_desc = "done nesting bowls."
        self.ee = Suction  # Using Suction end-effector as we need to move objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the sizes for the three bowls
        bowl_sizes = [
            (0.18, 0.18, 0.08),  # Large bowl
            (0.12, 0.12, 0.06),  # Medium bowl
            (0.06, 0.06, 0.04)   # Small bowl
        ]

        # Define the colors for the three bowls
        bowl_colors = [
            utils.COLORS['blue'],  # Large bowl
            utils.COLORS['red'],   # Medium bowl
            utils.COLORS['green']  # Small bowl
        ]

        # Define the language descriptions for the three bowls
        bowl_descriptions = ['large', 'medium', 'small']

        # Add the zone where the bowls will be nested
        zone_size = (0.3, 0.3, 0)  # Size of the zone
        zone_pose = self.get_random_pose(env, zone_size)  # Random pose for the zone
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')  # Add the zone to the environment

        # Add the three bowls to the environment
        bowls = []
        for i in range(3):
            bowl_pose = self.get_random_pose(env, bowl_sizes[i])  # Random pose for the bowl
            bowl_urdf = 'bowl/bowl.urdf'
            bowl_id = env.add_object(bowl_urdf, bowl_pose, color=bowl_colors[i])  # Add the bowl to the environment
            bowls.append(bowl_id)

        # Define the goals for nesting the bowls
        # Goal 1: Nest medium bowl into large bowl
        language_goal = self.lang_template.format(size='medium', target_size='large')
        self.add_goal(objs=[bowls[1]], matches=np.ones((1, 1)), targ_poses=[zone_pose], replace=False,
                      rotations=False, metric='zone', params=[(zone_pose, zone_size)], step_max_reward=1/3,
                      language_goal=language_goal)

        # Goal 2: Nest small bowl into medium bowl
        language_goal = self.lang_template.format(size='small', target_size='medium')
        self.add_goal(objs=[bowls[2]], matches=np.ones((1, 1)), targ_poses=[zone_pose], replace=False,
                      rotations=False, metric='zone', params=[(zone_pose, zone_size)], step_max_reward=1/3,
                      language_goal=language_goal)

        # Goal 3: All bowls are nested correctly within the zone
        language_goal = "nest all bowls correctly"
        self.add_goal(objs=bowls, matches=np.ones((3, 1)), targ_poses=[zone_pose]*3, replace=True,
                      rotations=False, metric='zone', params=[(zone_pose, zone_size)], step_max_reward=1/3,
                      language_goal=language_goal)

# Instantiate the task
task = BowlNesting()