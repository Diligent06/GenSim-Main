import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderBalanceBeam(Task):
    """
    Balance a cylinder on its side across a narrow zone line without letting it fall off.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 2  # We have one main goal, but allow an extra step for adjustments
        self.ee = Suction  # Suction is needed to lift the cylinder
        self.lang_template = "balance the cylinder on the green line"
        self.task_completed_desc = "done balancing the cylinder."

    def reset(self, env):
        super().reset(env)

        # Define the size and color of the cylinder
        cylinder_size = (0.05, 0.05, 0.15)  # Diameter x Diameter x Height
        cylinder_color = utils.COLORS['red']  # Red color for the cylinder

        # Add the cylinder to the environment
        cylinder_pose = self.get_random_pose(env, cylinder_size)
        cylinder_template = 'cylinder/cylinder-template.urdf'
        replace = {'DIM': cylinder_size, 'COLOR': cylinder_color}
        cylinder_urdf = self.fill_template(cylinder_template, replace)
        cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

        # Define the size and color of the balance beam (line)
        line_size = (0.005, 0.5, 0)  # Width x Length x Height (flat on the surface)
        line_color = utils.COLORS['green']  # Green color for the line

        # Add the balance beam (line) to the environment
        line_pose = self.get_random_pose(env, line_size)
        line_template = 'line/single-green-line-template.urdf'
        replace = {'DIM': line_size, 'COLOR': line_color}
        line_urdf = self.fill_template(line_template, replace)
        env.add_object(line_urdf, line_pose, 'fixed')

        # The goal is to balance the cylinder on the line
        # The target pose is the same as the line's pose but with a z-offset to account for the cylinder's height
        target_pose = (line_pose[0], line_pose[1])
        z_offset = cylinder_size[2] / 2  # Half the height of the cylinder
        target_pose[0][2] += z_offset

        # Add the goal for the task
        self.add_goal(objs=[cylinder_id], 
                      matches=np.ones((1, 1)), 
                      targ_poses=[target_pose], 
                      replace=True, 
                      rotations=False, 
                      metric='pose', 
                      params=None, 
                      step_max_reward=1, 
                      language_goal=self.lang_template)

# Note: The task assumes that the cylinder needs to be picked up and placed on the line.
# The Suction end-effector is used to pick up the cylinder, and the target pose is set
# to be on the line with an appropriate z-offset to ensure it is balanced.