import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderColorSort(Task):
    """Sort multiple cylinders of various colors into designated zones based on their color."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have at most 5 cylinders to sort, 2 steps per cylinder
        self.lang_template = "put the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done sorting cylinders by color."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones
        n_cylinders = np.random.randint(1, 6)  # Random number of cylinders between 1 and 5
        n_zones = n_cylinders  # One zone per cylinder

        # Define cylinder size
        cylinder_size = (0.05, 0.05, 0.1)  # Diameter, Diameter, Height

        # Define available colors
        colors = ['red', 'green', 'blue', 'yellow', 'purple']

        # Shuffle colors and select as many as we have cylinders
        np.random.shuffle(colors)
        selected_colors = colors[:n_cylinders]

        # Add zones and cylinders to the environment
        zones = []
        cylinders = []
        for i, color in enumerate(selected_colors):
            # Add zone
            zone_size = (0.1, 0.1, 0)  # Width, Depth, (Height is irrelevant for zones)
            zone_pose = self.get_random_pose(env, zone_size)
            zone_urdf = 'zone/zone.urdf'
            env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[color])
            zones.append((zone_pose, zone_size))

            # Add cylinder
            cylinder_template = 'cylinder/cylinder-template.urdf'
            replace = {'SIZE': cylinder_size, 'COLOR': utils.COLORS[color]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Define the language goal
            language_goal = self.lang_template.format(color=color)

            # Add goal for each cylinder to be in the matching color zone
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_pose], replace=True,
                          rotations=False, metric='zone', params=[zones[i]], step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

        # Set the primitive to be used for this task
        self.primitive = primitives.push  # We use push primitive to move cylinders to zones