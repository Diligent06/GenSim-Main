import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderSorting(Task):
    """Sort cylinders by height, placing shorter cylinders into a bowl and taller cylinders into a box."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to add two goals, so max_steps is twice that number
        self.lang_template = "put the {height} cylinders in the {container}"
        self.task_completed_desc = "done sorting cylinders."
        self.ee = Suction  # Use suction end-effector to pick up cylinders

    def reset(self, env):
        super().reset(env)

        # Define cylinder sizes
        short_cylinder_size = (0.04, 0.04, 0.08)  # Short cylinder (x, y, z)
        tall_cylinder_size = (0.04, 0.04, 0.12)   # Tall cylinder (x, y, z)

        # Define container sizes
        bowl_size = (0.15, 0.15, 0.06)  # Bowl size (x, y, z)
        box_size = (0.2, 0.2, 0.1)      # Box size (x, y, z)

        # Add bowl and box to the environment
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_pose = self.get_random_pose(env, bowl_size)
        env.add_object(bowl_urdf, bowl_pose, 'fixed')

        box_template = 'box/box-template.urdf'
        box_replace = {'DIM': box_size}
        box_urdf = self.fill_template(box_template, box_replace)
        box_pose = self.get_random_pose(env, box_size)
        env.add_object(box_urdf, box_pose, 'fixed')

        # Add cylinders to the environment
        cylinder_template = 'cylinder/cylinder-template.urdf'
        short_cylinder_color = utils.COLORS['silver']  # Color for short cylinders
        tall_cylinder_color = utils.COLORS['gold']     # Color for tall cylinders

        # Add one short cylinder
        short_cylinder_replace = {'COLOR': short_cylinder_color, 'SIZE': short_cylinder_size}
        short_cylinder_urdf = self.fill_template(cylinder_template, short_cylinder_replace)
        short_cylinder_pose = self.get_random_pose(env, short_cylinder_size)
        short_cylinder_id = env.add_object(short_cylinder_urdf, short_cylinder_pose)

        # Add one tall cylinder
        tall_cylinder_replace = {'COLOR': tall_cylinder_color, 'SIZE': tall_cylinder_size}
        tall_cylinder_urdf = self.fill_template(cylinder_template, tall_cylinder_replace)
        tall_cylinder_pose = self.get_random_pose(env, tall_cylinder_size)
        tall_cylinder_id = env.add_object(tall_cylinder_urdf, tall_cylinder_pose)

        # Add obstacles (lines on the tabletop)
        line_template = 'line/single-green-line-template.urdf'
        for _ in range(2):  # Add two lines as obstacles
            line_size = (0.01, 0.5, 0)  # Line size (x, y, z)
            line_pose = self.get_random_pose(env, line_size)
            env.add_object(line_template, line_pose, 'fixed')

        # Define goals
        # Goal for short cylinder: place it in the bowl
        short_cylinder_goal_desc = self.lang_template.format(height="short", container="bowl")
        self.add_goal(objs=[short_cylinder_id], matches=np.int32([[1]]), targ_poses=[bowl_pose], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1, language_goal=short_cylinder_goal_desc)

        # Goal for tall cylinder: place it in the box
        tall_cylinder_goal_desc = self.lang_template.format(height="tall", container="box")
        self.add_goal(objs=[tall_cylinder_id], matches=np.int32([[1]]), targ_poses=[box_pose], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1, language_goal=tall_cylinder_goal_desc)