import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderTowerConstruction(Task):
    """Sequentially stack 5 different colored cylinders on top of a stand, forming a vertical tower without knocking it over."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We have 5 goals, so max_steps is set to twice the number of goals
        self.lang_template = "stack the {color} cylinder on the tower"
        self.task_completed_desc = "done constructing the cylinder tower."
        self.ee = Suction  # Use Suction end-effector to lift cylinders in Z axis

    def reset(self, env):
        super().reset(env)

        # Define the size of the stand and cylinders
        stand_size = (0.05, 0.05, 0.005)  # Size of the stand (x, y, z)
        cylinder_height = 0.08  # Height of each cylinder
        cylinder_radius = 0.02  # Radius of each cylinder

        # Add the stand to the environment
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Define colors for the cylinders
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_rgb = [utils.COLORS[color] for color in colors]  # Get RGB values for the colors

        # Add cylinders to the environment
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (2 * cylinder_radius, 2 * cylinder_radius, cylinder_height)
        cylinder_poses = []
        for i in range(5):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_poses.append(cylinder_pose)

            # Fill in the URDF template with the specific parameters for this cylinder
            replace = {'SIZE': cylinder_size, 'COLOR': color_rgb[i]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder object to the environment
            env.add_object(cylinder_urdf, cylinder_pose)

        # Add goals for stacking the cylinders
        for i in range(5):
            # Calculate the target pose for the cylinder on top of the stack
            # The x, y coordinates are the same as the stand, and z is incremented with each cylinder
            target_pose = (stand_pose[0], (0, 0, stand_size[2] + i * cylinder_height))

            # Define the language goal for this step
            language_goal = self.lang_template.format(color=colors[i])

            # Add the goal for this cylinder
            self.add_goal(objs=[cylinder_poses[i]], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / 5,
                          language_goal=language_goal)

# Note: The code assumes that the `fill_template` method is available to fill in the URDF template for the cylinders.
# It also assumes that the `get_random_pose` method is available and used to get a random initial pose for the objects.
# The `add_goal` method is used to define the goals for the task, with the `matches` parameter set to a 1x1 matrix of ones
# since there is a direct one-to-one correspondence between objects and target poses.