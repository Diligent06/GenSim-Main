import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderSortPrecision(Task):
    """Sort a set of five cylinders, each of a unique color, by placing them into five separate zones, each demarcated with a matching color outline, on the tabletop without knocking them over."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We have 5 cylinders to sort, so 10 steps should be sufficient
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.lang_template = "place the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done sorting cylinders."

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and their colors
        n_cylinders = 5
        cylinder_colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = ['red', 'green', 'blue', 'yellow', 'purple']

        # Define cylinder size
        cylinder_size = (0.05, 0.05, 0.15)  # (radius, radius, height)

        # Add cylinders
        cylinders = []
        for i in range(n_cylinders):
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)
            # Define the color of the cylinder using the COLORS dictionary
            color = utils.COLORS[cylinder_colors[i]]
            # Fill the URDF template with the cylinder size and color
            replace = {'SIZE': cylinder_size, 'COLOR': color}
            urdf = self.fill_template('cylinder/cylinder-template.urdf', replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append(cylinder_id)

        # Add zones
        zone_size = (0.07, 0.07, 0)  # Slightly larger than the cylinder base to allow for precision
        zones = []
        for i in range(n_cylinders):
            # Get a random pose for the zone
            zone_pose = self.get_random_pose(env, zone_size)
            # Define the color of the zone using the COLORS dictionary
            color = utils.COLORS[cylinder_colors[i]]
            # Add the zone to the environment
            env.add_object('zone/zone.urdf', zone_pose, 'fixed', color=color)
            zones.append(zone_pose)

        # Add goals for each cylinder
        for i in range(n_cylinders):
            # Define the language goal for placing the cylinder
            language_goal = self.lang_template.format(color=color_names[i])
            # Add the goal for the cylinder to be placed in the matching color zone
            self.add_goal(objs=[cylinders[i]], matches=np.int32([[1]]), targ_poses=[zones[i]], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

# Instantiate the task
task = CylinderSortPrecision()