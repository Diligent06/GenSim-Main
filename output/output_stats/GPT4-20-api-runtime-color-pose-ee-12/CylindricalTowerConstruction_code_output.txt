import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylindricalTowerConstruction(Task):
    """
    Task to sequence and stack five cylinders of varying colors to form a vertical tower
    on a designated circular zone, following a specific color order from bottom to top.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call self.add_goal 5 times, so max_steps is set to twice that number
        self.lang_template = "stack the {color} cylinder"
        self.task_completed_desc = "done constructing the cylindrical tower."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the color order for the tower from bottom to top
        color_order = ['red', 'green', 'blue', 'yellow', 'purple']
        colors_rgb = [utils.COLORS[color] for color in color_order]

        # Define the size of the cylinders and the zone
        cylinder_size = (0.05, 0.05, 0.1)  # (radius, radius, height)
        zone_size = (0.15, 0.15, 0)  # (radius, radius, height)

        # Add the circular zone where the tower will be constructed
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Add cylinders in the environment with the specified colors
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i, color in enumerate(color_order):
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': colors_rgb[i], 'SIZE': cylinder_size}
            # IMPORTANT: REPLACE THE TEMPLATE URDF
            urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append(cylinder_id)

            # Define the language goal for stacking this cylinder
            language_goal = self.lang_template.format(color=color)

            # Add the goal for this cylinder to be in the correct position in the tower
            # The target pose is the same as the zone pose but with increasing height for each cylinder
            target_pose = (zone_pose[0], zone_pose[1])  # Use the zone's x, y position and orientation
            target_pose[0][2] += i * cylinder_size[2]  # Increase the z position based on the cylinder's index

            # Add the goal with the target pose and the corresponding language goal
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/5, language_goal=language_goal)

        # Set the initial positions of the cylinders as a list of poses for the oracle
        self.oracle_cylinder_poses = [env.get_pose(cylinder_id) for cylinder_id in cylinders]

    def oracle(self, env):
        """
        An oracle agent that performs the task perfectly for demonstration purposes.
        It sequences and stacks the cylinders according to the predefined color order.
        """
        for i, cylinder_pose in enumerate(self.oracle_cylinder_poses):
            # Move the end-effector to the cylinder's position
            env.move_to(cylinder_pose)
            # Activate the suction to pick up the cylinder
            env.actuate_gripper('close')
            # Move the end-effector to the target position in the tower
            target_pose = self.goals[i]['targ_poses'][0]
            env.move_to(target_pose)
            # Release the cylinder to place it in the tower
            env.actuate_gripper('open')