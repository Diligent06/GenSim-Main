import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderTowerBalancing(Task):
    """Stack and balance three differently colored cylindrical objects on top of each other."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is twice the number of goals
        self.ee = Suction  # Use Suction end-effector to lift cylinders on the Z axis
        self.lang_template = "stack and balance the {color} cylinder on top of the {base_color} one"
        self.task_completed_desc = "done stacking and balancing cylinders."

    def reset(self, env):
        super().reset(env)

        # Define cylinder size and URDF template
        cylinder_size = (0.05, 0.05, 0.15)  # (radius, radius, height)
        cylinder_template = 'cylinder/cylinder-template.urdf'

        # Define colors for the cylinders
        colors = ['red', 'green', 'blue']
        color_names = ['red', 'green', 'blue']
        cylinder_colors = [utils.COLORS[color] for color in colors]

        # Add cylinders to the environment
        cylinders = []
        for i in range(3):
            # Get a random pose within the workspace bounds
            pose = self.get_random_pose(env, cylinder_size)
            replace = {'DIM': cylinder_size, 'COLOR': cylinder_colors[i]}
            # Fill the URDF template with size and color parameters
            urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder object to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append((cylinder_id, pose))

        # Define the goals for stacking the cylinders
        # The target poses are directly above the base cylinders
        for i in range(2, -1, -1):
            base_cylinder_id, base_pose = cylinders[i]
            # Calculate the target pose for the cylinder above the base
            target_pose = (base_pose[0], (0, 0, cylinder_size[2] * (3 - i)))
            # Define the language goal for this step
            color = color_names[i]
            base_color = color_names[i-1] if i > 0 else "table"
            language_goal = self.lang_template.format(color=color, base_color=base_color)
            # Add the goal for this step
            self.add_goal(
                objs=[base_cylinder_id],
                matches=np.ones((1, 1)),
                targ_poses=[target_pose],
                replace=False,
                rotations=False,  # Cylinders are rotationally symmetric, no need to match rotation
                metric='pose',
                params=None,
                step_max_reward=1 / 3,  # Three steps, so each step has a max reward of 1/3
                language_goal=language_goal
            )

        # Note: The cylinders are added in reverse order, so the goals stack them correctly