import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class Dummy(Task):
    """
    The 'dummy' task involves moving a red block to a specified target location.
    The task is designed to be simple and serves as a template for more complex tasks.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 2  # We expect to call self.add_goal once, so max_steps is twice that
        self.lang_template = "move the red block to the target location"
        self.task_completed_desc = "done moving the red block."
        self.ee = Suction  # Using Suction end-effector as we need to move the object on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the size of the red block
        block_size = (0.05, 0.05, 0.05)  # x, y, z dimensions

        # Generate a random pose for the red block that is collision-free
        block_pose = self.get_random_pose(env, block_size)

        # Define the color of the red block using the provided utility function
        block_color = utils.COLORS['red']

        # Add the red block to the environment
        block_urdf = 'stacking/block.urdf'
        block_id = env.add_object(block_urdf, block_pose, color=block_color)

        # Define the target location for the red block
        # For simplicity, we'll use a fixed target location on the table
        target_pose = [(0.5, 0, 0.05), (0, 0, 0, 1)]  # (x, y, z), (quaternion)

        # Add the goal for the task
        # The goal is to move the red block to the target location
        self.add_goal(objs=[block_id], 
                      matches=np.ones((1, 1)), 
                      targ_poses=[target_pose], 
                      replace=False, 
                      rotations=False, 
                      metric='pose', 
                      params=None, 
                      step_max_reward=1,  # Since we have only one goal, the step_max_reward is 1
                      language_goal=self.lang_template)

        # The task is now set up and ready for the robot to attempt