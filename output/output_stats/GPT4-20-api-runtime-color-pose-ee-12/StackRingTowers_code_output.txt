import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class StackRingTowers(Task):
    """Build two separate towers by stacking a red cylinder, a green cylinder, and a blue cylinder on top of each corresponding colored bowl without toppling them."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 rings and 3 bowls to place, so 6 steps should be sufficient
        self.lang_template = "stack the {color} cylinder on the {color} bowl"
        self.task_completed_desc = "done stacking ring towers."
        self.ee = Suction  # We need to move objects on the Z axis, so Suction is appropriate

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders and bowls
        cylinder_colors = ['red', 'green', 'blue']
        bowl_colors = ['red', 'green', 'blue']

        # Define the size for the cylinders and bowls
        cylinder_size = (0.04, 0.04, 0.08)  # (radius, radius, height)
        bowl_size = (0.12, 0.12, 0.06)  # (radius, radius, height)

        # Add bowls and cylinders to the environment
        bowls = []
        cylinders = []
        for i in range(3):
            # Add bowl
            bowl_pose = self.get_random_pose(env, bowl_size)
            bowl_urdf = 'bowl/bowl.urdf'
            bowl_id = env.add_object(bowl_urdf, bowl_pose, 'fixed', color=utils.COLORS[bowl_colors[i]])
            bowls.append((bowl_id, bowl_pose))

            # Add cylinder
            cylinder_template = 'cylinder/cylinder-template.urdf'
            replace = {'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose, 'rigid', color=utils.COLORS[cylinder_colors[i]])
            cylinders.append((cylinder_id, cylinder_pose))

        # Define goals for stacking cylinders on bowls
        for i in range(3):
            # The target pose for the cylinder is on top of the corresponding bowl
            bowl_pose = bowls[i][1]
            target_pose = (bowl_pose[0], bowl_pose[1])  # Use the bowl's position and orientation

            # Add goal for each cylinder
            self.add_goal(
                objs=[cylinders[i][0]],  # Object ID of the cylinder
                matches=np.ones((1, 1)),  # Each cylinder matches with one bowl
                targ_poses=[target_pose],  # Target pose is on top of the bowl
                replace=False,  # Each cylinder has a unique target
                rotations=True,  # Allow rotation to match the target pose
                metric='pose',  # Use pose metric for evaluation
                params=None,  # No additional parameters needed
                step_max_reward=1,  # Full reward for completing this step
                language_goal=self.lang_template.format(color=cylinder_colors[i])  # Language goal description
            )