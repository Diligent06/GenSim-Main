import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderColorSorting(Task):
    """Sort colored cylinders by placing each cylinder onto a matching color zone, avoiding obstacles formed by neutral-colored boxes."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have up to 5 cylinders to sort, hence 10 steps (2 per cylinder)
        self.lang_template = "place the {color} cylinder on the {color} zone"
        self.task_completed_desc = "done sorting all cylinders."
        self.ee = Suction  # Using Suction end-effector to pick and place cylinders

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones
        n_cylinders = np.random.randint(1, 6)  # Random number of cylinders between 1 and 5
        n_zones = n_cylinders  # Same number of zones as cylinders

        # Define cylinder size and color options
        cylinder_size = (0.04, 0.04, 0.1)  # Diameter, Diameter, Height
        cylinder_colors = ['red', 'green', 'blue', 'yellow', 'purple']
        zone_colors = cylinder_colors[:n_cylinders]  # Match zone colors with cylinder colors

        # Add cylinders
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i in range(n_cylinders):
            color_name = cylinder_colors[i]
            color_rgb = utils.COLORS[color_name]
            pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': color_rgb}
            urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append((cylinder_id, color_name))

        # Add zones
        zone_size = (0.1, 0.1, 0)  # Length, Width, Height (flat zone)
        zone_urdf = 'zone/zone.urdf'
        zones = []
        for i, color_name in enumerate(zone_colors):
            color_rgb = utils.COLORS[color_name]
            pose = self.get_random_pose(env, zone_size)
            env.add_object(zone_urdf, pose, color=color_rgb)
            zones.append((pose, color_name))

        # Add neutral-colored boxes as obstacles
        box_size = (0.05, 0.05, 0.05)  # Length, Width, Height
        box_template = 'box/box-template.urdf'
        for _ in range(n_cylinders):  # One obstacle per cylinder
            pose = self.get_random_pose(env, box_size)
            replace = {'COLOR': utils.COLORS['gray']}
            urdf = self.fill_template(box_template, replace)
            env.add_object(urdf, pose, 'rigid')

        # Add goals for each cylinder to be placed in the matching color zone
        for cylinder, color_name in cylinders:
            # Find the corresponding zone pose for the cylinder color
            zone_pose = next(zone_pose for zone_pose, zone_color in zones if zone_color == color_name)
            language_goal = self.lang_template.format(color=color_name)
            self.add_goal(
                objs=[cylinder],
                matches=np.int32([[1]]),
                targ_poses=[zone_pose],
                replace=False,
                rotations=False,
                metric='pose',
                params=None,
                step_max_reward=1 / n_cylinders,
                language_goal=language_goal
            )