import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderZoneSorting(Task):
    """Sort cylinders of three different colors into three separate zones, each marked with a matching colored line."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We expect to call self.add_goal three times, so we set max_steps to twice that number
        self.lang_template = "put the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done sorting cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders and the corresponding zones
        colors = ['red', 'green', 'blue']
        color_names = ['red', 'green', 'blue']

        # Add zones with matching colored lines
        zone_size = (0.1, 0.1, 0)  # Zones are flat on the table
        line_urdf_template = 'line/single-green-line-template.urdf'
        zone_poses = []
        for color in colors:
            # Generate a random pose for the zone
            zone_pose = self.get_random_pose(env, zone_size)
            zone_poses.append(zone_pose)

            # Replace the color in the line URDF template
            replace = {'COLOR': utils.COLORS[color]}
            line_urdf = self.fill_template(line_urdf_template, replace)

            # Add the zone with the colored line to the environment
            env.add_object(line_urdf, zone_pose, 'fixed')

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i, color in enumerate(colors):
            # Generate a random pose for the cylinder
            cylinder_size = (0.05, 0.05, 0.1)  # Diameter and height for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)

            # Replace the color and size in the cylinder URDF template
            replace = {'COLOR': utils.COLORS[color], 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

            # Define the language goal
            language_goal = self.lang_template.format(color=color_names[i])

            # Add the goal for the cylinder to be in the matching zone
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_poses[i]], replace=False,
                          rotations=False, metric='zone', params=[(zone_poses[i], zone_size)], step_max_reward=1/3,
                          language_goal=language_goal)

        # The task is set up with three cylinders and three matching zones