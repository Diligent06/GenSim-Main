import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionPalletStack(Task):
    """Carefully stack a sequence of five differently colored cylinders onto a single pallet by color order."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to stack 5 cylinders, so we set max_steps to twice the number of cylinders
        self.lang_template = "stack the {color} cylinder on the pallet"
        self.task_completed_desc = "done stacking cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders in the order they need to be stacked
        cylinder_colors = ['red', 'green', 'blue', 'yellow', 'purple']
        # Define the size of the cylinders
        cylinder_size = (0.05, 0.05, 0.1)  # (radius, radius, height)

        # Add pallet
        pallet_size = (0.3, 0.3, 0.02)  # (length, width, height)
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Add cylinders and set up goals
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i, color_name in enumerate(cylinder_colors):
            # Get the color RGB values
            color = utils.COLORS[color_name]
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)
            # Replace the color in the URDF template
            replace = {'COLOR': color}
            # Generate the URDF for the cylinder
            urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, pose)
            # Define the target pose for the cylinder on the pallet
            # The target pose is directly above the pallet, with each cylinder stacked on top of the previous one
            target_pose = (pallet_pose[0], pallet_pose[1])  # Use the pallet's position and orientation
            target_pose[0][2] += pallet_size[2] + (i * cylinder_size[2])  # Adjust the z-coordinate for stacking

            # Define the language goal
            language_goal = self.lang_template.format(color=color_name)
            # Add the goal for the current cylinder
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1 / len(cylinder_colors),
                          language_goal=language_goal)

# Instantiate the task
task = PrecisionPalletStack()