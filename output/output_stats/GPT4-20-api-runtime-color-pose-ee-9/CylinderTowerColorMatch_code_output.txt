import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderTowerColorMatch(Task):
    """Stack five cylinders of different colors on top of the corresponding color section of a multi-colored line."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to stack 5 cylinders, so 10 steps should be sufficient
        self.lang_template = "stack the {color} cylinder on the {color} section of the line"
        self.task_completed_desc = "done stacking the cylinder tower."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders and the corresponding sections on the line
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [utils.COLORS[c] for c in colors]

        # Add the multi-colored line
        line_size = (0.25, 0.05, 0.005)  # Size of the line
        line_pose = self.get_random_pose(env, line_size)  # Random pose for the line
        line_template = 'line/single-green-line-template.urdf'
        replace = {'DIM': line_size, 'HALF': (line_size[0] / 2, line_size[1] / 2, line_size[2] / 2)}
        line_urdf = self.fill_template(line_template, replace)
        env.add_object(line_urdf, line_pose, 'fixed')

        # Add cylinders
        cylinder_size = (0.02, 0.02, 0.08)  # Size of the cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_poses = []
        for i, color in enumerate(colors):
            pose = self.get_random_pose(env, cylinder_size)  # Random pose for the cylinder
            replace = {'COLOR': color_names[i]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinder_poses.append((cylinder_id, pose))

        # Define the target poses for each cylinder on the line
        line_x, line_y, _ = line_pose[0]
        section_width = line_size[0] / len(colors)  # Width of each color section on the line
        targ_poses = []
        for i, color in enumerate(colors):
            # Calculate the center x position of each section
            section_center_x = line_x - line_size[0] / 2 + section_width * (i + 0.5)
            # Target pose is on the line with the same y and z, but x is at the section center
            targ_pose = [(section_center_x, line_y, line_size[2]), line_pose[1]]
            targ_poses.append(targ_pose)

        # Add goals for each cylinder
        for i, (cylinder_id, _) in enumerate(cylinder_poses):
            language_goal = self.lang_template.format(color=colors[i])
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[targ_poses[i]],
                          replace=False, rotations=False, metric='pose', params=None,
                          step_max_reward=1 / len(colors), language_goal=language_goal)

# Comment: The task is set up to stack cylinders on a line with color-matched sections.
# Each cylinder has a target pose on the corresponding section of the line.
# The Suction end-effector is used to move the cylinders vertically onto the line.
# The task is complete when all cylinders are stacked on the correct sections.