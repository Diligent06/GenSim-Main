import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderBalanceBeam(Task):
    """
    Arrange a sequence of five differently colored cylinders on top of a narrow beam,
    ensuring each cylinder is balanced and the sequence follows a specific color pattern.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to place 5 cylinders, so max_steps is set to twice that number
        self.ee = Suction  # Using Suction end-effector to lift cylinders in Z-axis
        self.lang_template = "place the {color} cylinder on the beam"
        self.task_completed_desc = "done arranging cylinders on the beam."

    def reset(self, env):
        super().reset(env)

        # Define the color sequence for the cylinders
        color_sequence = ['red', 'green', 'blue', 'yellow', 'purple']
        cylinder_colors = [utils.COLORS[color] for color in color_sequence]

        # Add the narrow beam to the environment
        beam_size = (0.5, 0.02, 0.02)  # Size of the beam (length, width, height)
        beam_pose = self.get_random_pose(env, beam_size)  # Get a random pose for the beam
        beam_urdf = 'line/single-green-line-template.urdf'
        env.add_object(beam_urdf, beam_pose, 'fixed')  # Add the beam as a fixed object

        # Add cylinders to the environment
        cylinder_size = (0.02, 0.02, 0.1)  # Size of the cylinders (radius, radius, height)
        cylinder_urdf = 'cylinder/cylinder-template.urdf'
        cylinders = []

        for i, color in enumerate(cylinder_colors):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Replace the color in the URDF template
            replace = {'COLOR': color}
            # Fill the URDF template with the specific color for this cylinder
            urdf = self.fill_template(cylinder_urdf, replace)
            # Add the cylinder to the environment and store its ID
            cylinder_id = env.add_object(urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Define the language goal for placing this cylinder
            language_goal = self.lang_template.format(color=color_sequence[i])

            # Calculate the target pose for the cylinder on the beam
            # We place the cylinders along the length of the beam, spaced evenly
            target_x = beam_pose[0][0] - beam_size[0] / 2 + beam_size[0] * (i + 1) / (len(cylinder_colors) + 1)
            target_y = beam_pose[0][1]
            target_z = beam_pose[0][2] + beam_size[2] / 2 + cylinder_size[2] / 2  # Place on top of the beam
            target_pose = [(target_x, target_y, target_z), (0, 0, 0, 1)]  # Target pose with no rotation

            # Add the goal for placing this cylinder
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / len(cylinder_colors),
                          language_goal=language_goal)

        # Set the primitive to push if we need to adjust the cylinders on the beam
        self.primitive = primitives.push