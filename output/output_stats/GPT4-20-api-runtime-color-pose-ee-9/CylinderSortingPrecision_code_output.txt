import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderSortingPrecision(Task):
    """Arrange a set of three cylinders of distinct colors (red, blue, green) on a marked three-zoned area on the tabletop, matching each cylinder's color with its corresponding colored zone."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We expect to call self.add_goal three times, so max_steps is set to twice that number
        self.lang_template = "place the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done sorting cylinders."
        self.ee = Suction  # Use Suction end-effector to move cylinders on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define cylinder colors and corresponding zones
        cylinder_colors = ['red', 'blue', 'green']
        zone_colors = ['red', 'blue', 'green']

        # Add zones with corresponding colors
        zone_size = (0.12, 0.12, 0)  # Zones are flat squares on the table
        zone_urdf = 'zone/zone.urdf'
        zone_poses = []
        for color in zone_colors:
            zone_pose = self.get_random_pose(env, zone_size)
            env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[color])
            zone_poses.append(zone_pose)

        # Add cylinders with corresponding colors
        cylinder_size = (0.04, 0.04, 0.12)  # Diameter and height for the cylinder
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for color in cylinder_colors:
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': utils.COLORS[color]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

        # Add goals for each cylinder to be placed in the matching color zone
        for i, color in enumerate(cylinder_colors):
            language_goal = self.lang_template.format(color=color)
            self.add_goal(
                objs=[cylinders[i]],  # Single cylinder
                matches=np.int32([[1]]),  # Match with the corresponding zone
                targ_poses=[zone_poses[i]],  # Target pose is the pose of the corresponding zone
                replace=False,  # Each cylinder has a unique zone
                rotations=False,  # Rotation is not considered in this task
                metric='zone',  # The metric is whether the cylinder is in the zone
                params=[(zone_poses[i], zone_size)],  # Parameters for the zone
                step_max_reward=1,  # Full reward for completing this step
                language_goal=language_goal  # Language goal for this step
            )