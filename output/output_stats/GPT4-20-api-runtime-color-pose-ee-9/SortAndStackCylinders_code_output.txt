import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class SortAndStackCylinders(Task):
    """Sort a collection of cylinders by color and stack them in ascending order of height within designated colored zones."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to sort and stack 5 cylinders, so 10 steps should be sufficient.
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector.
        self.lang_template = "stack the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done sorting and stacking cylinders."

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones.
        n_cylinders = 5
        n_zones = 3

        # Define cylinder size range (height, radius).
        cylinder_size_range = (0.05, 0.10)

        # Define colors for cylinders and zones.
        cylinder_colors = ['red', 'green', 'blue', 'yellow', 'purple']
        zone_colors = ['red', 'green', 'blue']

        # Add zones with corresponding colors.
        zone_size = (0.15, 0.15, 0)  # Zones are flat squares.
        zone_urdf = 'zone/zone.urdf'
        zones = []
        for i in range(n_zones):
            zone_pose = self.get_random_pose(env, zone_size)
            color = utils.COLORS[zone_colors[i]]
            env.add_object(zone_urdf, zone_pose, 'fixed', color=color)
            zones.append((zone_pose, zone_size))

        # Add cylinders with random sizes and colors.
        cylinders = []
        for i in range(n_cylinders):
            # Randomly choose a color for the cylinder.
            color_name = np.random.choice(cylinder_colors)
            color = utils.COLORS[color_name]

            # Randomly generate a size for the cylinder within the defined range.
            height = np.random.uniform(*cylinder_size_range)
            radius = 0.02  # Fixed radius for all cylinders.
            size = (2 * radius, 2 * radius, height)

            # Generate the cylinder URDF using the template.
            cylinder_template = 'cylinder/cylinder-template.urdf'
            replace = {'SIZE': size, 'COLOR': color}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Get a random pose for the cylinder.
            pose = self.get_random_pose(env, size)
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append((cylinder_id, color_name, height))

        # Sort cylinders by color and height.
        cylinders.sort(key=lambda x: (x[1], x[2]))

        # Add goals for each cylinder to be stacked in the correct zone.
        for i, (cylinder_id, color_name, _) in enumerate(cylinders):
            # Find the corresponding zone for the cylinder color.
            zone_index = cylinder_colors.index(color_name)
            zone_pose, _ = zones[zone_index]

            # Create a language goal for the stacking action.
            language_goal = self.lang_template.format(color=color_name)

            # Add the goal for the cylinder to be stacked in the correct zone.
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

        # Set the max steps to twice the number of goals.
        self.max_steps = len(self.goals) * 2