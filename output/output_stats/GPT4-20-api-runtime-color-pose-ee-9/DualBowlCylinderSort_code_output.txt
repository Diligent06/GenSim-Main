import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class DualBowlCylinderSort(Task):
    """Sort a set of five cylinders by color, placing red cylinders into a red bowl and blue cylinders into a blue bowl."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Set to twice the number of goals
        self.lang_template = "put the {color} cylinders in the {color} bowl"
        self.task_completed_desc = "done sorting cylinders."
        self.ee = Suction  # Use Suction end-effector for picking and placing cylinders
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and bowls
        n_cylinders = 5
        n_bowls = 2  # One red bowl and one blue bowl

        # Define the size of the bowls and cylinders
        bowl_size = (0.15, 0.15, 0.06)  # (x, y, z) dimensions
        cylinder_size = (0.05, 0.05, 0.15)  # (x, y, z) dimensions

        # Define the colors for the cylinders and bowls
        red_color = utils.COLORS['red']
        blue_color = utils.COLORS['blue']

        # Add red and blue bowls to the environment at opposite ends
        bowl_urdf = 'bowl/bowl.urdf'
        red_bowl_pose = self.get_random_pose(env, bowl_size)
        blue_bowl_pose = self.get_random_pose(env, bowl_size)
        env.add_object(bowl_urdf, red_bowl_pose, 'fixed', color=red_color)
        env.add_object(bowl_urdf, blue_bowl_pose, 'fixed', color=blue_color)

        # Add cylinders to the environment
        cylinder_template = 'cylinder/cylinder-template.urdf'
        red_cylinders = []
        blue_cylinders = []
        for _ in range(n_cylinders):
            # Randomly assign color to the cylinder
            color = red_color if np.random.rand() > 0.5 else blue_color
            # Generate a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Fill the URDF template with the cylinder size and color
            replace = {'SIZE': cylinder_size, 'COLOR': color}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            # Sort the cylinders into red and blue lists
            if color == red_color:
                red_cylinders.append(cylinder_id)
            else:
                blue_cylinders.append(cylinder_id)

        # Define the goals for red and blue cylinders
        # Red cylinders should go into the red bowl
        for red_cylinder in red_cylinders:
            self.add_goal(objs=[red_cylinder], matches=np.int32([[1]]), targ_poses=[red_bowl_pose], replace=False,
                          rotations=True, metric='zone', params=[(red_bowl_pose, bowl_size)], step_max_reward=1,
                          language_goal=self.lang_template.format(color='red'))
        # Blue cylinders should go into the blue bowl
        for blue_cylinder in blue_cylinders:
            self.add_goal(objs=[blue_cylinder], matches=np.int32([[1]]), targ_poses=[blue_bowl_pose], replace=False,
                          rotations=True, metric='zone', params=[(blue_bowl_pose, bowl_size)], step_max_reward=1,
                          language_goal=self.lang_template.format(color='blue'))