import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class StackAndInsert(Task):
    """Sequentially stack two green blocks on top of each other and then insert a blue cylinder on top of the stack within the confines of a fixture."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 steps, so max_steps is set to twice that number
        self.lang_template = "stack the {object} and insert the {insert_object} into the fixture"
        self.task_completed_desc = "done stacking and inserting."
        self.ee = Suction  # Use Suction end-effector to allow lifting objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the colors for the blocks and cylinder using the provided utils.COLORS dictionary
        green_color = utils.COLORS['green']
        blue_color = utils.COLORS['blue']

        # Define the sizes for the blocks and cylinder
        block_size = (0.04, 0.04, 0.04)  # Size of the green blocks
        cylinder_size = (0.02, 0.02, 0.08)  # Size of the blue cylinder

        # Add two green blocks with random poses within the workspace bounds
        block_urdf = 'stacking/block.urdf'
        blocks = []
        for _ in range(2):
            block_pose = self.get_random_pose(env, block_size)
            block_id = env.add_object(block_urdf, block_pose, color=green_color)
            blocks.append((block_id, block_pose))

        # Add the blue cylinder with a random pose within the workspace bounds
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_pose = self.get_random_pose(env, cylinder_size)
        replace = {'COLOR': blue_color}
        cylinder_urdf = self.fill_template(cylinder_template, replace)
        cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

        # Add the fixture with a fixed pose within the workspace bounds
        fixture_size = (0.1, 0.1, 0.1)  # Size of the fixture
        fixture_urdf = 'insertion/fixture.urdf'
        fixture_pose = self.get_random_pose(env, fixture_size)
        env.add_object(fixture_urdf, fixture_pose, category='fixed')

        # Define the target poses for the blocks and cylinder
        # The first block will be placed at the fixture's position
        block_target_pose = fixture_pose
        # The second block will be stacked on top of the first block
        second_block_target_pose = (block_target_pose[0], (block_target_pose[1][0], block_target_pose[1][1], block_target_pose[1][2] + block_size[2]))
        # The cylinder will be inserted on top of the second block
        cylinder_target_pose = (second_block_target_pose[0], (second_block_target_pose[1][0], second_block_target_pose[1][1], second_block_target_pose[1][2] + cylinder_size[2]))

        # Add goals for stacking the blocks and inserting the cylinder
        # Goal 1: Stack the first green block
        self.add_goal(objs=[blocks[0][0]], matches=np.ones((1, 1)), targ_poses=[block_target_pose], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3,
                      language_goal=self.lang_template.format(object="first green block", insert_object="cylinder"))

        # Goal 2: Stack the second green block on top of the first
        self.add_goal(objs=[blocks[1][0]], matches=np.ones((1, 1)), targ_poses=[second_block_target_pose], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3,
                      language_goal=self.lang_template.format(object="second green block", insert_object="cylinder"))

        # Goal 3: Insert the blue cylinder on top of the stacked blocks
        self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[cylinder_target_pose], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3,
                      language_goal=self.lang_template.format(object="stacked blocks", insert_object="blue cylinder"))