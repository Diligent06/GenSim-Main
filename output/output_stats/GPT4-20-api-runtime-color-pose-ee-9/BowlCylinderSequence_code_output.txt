import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlCylinderSequence(Task):
    """Arrange a sequence of five differently colored cylinders inside a bowl."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to place 5 cylinders, so max_steps is twice that number
        self.lang_template = "place the {color} cylinder {position} in the bowl"
        self.task_completed_desc = "all cylinders are placed in sequence."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders
        cylinder_colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = ['red', 'green', 'blue', 'yellow', 'purple']

        # Add the bowl to the environment
        bowl_size = (0.18, 0.18, 0.06)  # x, y, z dimensions for the bowl size
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_pose = self.get_random_pose(env, bowl_size)
        env.add_object(bowl_urdf, bowl_pose, 'fixed')

        # Add cylinders to the environment
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.05, 0.05, 0.1)  # x, y, z dimensions for the cylinder size
        cylinders = []
        for color in cylinder_colors:
            # Generate a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Set the color for the cylinder
            color_rgb = utils.COLORS[color]
            # Replace the template URDF with the specific color
            replace = {'COLOR': color_rgb}
            # Generate the URDF for the cylinder
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment and store its ID
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

        # Define the target positions for the cylinders inside the bowl
        # We place them in a sequence from the rim to the center
        target_positions = [
            (0.1, 0, 0.03),  # Near the rim
            (0.05, 0, 0.03),  # Moving towards the center
            (0, 0, 0.03),  # Center
            (-0.05, 0, 0.03),  # Moving outwards
            (-0.1, 0, 0.03)  # Near the opposite rim
        ]

        # Add goals for each cylinder
        for idx, (cylinder_id, color_name, target_position) in enumerate(zip(cylinders, color_names, target_positions)):
            # Define the language goal for placing this cylinder
            position_lang = ['on the right side', 'right of the center', 'in the center', 'left of the center', 'on the left side']
            language_goal = self.lang_template.format(color=color_name, position=position_lang[idx])
            # Define the target pose for the cylinder
            target_pose = (utils.apply(bowl_pose, target_position), bowl_pose[1])
            # Add the goal for this cylinder
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/5,
                          language_goal=language_goal)

        # Note: We set rotations to False because we don't need to consider the rotation of the cylinders for this task
        # Each cylinder has a max reward of 1/5 because there are 5 cylinders to place