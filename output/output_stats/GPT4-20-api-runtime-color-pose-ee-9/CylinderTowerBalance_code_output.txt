import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderTowerBalance(Task):
    """Stack three differently colored cylinders on top of each other in a designated zone."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is twice the number of goals
        self.lang_template = "stack the {color} cylinder"
        self.task_completed_desc = "done stacking the cylinders."
        self.ee = Suction  # Using Suction since we need to move objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders
        colors = ['red', 'green', 'blue']
        color_names = ['red cylinder', 'green cylinder', 'blue cylinder']

        # Add goal zone
        zone_size = (0.12, 0.12, 0)  # Zone size (x, y, z)
        zone_pose = self.get_random_pose(env, zone_size)  # Get a random pose for the zone within the workspace
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')  # Add the zone to the environment

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.04, 0.04, 0.12)  # Cylinder size (radius, radius, height)
        cylinder_urdfs = []
        cylinder_poses = []
        for i, color in enumerate(colors):
            # Get a random pose for the cylinder within the workspace
            pose = self.get_random_pose(env, cylinder_size)
            # Fill the URDF template with the specific color and size
            replace = {'COLOR': utils.COLORS[color], 'SIZE': cylinder_size}
            urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment and save its ID and pose
            cylinder_id = env.add_object(urdf, pose)
            cylinder_urdfs.append(urdf)
            cylinder_poses.append(pose)

            # Define the language goal
            language_goal = self.lang_template.format(color=color_names[i])

            # If it's the first cylinder, the target pose is the zone pose
            if i == 0:
                target_pose = zone_pose
            else:
                # For subsequent cylinders, the target pose is on top of the previous one
                # We take the previous cylinder's pose and increase the z-coordinate by the cylinder's height
                prev_pose = cylinder_poses[i-1]
                target_pose = (prev_pose[0], (prev_pose[1][0], prev_pose[1][1], prev_pose[1][2] + cylinder_size[2]))

            # Add the goal for the current cylinder
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/3, language_goal=language_goal)

        # The task is to stack the cylinders in the order: red, green, blue
        # The red cylinder goes first, so its target pose is the zone pose
        # The green cylinder goes on top of the red, and the blue on top of the green