import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlPyramidConstruction(Task):
    """Carefully stack three differently colored bowls into an inverted pyramid."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is set to twice that number
        self.lang_template = "stack the {color} bowl {position} in the inverted pyramid"
        self.task_completed_desc = "done constructing the bowl pyramid."
        self.ee = Suction  # Use suction end-effector to pick and place bowls
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define bowl sizes (large, medium, small)
        bowl_sizes = [
            (0.18, 0.18, 0.08),  # Large bowl
            (0.15, 0.15, 0.06),  # Medium bowl
            (0.12, 0.12, 0.04)   # Small bowl
        ]

        # Define bowl colors
        bowl_colors = ['red', 'green', 'blue']

        # Add bowls to the environment
        bowls = []
        for i in range(3):
            # Get a random pose for the bowl
            bowl_pose = self.get_random_pose(env, bowl_sizes[i])
            # Load the bowl URDF
            bowl_urdf = 'bowl/bowl.urdf'
            # Add the bowl object to the environment with the corresponding color
            bowl_id = env.add_object(bowl_urdf, bowl_pose, color=utils.COLORS[bowl_colors[i]])
            bowls.append((bowl_id, bowl_pose))

        # Define target poses for the bowls to form an inverted pyramid
        # The target poses are offsets from the base bowl's pose
        target_offsets = [
            (0, 0, -bowl_sizes[0][2]),  # Large bowl at the top, inverted
            (0, 0, -bowl_sizes[1][2] - bowl_sizes[0][2]),  # Medium bowl in the middle
            (0, 0, -bowl_sizes[2][2] - bowl_sizes[1][2] - bowl_sizes[0][2])  # Small bowl at the bottom
        ]

        # Add goals for each bowl
        for i in range(3):
            # Calculate the target pose using the base bowl's pose and the offset
            target_pose = (bowls[i][1][0] + np.array(target_offsets[i]), bowls[i][1][1])
            # Define the language goal
            position = ['on top', 'in the middle', 'at the bottom'][i]
            language_goal = self.lang_template.format(color=bowl_colors[i], position=position)
            # Add the goal for the current bowl
            self.add_goal(objs=[bowls[i][0]], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/3, language_goal=language_goal)

        # Note: The bowls are added in reverse order (large, medium, small) because the large bowl needs to be placed first
        # at the top of the inverted pyramid, followed by the medium and then the small bowl at the bottom.