import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderPrecisionStacking(Task):
    """Sequentially stack three differently colored cylinders onto a stand."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 goals, so max_steps is set to twice the number of goals
        self.lang_template = "stack the {color} cylinder on the stand"
        self.task_completed_desc = "done stacking cylinders."
        self.ee = Suction  # Use Suction end-effector for vertical stacking

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders
        colors = ['blue', 'green', 'yellow']
        color_rgb = [utils.COLORS[color] for color in colors]

        # Add the stand
        stand_size = (0.05, 0.05, 0.005)  # Size of the stand
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Initialize list to keep track of cylinder objects
        cylinder_objs = []

        # Add cylinders
        for i, color in enumerate(colors):
            # Define the size of the cylinder
            cylinder_size = (0.04, 0.04, 0.12)  # Diameter and height of the cylinder

            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)

            # Define the URDF template and replacements for the cylinder
            cylinder_template = 'cylinder/cylinder-template.urdf'
            replace = {
                'SIZE': cylinder_size,
                'COLOR': color_rgb[i],
            }

            # Fill the URDF template and add the object to the environment
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinder_objs.append(cylinder_id)

        # Define the target poses for the cylinders on the stand
        # The cylinders should be stacked on top of each other, so we adjust the z-coordinate accordingly
        z_offset = 0.12  # Height of one cylinder
        targ_poses = [
            (stand_pose[0], stand_pose[1]),  # Target pose for the first cylinder (blue)
            (stand_pose[0], stand_pose[1]),  # Target pose for the second cylinder (green)
            (stand_pose[0], stand_pose[1]),  # Target pose for the third cylinder (yellow)
        ]
        targ_poses[1][0][2] += z_offset  # Adjust z-coordinate for the second cylinder
        targ_poses[2][0][2] += 2 * z_offset  # Adjust z-coordinate for the third cylinder

        # Add goals for each cylinder
        for i, cylinder_id in enumerate(cylinder_objs):
            language_goal = self.lang_template.format(color=colors[i])
            self.add_goal(
                objs=[cylinder_id],
                matches=np.ones((1, 1)),
                targ_poses=[targ_poses[i]],
                replace=False,
                rotations=False,  # No need to specify rotations for cylinders
                metric='pose',
                params=None,
                step_max_reward=1,  # Since we have only one goal per cylinder, the max reward is 1
                language_goal=language_goal
            )