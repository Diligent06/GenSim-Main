import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedCylinderAlignment(Task):
    """
    Pick up five differently colored cylinders and align them in a straight line on the tabletop,
    with each cylinder's color matching a designated zone's boundary color.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call self.add_goal 5 times, so set max_steps to twice that number
        self.ee = Suction  # Use Suction end-effector to pick and place cylinders vertically
        self.lang_template = "align the {color} cylinder with the {color} zone"
        self.task_completed_desc = "done aligning the cylinders."

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders and corresponding zones
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [f"{color} cylinder" for color in colors]

        # Add zones with matching colors to the cylinders
        zone_size = (0.05, 0.05, 0)  # Zones are flat squares on the table
        zone_urdf = 'zone/zone.urdf'
        zone_poses = []
        for color in colors:
            zone_pose = self.get_random_pose(env, zone_size)
            env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[color])
            zone_poses.append(zone_pose)

        # Add cylinders with matching colors to the zones
        cylinder_size = (0.05, 0.05, 0.15)  # Diameter and height for the cylinder
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i, color in enumerate(colors):
            pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': utils.COLORS[color]}
            # Replace the template URDF with the specified color
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append(cylinder_id)

            # Define the language goal for each cylinder
            language_goal = self.lang_template.format(color=color)

            # Add goal for each cylinder to be placed in the matching color zone
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_poses[i]],
                          replace=False, rotations=False, metric='pose', params=None,
                          step_max_reward=1, language_goal=language_goal)

        # The task is to align the cylinders with the zones of the same color
        # Each cylinder has a designated zone, and the goal is to match them