import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCoordinatedCylinderLineup(Task):
    """Pick up and place cylinders of various colors onto their matching colored lines,
    ensuring they are balanced and aligned."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we have 5 cylinders and 5 lines, 2 steps per cylinder
        self.lang_template = "place the {color} cylinder on the {color} line"
        self.task_completed_desc = "done placing all cylinders."
        self.ee = Suction  # Using Suction since we need to move objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and lines
        n_cylinders = 5
        n_lines = 5

        # Define cylinder size
        cylinder_size = (0.04, 0.04, 0.1)  # (radius, radius, height)

        # Define line size
        line_size = (0.02, 0.5, 0.001)  # (width, length, height)

        # Available colors
        colors = ['red', 'green', 'blue', 'yellow', 'purple']

        # Shuffle colors to avoid always picking an object of the same color
        np.random.shuffle(colors)

        # Add cylinders with matching colors
        cylinders = []
        for i in range(n_cylinders):
            color_name = colors[i]
            color_rgb = utils.COLORS[color_name]
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_template = 'cylinder/cylinder-template.urdf'
            replace = {'COLOR': color_rgb, 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append((cylinder_id, color_name))

        # Add lines with matching colors
        lines = []
        for i in range(n_lines):
            color_name = colors[i]
            color_rgb = utils.COLORS[color_name]
            line_pose = self.get_random_pose(env, line_size)
            line_template = 'line/single-green-line-template.urdf'
            replace = {'COLOR': color_rgb, 'SIZE': line_size}
            line_urdf = self.fill_template(line_template, replace)
            env.add_object(line_urdf, line_pose, 'fixed')
            lines.append((line_pose, color_name))

        # Add goals for each cylinder to be placed on the matching line
        for cylinder, cylinder_color in cylinders:
            # Find the matching line pose
            matching_line_pose = next(pose for pose, line_color in lines if line_color == cylinder_color)
            language_goal = self.lang_template.format(color=cylinder_color)
            self.add_goal(objs=[cylinder], matches=np.int32([[1]]), targ_poses=[matching_line_pose],
                          replace=False, rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)