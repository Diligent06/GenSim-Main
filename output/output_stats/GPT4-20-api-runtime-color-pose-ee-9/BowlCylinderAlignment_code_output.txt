import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlCylinderAlignment(Task):
    """Arrange a set of three differently colored cylinders around a central bowl without touching it,
    each cylinder standing upright at equidistant points on an imaginary circle around the bowl."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is set to twice that number
        self.lang_template = "place the {color} cylinder at the {position} position around the bowl"
        self.task_completed_desc = "done arranging the cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Add central bowl
        bowl_size = (0.18, 0.18, 0.06)  # Size of the bowl
        bowl_pose = self.get_random_pose(env, bowl_size)
        bowl_urdf = 'bowl/bowl.urdf'
        env.add_object(bowl_urdf, bowl_pose, 'fixed')

        # Define cylinder properties
        cylinder_size = (0.05, 0.05, 0.15)  # Size of the cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_colors = ['red', 'green', 'blue']  # Colors of the cylinders
        cylinder_positions = ['left', 'right', 'back']  # Relative positions around the bowl

        # Calculate target poses for cylinders
        radius = 0.25  # Radius of the imaginary circle around the bowl
        angles = np.linspace(0, 2 * np.pi, 4)[:3]  # Angles for equidistant placement (0, 2pi/3, 4pi/3)
        target_positions = [(bowl_pose[0][0] + radius * np.cos(angle),
                             bowl_pose[0][1] + radius * np.sin(angle),
                             bowl_pose[0][2]) for angle in angles]

        # Add cylinders and define goals
        for i in range(3):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)

            # Create the cylinder URDF using the template
            color = utils.COLORS[cylinder_colors[i]]  # Get the RGB values for the cylinder color
            replace = {'COLOR': color}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

            # Define the language goal
            language_goal = self.lang_template.format(color=cylinder_colors[i], position=cylinder_positions[i])

            # Add the goal for the cylinder
            self.add_goal(objs=[cylinder_id],
                          matches=np.int32([[1]]),
                          targ_poses=[(target_positions[i], (0, 0, 0, 1))],  # Target pose with upright orientation
                          replace=False,
                          rotations=False,  # Cylinders should remain upright, so no rotation is needed
                          metric='pose',
                          params=None,
                          step_max_reward=1 / 3,  # There are three goals, so each goal has a max reward of 1/3
                          language_goal=language_goal)

        # The task is set up with three cylinders placed around the bowl at specific target positions