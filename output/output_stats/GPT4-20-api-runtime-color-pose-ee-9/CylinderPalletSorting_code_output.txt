import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderPalletSorting(Task):
    """Sort and stack differently colored cylinders onto matching color zones on a pallet."""

    def __init__(self):
        super().__init__()
        self.max_steps = 12  # We expect to call self.add_goal 6 times (2 colors * 3 cylinders each)
        self.lang_template = "put the {color} cylinder on the {color} zone on the pallet"
        self.task_completed_desc = "done sorting and stacking cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders per color and the colors to use
        n_cylinders_per_color = 3
        cylinder_colors = ['red', 'blue']

        # Add pallet
        pallet_size = (0.3, 0.3, 0.02)  # x, y, z dimensions for the pallet size
        pallet_pose = self.get_random_pose(env, pallet_size)
        pallet_urdf = 'pallet/pallet.urdf'
        env.add_object(pallet_urdf, pallet_pose, 'fixed')

        # Add zones on the pallet for each color
        zone_size = (0.1, 0.1, 0)  # x, y, z dimensions for the zone size
        zone_urdf = 'zone/zone.urdf'
        zone_poses = []
        for color in cylinder_colors:
            # Calculate zone pose offset from the center of the pallet
            offset = (0.1 if color == 'red' else -0.1, 0, 0.01)
            zone_pose = utils.apply(pallet_pose, offset)
            env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[color])
            zone_poses.append(zone_pose)

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for color in cylinder_colors:
            for _ in range(n_cylinders_per_color):
                # x, y, z dimensions for the cylinder size
                size = (0.02, 0.02, 0.06)
                pose = self.get_random_pose(env, size)
                replace = {'COLOR': utils.COLORS[color]}
                # Replace the template URDF with the specified color
                cylinder_urdf = self.fill_template(cylinder_template, replace)
                cylinder_id = env.add_object(cylinder_urdf, pose)
                
                # Define the language goal
                language_goal = self.lang_template.format(color=color)
                
                # Add goal for each cylinder to be placed on the correct zone
                # We use the same zone pose for all cylinders of the same color
                self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_poses[cylinder_colors.index(color)]],
                              replace=False, rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders_per_color,
                              language_goal=language_goal)