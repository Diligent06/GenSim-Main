import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedBallArrangement(Task):
    """Place differently colored balls into the corresponding colored bowls on a pallet."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we have 5 balls and bowls, 2 steps per ball
        self.lang_template = "put the {color} ball in the {color} bowl"
        self.task_completed_desc = "done placing all balls in the corresponding bowls."
        self.ee = Suction  # Using Suction end-effector to pick up balls
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of balls and bowls
        n_balls = 5

        # Define colors for the balls and bowls
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [f"{color} ball" for color in colors]

        # Add pallet
        pallet_size = (0.3, 0.3, 0.02)  # x, y, z dimensions for the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Add bowls and balls
        bowls = []
        balls = []
        bowl_size = (0.1, 0.1, 0.05)  # x, y, z dimensions for the bowl
        ball_size = (0.05, 0.05, 0.05)  # x, y, z dimensions for the ball
        for i, color in enumerate(colors):
            # Add bowl
            bowl_pose = self.get_random_pose(env, bowl_size)
            bowl_urdf = 'bowl/bowl.urdf'
            bowl_id = env.add_object(bowl_urdf, bowl_pose, 'fixed', color=utils.COLORS[color])
            bowls.append((bowl_id, bowl_pose))

            # Add ball
            ball_pose = self.get_random_pose(env, ball_size)
            ball_template = 'ball/ball-template.urdf'
            replace = {'COLOR': utils.COLORS[color]}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append(ball_id)

            # Define the language goal
            language_goal = self.lang_template.format(color=color)

            # Add goal for each ball to be in the corresponding bowl
            self.add_goal(objs=[ball_id], matches=np.ones((1, 1)), targ_poses=[bowl_pose], replace=True,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_balls,
                          language_goal=language_goal)

        # The task is to place each ball in the bowl with the same color
        # Each ball has a corresponding bowl, and the goal is to match them by color