import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderLineAlignment(Task):
    """Align five differently colored cylinders along a single green line template on the table without any overlap between cylinders."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to align each cylinder in two steps (pick and place), hence 5*2=10
        self.ee = Suction  # Suction is needed to pick up cylinders and move them in the Z axis

        # Language templates for instructions
        self.lang_template = "align the {color} cylinder on the green line"
        self.task_completed_desc = "done aligning cylinders."

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders
        n_cylinders = 5

        # Define the colors for the cylinders
        colors = ['red', 'blue', 'green', 'orange', 'yellow']
        color_names = [utils.COLORS[color] for color in colors]

        # Add the green line template to the environment
        line_size = (0.5, 0.05, 0.001)  # Size of the line template
        line_pose = self.get_random_pose(env, line_size)  # Random pose for the line template
        line_urdf = 'line/single-green-line-template.urdf'
        env.add_object(line_urdf, line_pose, 'fixed')  # Add the line template as a fixed object

        # Add cylinders to the environment
        cylinder_size = (0.02, 0.02, 0.1)  # Size of the cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_poses = []  # List to store the initial poses of the cylinders
        for i in range(n_cylinders):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Fill the cylinder URDF template with the specific color
            replace = {'COLOR': color_names[i]}
            # Generate the URDF for the cylinder with the specified color
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment and store its pose
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinder_poses.append(cylinder_pose)

            # Define the target pose for the cylinder on the line
            # The target pose has the same orientation as the initial pose and is placed on the line
            target_pose = (line_pose[0], cylinder_pose[1])

            # Define the language goal for aligning this cylinder
            language_goal = self.lang_template.format(color=colors[i])

            # Add the goal for this cylinder
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=True,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

        # Additional reset steps if needed
        self.additional_reset()