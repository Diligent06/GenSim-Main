import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class VerticalCylinderAlignment(Task):
    """Align five different colored cylinders vertically on the designated slot zones on top of a pallet."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to align 5 cylinders, so 10 steps should be sufficient
        self.lang_template = "align the {color} cylinder in the {color} slot on the pallet"
        self.task_completed_desc = "all cylinders aligned vertically."
        self.ee = Suction  # We need to move objects on the Z axis, so Suction is required

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders
        cylinder_colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = ['red', 'green', 'blue', 'yellow', 'purple']

        # Add pallet
        pallet_size = (0.3, 0.3, 0.02)  # Size of the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Add cylinders and zones
        cylinders = []
        zones = []
        for i, color in enumerate(cylinder_colors):
            # Add cylinder
            cylinder_size = (0.05, 0.05, 0.1)  # Size of the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_template = 'cylinder/cylinder-template.urdf'
            replace = {'COLOR': utils.COLORS[color]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Add zone
            zone_size = (0.06, 0.06, 0)  # Size of the zone
            zone_pose = (pallet_pose[0], pallet_pose[1])  # Zone pose on top of the pallet
            zone_urdf = 'zone/zone.urdf'
            env.add_object(zone_urdf, zone_pose, 'fixed')
            zones.append(zone_pose)

            # Define the language goal
            language_goal = self.lang_template.format(color=color_names[i])

            # Add goal for each cylinder
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[zone_pose], replace=True,
                          rotations=False, metric='pose', params=None, step_max_reward=1/5,
                          language_goal=language_goal)

        # Set the progress metric
        self.progress = 0