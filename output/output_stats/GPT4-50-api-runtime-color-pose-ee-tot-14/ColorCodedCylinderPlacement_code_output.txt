import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedCylinderPlacement(Task):
    """
    Arrange five uniquely colored cylinders in a row on the table,
    matching each to a correspondingly colored zone marker.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call add_goal once, so set max_steps to twice that number
        self.lang_template = "place the {color} cylinder in the matching {color} zone"
        self.task_completed_desc = "done placing all cylinders in the correct zones."
        self.ee = Suction  # Use Suction end-effector to pick and place cylinders

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders and corresponding zones
        cylinder_colors = ['red', 'green', 'blue', 'yellow', 'purple']
        np.random.shuffle(cylinder_colors)  # Shuffle to randomize the order for each reset

        # Define the size of the cylinders
        cylinder_size = (0.05, 0.05, 0.15)  # (radius, radius, height)

        # Define the size of the zones
        zone_size = (0.07, 0.07, 0)  # (radius, radius, height)

        # Add cylinders and zones to the environment
        cylinders = []
        zones = []
        for i, color_name in enumerate(cylinder_colors):
            # Add cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_template = 'cylinder/cylinder-template.urdf'
            cylinder_color = utils.COLORS[color_name]
            replace = {'COLOR': cylinder_color, 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append((cylinder_id, cylinder_pose))

            # Add zone
            zone_pose = self.get_random_pose(env, zone_size)
            zone_urdf = 'zone/zone.urdf'
            env.add_object(zone_urdf, zone_pose, 'fixed', color=cylinder_color)
            zones.append(zone_pose)

            # Define the language goal
            language_goal = self.lang_template.format(color=color_name)

            # Add goal for placing the cylinder in the correct zone
            self.add_goal(objs=[cylinder_id],
                          matches=np.int32([[1]]),
                          targ_poses=[zone_pose],
                          replace=False,
                          rotations=False,  # Cylinders only need to be placed, not rotated
                          metric='pose',
                          params=None,
                          step_max_reward=1,  # Full reward for placing each cylinder correctly
                          language_goal=language_goal)

        # Comment: The task is to place each uniquely colored cylinder into the matching colored zone.
        # The cylinders and zones are added to the environment with matching colors.
        # The goal is added for each cylinder to be placed in the correct zone with a language goal
        # that specifies the color of the cylinder and the zone.