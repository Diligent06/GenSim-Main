import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class MultiLevelCylinderArrangement(Task):
    """Arrange five differently colored cylinders on multilevel stands ensuring each cylinder is placed on a stand with a matching color indicator."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We have 5 cylinders to place, so 10 steps should be sufficient
        self.lang_template = "place the {color} cylinder on the {color} stand"
        self.task_completed_desc = "all cylinders are arranged on the matching stands."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders and stands
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = ['red', 'green', 'blue', 'yellow', 'purple']

        # Add stands with different levels and color indicators
        stand_size = (0.05, 0.05, 0.01)  # Size of the stand (x, y, z)
        stand_urdf = 'stacking/stand.urdf'
        stand_poses = []  # To keep track of the stand poses for goal setting
        for i, color in enumerate(colors):
            # Calculate the z-coordinate based on the level (i)
            z_coord = 0.01 * i
            # Get a random pose for the stand
            stand_pose = self.get_random_pose(env, stand_size)
            # Adjust the z-coordinate to set the level
            stand_pose = (stand_pose[0], (stand_pose[1][0], stand_pose[1][1], z_coord, stand_pose[1][3]))
            # Add the stand to the environment with the corresponding color
            env.add_object(stand_urdf, stand_pose, category='fixed', color=utils.COLORS[color])
            stand_poses.append(stand_pose)

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.02, 0.02, 0.08)  # Size of the cylinder (x, y, z)
        for i, color in enumerate(colors):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Fill in the template URDF with the cylinder color
            replace = {'COLOR': utils.COLORS[color]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            # Set the language goal for placing the cylinder
            language_goal = self.lang_template.format(color=color_names[i])
            # Add the goal for the cylinder to be placed on the matching stand
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[stand_poses[i]], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1 / len(colors),
                          language_goal=language_goal)

        # The task is set up with cylinders and stands, and goals are defined for each cylinder to be placed on the matching stand.