import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class DigitSorting(Task):
    """Arrange ten cylindrical objects into two color-coded bowls, five representing the digits 0-4 in the blue bowl and the other five representing 5-9 in the red bowl, based on the height of cylinders which correlate with the digit values."""

    def __init__(self):
        super().__init__()
        self.max_steps = 20  # We expect to call self.add_goal twice, so we set this to 4
        self.lang_template = "put the {color} cylinders representing digits {digits} in the {bowl_color} bowl"
        self.task_completed_desc = "done sorting digits."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Add two bowls, one blue and one red.
        bowl_size = (0.15, 0.15, 0.05)  # Size of the bowl
        blue_bowl_pose = self.get_random_pose(env, bowl_size)
        red_bowl_pose = self.get_random_pose(env, bowl_size)
        bowl_urdf = 'bowl/bowl.urdf'
        env.add_object(bowl_urdf, blue_bowl_pose, 'fixed', color=utils.COLORS['blue'])
        env.add_object(bowl_urdf, red_bowl_pose, 'fixed', color=utils.COLORS['red'])

        # Add ten cylindrical objects with heights corresponding to digits 0-9.
        cylinder_template = 'cylinder/cylinder-template.urdf'
        digits = list(range(10))  # Digits 0-9
        np.random.shuffle(digits)  # Shuffle to randomize initial positions
        cylinders = []
        for digit in digits:
            # Height correlates with the digit value (scaled for visual distinction)
            height = 0.02 + digit * 0.002
            size = (0.02, 0.02, height)
            pose = self.get_random_pose(env, size)
            replace = {'SIZE': size}
            # Generate a random color for the cylinder
            color = utils.COLORS[np.random.choice(list(utils.COLORS.keys()))]
            # Replace the template URDF with the specific size and color
            urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(urdf, pose, color=color)
            cylinders.append((cylinder_id, digit))

        # Sort cylinders into two groups based on their digit value
        blue_cylinders = [cid for cid, digit in cylinders if digit < 5]
        red_cylinders = [cid for cid, digit in cylinders if digit >= 5]

        # Add goals for each group of cylinders and their corresponding bowls
        self.add_goal(objs=blue_cylinders, matches=np.ones((5, 1)), targ_poses=[blue_bowl_pose], replace=False,
                      rotations=False, metric='zone', params=[(blue_bowl_pose, bowl_size)], step_max_reward=1,
                      language_goal=self.lang_template.format(color="blue", digits="0-4", bowl_color="blue"))

        self.add_goal(objs=red_cylinders, matches=np.ones((5, 1)), targ_poses=[red_bowl_pose], replace=False,
                      rotations=False, metric='zone', params=[(red_bowl_pose, bowl_size)], step_max_reward=1,
                      language_goal=self.lang_template.format(color="red", digits="5-9", bowl_color="red"))