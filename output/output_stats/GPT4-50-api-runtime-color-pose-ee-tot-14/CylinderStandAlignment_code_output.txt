import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderStandAlignment(Task):
    """
    Align a set of five different colored cylinders to the corresponding colored edges marked on a stand,
    ensuring each cylinder sits flush with the edge.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to align 5 cylinders, so 10 steps should be sufficient.
        self.lang_template = "align the {color} cylinder with the {color} edge on the stand"
        self.task_completed_desc = "done aligning cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so Suction is appropriate.

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders.
        cylinder_colors = ['red', 'green', 'blue', 'yellow', 'purple']
        # Shuffle the colors to ensure randomness.
        np.random.shuffle(cylinder_colors)

        # Add the stand.
        stand_size = (0.3, 0.3, 0.02)  # Size of the stand.
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Add cylinders.
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.05, 0.05, 0.1)  # Diameter and height of the cylinder.
        cylinder_scale = [0.05, 0.05, 0.1]  # Scale for the URDF model.

        # Initialize a list to store cylinder IDs.
        cylinder_ids = []

        # Add cylinders to the environment.
        for color_name in cylinder_colors:
            # Get the color RGB values.
            color_rgb = utils.COLORS[color_name]
            # Get a random pose for the cylinder.
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Replace the placeholders in the URDF template.
            replace = {'FNAME': ('cylinder.obj',), 'SCALE': cylinder_scale, 'COLOR': color_rgb}
            # Generate the URDF for the cylinder.
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment.
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            # Store the cylinder ID.
            cylinder_ids.append(cylinder_id)

        # Define the target poses for the cylinders on the stand.
        # We assume the edges are marked at equal intervals along the edge of the stand.
        edge_positions = np.linspace(-0.1, 0.1, 5)  # Five positions along one edge of the stand.
        for idx, color_name in enumerate(cylinder_colors):
            # The target pose for each cylinder is on the corresponding edge of the stand.
            # We use the x-coordinate from edge_positions and keep y and z constant.
            # The orientation is the same as the stand's orientation.
            target_pose = [(stand_pose[0][0] + edge_positions[idx], stand_pose[0][1], stand_pose[0][2] + cylinder_size[2]/2), stand_pose[1]]
            # Define the language goal for this step.
            language_goal = self.lang_template.format(color=color_name)
            # Add the goal for aligning this cylinder.
            self.add_goal(objs=[cylinder_ids[idx]], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/5, language_goal=language_goal)

        # Set the number of steps to twice the number of goals.
        self.max_steps = len(self.goals) * 2