import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderTower(Task):
    """
    Stack a tower with alternating colors of five cylinders on top of a flat box,
    ensuring each cylinder is centered on the one below.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to stack 5 cylinders, so 10 steps should be sufficient
        self.lang_template = "stack the {color} cylinder on top of the {base_color} one"
        self.task_completed_desc = "done stacking the cylinder tower."
        self.ee = Suction  # We need to move objects on the Z axis, so Suction is appropriate

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders
        colors = ['red', 'blue', 'green', 'yellow', 'purple']
        np.random.shuffle(colors)  # Shuffle to get random order of colors

        # Add base box
        base_size = (0.15, 0.15, 0.02)  # x, y, z dimensions for the base box
        base_pose = self.get_random_pose(env, base_size)
        base_template = 'box/box-template.urdf'
        replace = {'DIM': base_size}
        base_urdf = self.fill_template(base_template, replace)
        env.add_object(base_urdf, base_pose, 'fixed')

        # Initialize list to keep track of cylinder IDs and their poses for goal setting
        cylinder_ids = []
        cylinder_poses = []

        # Add cylinders
        for i, color in enumerate(colors):
            # Define cylinder size
            cylinder_size = (0.05, 0.05, 0.1)  # x, y, z dimensions for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_template = 'cylinder/cylinder-template.urdf'
            replace = {'DIM': cylinder_size, 'COLOR': utils.COLORS[color]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinder_ids.append(cylinder_id)
            cylinder_poses.append(cylinder_pose)

            # Set language goal
            if i == 0:
                base_color = 'the flat box'
            else:
                base_color = colors[i - 1] + ' cylinder'
            language_goal = self.lang_template.format(color=color, base_color=base_color)

            # Set motion goal
            if i == 0:
                # The first cylinder is placed on the base box
                target_pose = base_pose
            else:
                # Subsequent cylinders are placed on top of the previous one
                # We use the x, y of the base_pose and increment z by the height of the cylinders
                target_pose = (cylinder_poses[i - 1][0], (0, 0, 0, 1))  # No rotation needed, keep it upright

            # Add goal for the current cylinder
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / len(colors),
                          language_goal=language_goal)

        # Set the primitive to be used for this task
        self.primitive = primitives.push  # Although we use Suction, we still need to define the primitive