import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCoordinatedCylinderPyramid(Task):
    """
    Create a pyramid using cylinders of different colors by stacking them on a pallet in a 3-2-1 formation,
    aligning them by their color zones marked on the pallet.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is twice that number
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.lang_template = "stack the {color} cylinder on the {color} zone"
        self.task_completed_desc = "done creating the cylinder pyramid."

    def reset(self, env):
        super().reset(env)

        # Define cylinder size and colors
        cylinder_size = (0.04, 0.04, 0.12)  # Diameter, Diameter, Height
        cylinder_colors = ['red', 'green', 'blue', 'yellow', 'orange', 'purple']
        np.random.shuffle(cylinder_colors)  # Shuffle colors to randomize the order

        # Add pallet
        pallet_size = (0.3, 0.3, 0.02)  # Length, Width, Height
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Add cylinders
        cylinder_urdf_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for color in cylinder_colors:
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)
            # Set the color of the cylinder
            color_rgb = utils.COLORS[color]
            # Replace placeholders in the URDF template
            replace = {'COLOR': color_rgb}
            # Generate the URDF for the cylinder
            cylinder_urdf = self.fill_template(cylinder_urdf_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append((cylinder_id, color))

        # Add zones for color coordination on the pallet
        zone_size = (0.1, 0.1, 0)  # Length, Width, Height (flat zone)
        zone_urdf = 'zone/zone.urdf'
        zones = []
        for i, color in enumerate(cylinder_colors[:3]):  # Only need 3 zones for the base of the pyramid
            # Calculate zone position based on the pallet pose and the index
            zone_pose = utils.apply(pallet_pose, (0.1 * (i - 1), 0.1, 0.01))
            # Add the zone to the environment
            env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[color])
            zones.append((zone_pose, color))

        # Define goals for stacking cylinders in a 3-2-1 pyramid formation
        # Bottom layer (3 cylinders)
        for i, (cylinder_id, color) in enumerate(cylinders[:3]):
            zone_pose, zone_color = zones[i]
            assert color == zone_color, "Cylinder color does not match zone color"
            language_goal = self.lang_template.format(color=color)
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[zone_pose], replace=True,
                          rotations=False, metric='pose', params=None, step_max_reward=1/3,
                          language_goal=language_goal)

        # Middle layer (2 cylinders)
        for i, (cylinder_id, color) in enumerate(cylinders[3:5]):
            # Calculate the target pose for the middle layer cylinders
            zone_pose, _ = zones[i]
            target_pose = utils.apply(zone_pose, (0, 0.05, cylinder_size[2]))
            language_goal = self.lang_template.format(color=color)
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=True,
                          rotations=False, metric='pose', params=None, step_max_reward=1/2,
                          language_goal=language_goal)

        # Top layer (1 cylinder)
        cylinder_id, color = cylinders[5]
        # Calculate the target pose for the top layer cylinder
        zone_pose, _ = zones[1]  # Use the middle zone for the top cylinder
        target_pose = utils.apply(zone_pose, (0, 0, 2 * cylinder_size[2]))
        language_goal = self.lang_template.format(color=color)
        self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=True,
                      rotations=False, metric='pose', params=None, step_max_reward=1,
                      language_goal=language_goal)