import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderSortAndStack(Task):
    """Pick up uniquely colored cylinders and stack them on the corresponding colored corner markers in ascending order of size."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we will have 5 goals (one for each cylinder)
        self.lang_template = "stack the {color} cylinder on the {color} corner marker"
        self.task_completed_desc = "done sorting and stacking cylinders."
        self.ee = Suction  # Use suction end-effector to pick and stack cylinders

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and corner markers
        n_cylinders = 5
        n_corners = 5

        # Define cylinder sizes in ascending order
        cylinder_sizes = [(0.02 * i, 0.02 * i, 0.04) for i in range(1, n_cylinders + 1)]

        # Define available colors
        colors = ['red', 'green', 'blue', 'yellow', 'purple']

        # Shuffle colors to ensure randomness
        np.random.shuffle(colors)

        # Add corner markers
        corner_size = (0.05, 0.05, 0.001)
        corner_template = 'corner/corner-template.urdf'
        corner_poses = []
        for i in range(n_corners):
            # Generate a random pose for the corner marker
            corner_pose = self.get_random_pose(env, corner_size)
            replace = {'COLOR': utils.COLORS[colors[i]]}
            corner_urdf = self.fill_template(corner_template, replace)
            env.add_object(corner_urdf, corner_pose, 'fixed')
            corner_poses.append(corner_pose)

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i in range(n_cylinders):
            # Generate a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_sizes[i])
            replace = {'COLOR': utils.COLORS[colors[i]], 'SIZE': cylinder_sizes[i]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            
            # Define the language goal for stacking the cylinder
            language_goal = self.lang_template.format(color=colors[i])
            
            # Add goal for stacking the cylinder on the corresponding corner marker
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[corner_poses[i]], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

# Instantiate the task
task = CylinderSortAndStack()