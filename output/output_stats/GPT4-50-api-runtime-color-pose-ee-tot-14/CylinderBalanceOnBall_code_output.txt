import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderBalanceOnBall(Task):
    """
    Balance a vertically oriented cylinder on top of a stationary ball without letting it fall over.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 2  # We have one main goal, but allow an extra step for adjustments
        self.lang_template = "balance the cylinder on top of the ball"
        self.task_completed_desc = "done balancing."
        self.ee = Suction  # Suction is needed to lift the cylinder vertically

    def reset(self, env):
        super().reset(env)

        # Define the size of the ball and cylinder
        ball_size = (0.1, 0.1, 0.1)  # Diameter of the ball
        cylinder_size = (0.05, 0.05, 0.2)  # Diameter and height of the cylinder

        # Generate a random pose for the ball within the workspace bounds
        ball_pose = self.get_random_pose(env, ball_size)
        # Generate a random pose for the cylinder within the workspace bounds
        cylinder_pose = self.get_random_pose(env, cylinder_size)

        # Define the URDF templates for the ball and cylinder
        ball_template = 'ball/ball-template.urdf'
        cylinder_template = 'cylinder/cylinder-template.urdf'

        # Fill in the ball URDF template with the size and color
        replace_ball = {'SIZE': ball_size, 'COLOR': utils.COLORS['silver']}
        ball_urdf = self.fill_template(ball_template, replace_ball)

        # Fill in the cylinder URDF template with the size and color
        replace_cylinder = {'SIZE': cylinder_size, 'COLOR': utils.COLORS['red']}
        cylinder_urdf = self.fill_template(cylinder_template, replace_cylinder)

        # Add the ball and cylinder to the environment
        ball_id = env.add_object(ball_urdf, ball_pose, 'fixed')  # The ball is stationary
        cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

        # Define the target pose for the cylinder, which is on top of the ball
        # The target pose is the ball's position with the cylinder's height added to the z-coordinate
        target_pose = (ball_pose[0], (0, 0, 0, 1))  # We don't need to specify orientation for the cylinder

        # Add the goal for the task
        self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                      rotations=False, metric='pose', params=None, step_max_reward=1,
                      language_goal=self.lang_template)