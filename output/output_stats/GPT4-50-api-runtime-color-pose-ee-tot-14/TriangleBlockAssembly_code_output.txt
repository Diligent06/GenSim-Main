import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class TriangleBlockAssembly(Task):
    """
    Arrange three differently colored blocks in the shape of a triangle inside a designated assembly zone,
    with each block touching at least one other block.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is set to twice the number of goals
        self.lang_template = "place the {color} block to form a triangle"
        self.task_completed_desc = "done assembling the blocks into a triangle."
        self.ee = Suction  # Using Suction end-effector as we need to move objects on the Z axis
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the colors for the three blocks
        block_colors = ['red', 'green', 'blue']
        block_color_values = [utils.COLORS[color] for color in block_colors]

        # Define the size of the blocks
        block_size = (0.04, 0.04, 0.04)  # x, y, z dimensions

        # Add assembly zone
        zone_size = (0.15, 0.15, 0)  # x, y dimensions (z is not relevant as it's a zone)
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Add blocks and store their IDs and initial poses
        block_urdf = 'stacking/block.urdf'
        blocks = []
        initial_poses = []
        for i, color in enumerate(block_color_values):
            block_pose = self.get_random_pose(env, block_size)
            block_id = env.add_object(block_urdf, block_pose, color=color)
            blocks.append(block_id)
            initial_poses.append(block_pose)

        # Define the target poses for the blocks to form a triangle within the assembly zone
        # The target poses are offsets from the center of the zone
        offsets = [(-0.02, -0.02, 0.02), (0.02, -0.02, 0.02), (0, 0.02, 0.02)]
        targ_poses = [utils.apply(zone_pose, offset) for offset in offsets]

        # Add goals for each block
        for i, block_id in enumerate(blocks):
            language_goal = self.lang_template.format(color=block_colors[i])
            # Each block has a target pose and should be placed to form the triangle
            self.add_goal(objs=[block_id], 
                          matches=np.ones((1, 1)), 
                          targ_poses=[targ_poses[i]], 
                          replace=False, 
                          rotations=True, 
                          metric='pose', 
                          params=None, 
                          step_max_reward=1/3,  # Each block placement is 1/3 of the task
                          language_goal=language_goal)