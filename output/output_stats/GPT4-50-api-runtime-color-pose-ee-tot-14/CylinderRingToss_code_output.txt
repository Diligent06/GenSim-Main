import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderRingToss(Task):
    """Place a set of five different colored cylinders as targets on a table and toss a set of five correspondingly colored rings over each cylinder."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to toss 5 rings, so we set max_steps to twice the number of tosses
        self.lang_template = "toss the {color} ring over the {color} cylinder"
        self.task_completed_desc = "all rings have been tossed over the cylinders."
        self.ee = Suction  # We need to move rings in the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and rings
        n_objects = 5

        # Define colors for the cylinders and rings
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [utils.COLORS[color] for color in colors]

        # Add cylinders to the environment
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i in range(n_objects):
            # Define the size of the cylinder
            size = (0.05, 0.05, 0.15)  # (radius, radius, height)
            # Get a random pose for the cylinder within the workspace bounds
            pose = self.get_random_pose(env, size)
            # Replace the template URDF with the actual size and color
            replace = {'COLOR': color_names[i], 'SIZE': size}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, pose, 'fixed')
            cylinders.append((cylinder_id, pose))

        # Add rings to the environment
        rings = []
        ring_template = 'ring/ring-template.urdf'
        for i in range(n_objects):
            # Define the size of the ring
            size = (0.07, 0.07, 0.02)  # (outer radius, outer radius, thickness)
            # Get a random pose for the ring within the workspace bounds
            pose = self.get_random_pose(env, size)
            # Replace the template URDF with the actual size and color
            replace = {'COLOR': color_names[i], 'SIZE': size}
            ring_urdf = self.fill_template(ring_template, replace)
            # Add the ring to the environment
            ring_id = env.add_object(ring_urdf, pose)
            rings.append(ring_id)

        # Define the goals for each ring to be tossed over the corresponding cylinder
        for i in range(n_objects):
            cylinder_id, cylinder_pose = cylinders[i]
            ring_id = rings[i]
            # The target pose for the ring is above the cylinder with the same color
            targ_pose = (cylinder_pose[0], (0, 0, 0, 1))  # We don't need to specify orientation for the ring
            # Define the language goal
            language_goal = self.lang_template.format(color=colors[i])
            # Add the goal to the task
            self.add_goal(objs=[ring_id], matches=np.int32([[1]]), targ_poses=[targ_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1,
                          language_goal=language_goal)