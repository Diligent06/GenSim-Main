import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BallPyramidPrecisionPlacement(Task):
    """Arrange five differently colored balls into a pyramid formation atop a stand."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call self.add_goal 5 times, so set max_steps to twice that number
        self.lang_template = "place the {color} ball on the {position} position on the stand"
        self.task_completed_desc = "done placing all balls in a pyramid formation."
        self.ee = Suction  # Use Suction end-effector to move balls on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the colors for the balls
        ball_colors = ['red', 'green', 'blue', 'yellow', 'purple']
        ball_color_values = [utils.COLORS[color] for color in ball_colors]

        # Add the stand
        stand_size = (0.15, 0.15, 0.02)  # Size of the stand
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Define the size for the balls
        ball_size = (0.04, 0.04, 0.04)  # Size of the balls

        # Add balls and set their initial random poses
        ball_template = 'ball/ball-template.urdf'
        balls = []
        for i, color in enumerate(ball_colors):
            ball_pose = self.get_random_pose(env, ball_size)
            replace = {'COLOR': ball_color_values[i]}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append(ball_id)

        # Define the target positions for the balls on the stand
        # The positions are offsets from the stand's pose
        target_offsets = [
            (0, -0.025, 0.06),  # Bottom left
            (0, 0.025, 0.06),   # Bottom right
            (0, 0, 0.06),        # Bottom middle
            (-0.025, 0, 0.1),    # Middle left
            (0.025, 0, 0.1)      # Middle right
        ]

        # Create target poses for the balls
        target_poses = [utils.apply(stand_pose, offset) for offset in target_offsets]

        # Add goals for each ball
        for i, ball_id in enumerate(balls):
            # Define the language goal for placing the ball
            position = "bottom" if i < 3 else "middle"
            language_goal = self.lang_template.format(color=ball_colors[i], position=position)

            # Add the goal for the current ball
            self.add_goal(
                objs=[ball_id],
                matches=np.ones((1, 1)),  # Each ball has a unique target position
                targ_poses=[target_poses[i]],  # Target pose for the current ball
                replace=False,  # Balls must match to a unique target
                rotations=False,  # Rotation is not considered for balls
                metric='pose',  # We use pose metric since we need precise placement
                params=None,  # No additional parameters needed
                step_max_reward=1,  # Full reward for placing each ball correctly
                language_goal=language_goal
            )