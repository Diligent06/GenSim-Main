import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderPrecisionStacking(Task):
    """Stack five different colored cylinders on top of each other in a specific color order on a marked zone on the tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to stack 5 cylinders, so we set max_steps to twice the number of cylinders
        self.ee = Suction  # We use Suction end-effector to lift cylinders along the Z axis

        # Define the language template and task completion description
        self.lang_template = "stack the {color} cylinder on top of the {base_color} one"
        self.task_completed_desc = "done stacking cylinders."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the color order for the cylinders
        color_order = ['red', 'green', 'blue', 'yellow', 'purple']
        n_cylinders = len(color_order)

        # Define the size of the cylinders
        cylinder_size = (0.05, 0.05, 0.1)  # (radius, radius, height)

        # Add the zone where the cylinders will be stacked
        zone_size = (0.15, 0.15, 0)  # (x_size, y_size, z_size)
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Add cylinders
        cylinders = []
        template = 'cylinder/cylinder-template.urdf'
        for i, color_name in enumerate(color_order):
            # Get the color RGB values
            color = utils.COLORS[color_name]

            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)

            # IMPORTANT: REPLACE THE TEMPLATE URDF
            replace = {'COLOR': color}
            urdf = self.fill_template(template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append(cylinder_id)

        # Add goals for each cylinder to be stacked
        for i in range(n_cylinders):
            # The base color is the color of the cylinder below the current one
            base_color = 'the zone' if i == 0 else color_order[i - 1]

            # Define the target pose for the cylinder
            # The x, y coordinates are the same as the zone, and the z coordinate is adjusted based on the cylinder index
            target_pose = (zone_pose[0], zone_pose[1][:3] + np.array([0, 0, cylinder_size[2] * i]))

            # Define the language goal for the current step
            language_goal = self.lang_template.format(color=color_order[i], base_color=base_color)

            # Add the goal for the current cylinder
            self.add_goal(objs=[cylinders[i]], matches=np.int32([[1]]), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / n_cylinders,
                          language_goal=language_goal)

# Note: The code assumes that the cylinder template URDF can be filled with the color parameter.
# The stacking order is determined by the color_order list, and each cylinder is placed on top of the previous one.