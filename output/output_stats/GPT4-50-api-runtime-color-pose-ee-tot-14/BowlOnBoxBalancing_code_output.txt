import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlOnBoxBalancing(Task):
    """Stack one bowl of a specified color on top of a randomly sized box without the bowl toppling over."""

    def __init__(self):
        super().__init__()
        self.max_steps = 2  # One step to pick and place the bowl, and one buffer step
        self.lang_template = "place the {color} bowl on top of the box"
        self.task_completed_desc = "done stacking the bowl on the box."
        self.ee = Suction  # Using Suction end-effector to lift the bowl in Z axis
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the color of the bowl (can be changed to any color from the available colors)
        bowl_color_name = 'red'
        bowl_color = utils.COLORS[bowl_color_name]

        # Define the size of the bowl (fixed size)
        bowl_size = (0.12, 0.12, 0.06)  # x, y, z dimensions

        # Add the bowl with the specified color
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_pose = self.get_random_pose(env, bowl_size)
        bowl_id = env.add_object(bowl_urdf, bowl_pose, color=bowl_color)

        # Define the size of the box (random size within specified bounds)
        box_size = self.get_random_size(0.15, 0.25, 0.15, 0.25, 0.05, 0.15)  # x, y, z dimensions

        # Add the box with a random brown color
        box_template = 'box/box-template.urdf'
        box_pose = self.get_random_pose(env, box_size)
        box_color = self.color_random_brown()
        replace = {'DIM': box_size, 'HALF': (box_size[0] / 2, box_size[1] / 2, box_size[2] / 2)}
        box_urdf = self.fill_template(box_template, replace)
        env.add_object(box_urdf, box_pose, 'fixed', color=box_color)

        # Define the target pose for the bowl, which is on top of the box
        target_pose = (box_pose[0], (0, 0, 0, 1))  # Use the box's position and no rotation for the bowl

        # Define the language goal
        language_goal = self.lang_template.format(color=bowl_color_name)

        # Add the goal for the task
        self.add_goal(objs=[bowl_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=False,
                      rotations=False, metric='pose', params=None, step_max_reward=1, language_goal=language_goal)

# Example instantiation of the task
# env = ... (the environment should be provided by the simulation framework)
# task = BowlOnBoxBalancing()
# task.reset(env)