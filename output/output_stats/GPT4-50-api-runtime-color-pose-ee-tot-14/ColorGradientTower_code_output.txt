import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorGradientTower(Task):
    """Stack five uniquely colored cylinders in a single vertical tower in the order of a predefined color gradient."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to stack 5 cylinders, so 10 steps should be sufficient
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.lang_template = "stack the {color} cylinder on the tower"
        self.task_completed_desc = "done stacking the color-gradient tower."

    def reset(self, env):
        super().reset(env)

        # Define the color gradient order for the cylinders
        color_gradient = ['red', 'orange', 'yellow', 'green', 'blue']
        color_names = ['red', 'orange', 'yellow', 'green', 'blue']

        # Add the zone where the tower will be built
        zone_size = (0.07, 0.07, 0)  # Size of the zone
        zone_pose = self.get_random_pose(env, zone_size)  # Random pose for the zone
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')  # Add the zone to the environment

        # Add cylinders with colors from the gradient
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.02, 0.02, 0.08)  # Diameter and height for the cylinder
        cylinders = []
        for i, color_name in enumerate(color_gradient):
            # Generate a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)
            # Get the RGB values for the color
            color = utils.COLORS[color_name]
            # Fill the URDF template with the specific color and size
            replace = {'COLOR': color, 'SIZE': cylinder_size}
            urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append(cylinder_id)

            # Define the target pose for the cylinder in the stack
            # The x, y coordinates are the same as the zone, and z is incremented with each cylinder
            target_pose = (zone_pose[0], (0, 0, 0, 1))  # We don't need to specify orientation for cylinders
            # Increment the z-coordinate for the next cylinder in the stack
            zone_pose = (zone_pose[0], (zone_pose[1][0], zone_pose[1][1], zone_pose[1][2] + cylinder_size[2], zone_pose[1][3]))

            # Define the language goal for this step
            language_goal = self.lang_template.format(color=color_names[i])
            # Add the goal for this cylinder
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/5, language_goal=language_goal)

        # The task is set up with all cylinders and the zone added to the environment
        # and goals defined for stacking the cylinders in the correct order.