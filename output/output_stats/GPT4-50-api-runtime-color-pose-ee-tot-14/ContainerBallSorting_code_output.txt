import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ContainerBallSorting(Task):
    """Sort a set of five differently colored balls into individual containers based on their color."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to sort 5 balls, so 10 steps should be sufficient.
        self.ee = Suction  # Suction is needed to pick up the balls.
        self.lang_template = "put the {color} ball in the {color} container"
        self.task_completed_desc = "done sorting all the balls into containers."

    def reset(self, env):
        super().reset(env)

        # Define the number of balls and containers
        n_balls = 5
        n_containers = 5

        # Define the size of the balls and containers
        ball_size = (0.04, 0.04, 0.04)  # Diameter of the ball
        container_size = (0.1, 0.1, 0.05)  # Size of the container

        # Define available colors for the balls and containers
        colors = ['red', 'green', 'blue', 'yellow', 'purple']

        # Add containers to the environment
        containers = []
        container_template = 'container/container-template.urdf'
        for i in range(n_containers):
            # Get a random pose for the container
            container_pose = self.get_random_pose(env, container_size)
            # Fill the container URDF template with the size and color
            replace = {'DIM': container_size, 'HALF': (container_size[0] / 2, container_size[1] / 2, container_size[2] / 2),
                       'COLOR': utils.COLORS[colors[i]]}
            container_urdf = self.fill_template(container_template, replace)
            # Add the container to the environment and store its ID
            container_id = env.add_object(container_urdf, container_pose, 'fixed')
            containers.append((container_id, container_pose))

        # Add balls to the environment
        balls = []
        ball_template = 'ball/ball-template.urdf'
        for i in range(n_balls):
            # Get a random pose for the ball
            ball_pose = self.get_random_pose(env, ball_size)
            # Fill the ball URDF template with the size and color
            replace = {'SCALE': ball_size, 'COLOR': utils.COLORS[colors[i]]}
            ball_urdf = self.fill_template(ball_template, replace)
            # Add the ball to the environment and store its ID
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append((ball_id, ball_pose))

        # Define the task goals
        for i in range(n_balls):
            ball_id, _ = balls[i]
            _, container_pose = containers[i]
            # Define the language goal for the current ball
            language_goal = self.lang_template.format(color=colors[i])
            # Add the goal for the current ball to be in the matching container
            self.add_goal(objs=[ball_id], matches=np.int32([[1]]), targ_poses=[container_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_balls,
                          language_goal=language_goal)

# Note: The task assumes that the colors of the balls and containers match one-to-one in the same order.
# If the colors are shuffled, additional logic is needed to match the correct ball-container pairs.