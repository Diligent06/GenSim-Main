import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlTowerColorMatch(Task):
    """
    Stack a tower of five different-colored bowls by placing them onto a matching-color line on the table,
    with the largest bowl at the bottom and the smallest at the top.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call self.add_goal 5 times, so we set max_steps to twice that number
        self.lang_template = "place the {color} bowl on the {color} line"
        self.task_completed_desc = "done stacking the bowl tower."
        self.ee = Suction  # We need to move bowls on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors and sizes for the bowls
        bowl_colors = ['red', 'orange', 'yellow', 'green', 'blue']
        bowl_sizes = [(0.18, 0.18, 0.08), (0.15, 0.15, 0.07), (0.12, 0.12, 0.06),
                      (0.09, 0.09, 0.05), (0.06, 0.06, 0.04)]  # Largest to smallest

        # Add bowls to the environment
        bowls = []
        for i, size in enumerate(bowl_sizes):
            color = utils.COLORS[bowl_colors[i]]  # Get the RGB values for the bowl color
            bowl_pose = self.get_random_pose(env, size)  # Get a random pose for the bowl
            bowl_urdf = 'bowl/bowl.urdf'
            bowl_id = env.add_object(bowl_urdf, bowl_pose, color=color)  # Add the bowl to the environment
            bowls.append(bowl_id)

        # Add matching color lines to the environment
        line_template = 'line/single-green-line-template.urdf'
        for i, color in enumerate(bowl_colors):
            # Generate a random pose for the line
            line_pose = self.get_random_pose(env, bowl_sizes[i])
            # Replace the color in the template URDF with the matching bowl color
            replace = {'COLOR': utils.COLORS[color]}
            line_urdf = self.fill_template(line_template, replace)
            # Add the line to the environment
            env.add_object(line_urdf, line_pose, 'fixed')

            # Define the language goal for placing the bowl on the matching line
            language_goal = self.lang_template.format(color=color)
            # Add the goal for the task
            self.add_goal(objs=[bowls[i]], matches=np.ones((1, 1)), targ_poses=[line_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1,
                          language_goal=language_goal)

        # The task is set up with bowls and matching lines, and goals have been added for each bowl