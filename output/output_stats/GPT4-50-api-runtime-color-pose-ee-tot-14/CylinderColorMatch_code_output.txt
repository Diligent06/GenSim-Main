import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderColorMatch(Task):
    """Arrange a set of five differently colored cylinders on corresponding colored lines drawn on the tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call self.add_goal 5 times, so we set max_steps to twice that number.
        self.ee = Suction  # We use Suction because we need to move objects on the Z axis.
        self.lang_template = "place the {color} cylinder on the {color} line"
        self.task_completed_desc = "done arranging cylinders."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the colors available for the cylinders and lines.
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [f"{color} cylinder" for color in colors]

        # Add lines to the environment.
        line_template = 'line/single-green-line-template.urdf'
        line_poses = []
        for color in colors:
            # Generate a random pose for the line within the workspace bounds.
            line_size = (0.25, 0.02, 0.001)  # Size of the line (length, width, height).
            line_pose = self.get_random_pose(env, line_size)
            line_poses.append(line_pose)

            # Replace the color in the template URDF with the current color.
            replace = {'COLOR': utils.COLORS[color]}
            line_urdf = self.fill_template(line_template, replace)
            env.add_object(line_urdf, line_pose, 'fixed')

        # Add cylinders to the environment.
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.04, 0.04, 0.08)  # Size of the cylinder (radius, radius, height).
        cylinders = []
        for i, color in enumerate(colors):
            # Generate a random pose for the cylinder within the workspace bounds.
            cylinder_pose = self.get_random_pose(env, cylinder_size)

            # Replace the color in the template URDF with the current color.
            replace = {'COLOR': utils.COLORS[color]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Define the goal for each cylinder.
            language_goal = self.lang_template.format(color=color)
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[line_poses[i]], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / len(colors),
                          language_goal=language_goal)

        # The task is set up with cylinders and corresponding lines. The robot needs to match the colors and place them correctly.