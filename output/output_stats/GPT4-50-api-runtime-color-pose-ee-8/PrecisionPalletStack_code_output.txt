import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionPalletStack(Task):
    """Stack a pyramid of colored cylinders on the pallet, alternating colors for each of the three levels, with a specific sequence for colors on each level."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is twice that number
        self.lang_template = "stack the {color} cylinder on the {level} level"
        self.task_completed_desc = "done stacking the cylinder pyramid."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders in the order they should be stacked
        color_sequence = [
            ['red', 'green', 'blue'],  # Bottom level colors
            ['yellow', 'orange'],      # Middle level colors
            ['purple']                 # Top level color
        ]

        # Add pallet.
        pallet_size = (0.15, 0.15, 0.02)  # x, y, z dimensions for the pallet
        pallet_urdf = 'pallet/pallet.urdf'
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object(pallet_urdf, pallet_pose, category='fixed')

        # Add cylinders.
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.04, 0.04, 0.08)  # x, y, z dimensions for the cylinder
        cylinder_scale = [0.001, 0.001, 0.002]  # Scale for the cylinder model

        # Keep track of the cylinder objects and their target poses
        objs = []
        targs = []

        # Calculate the initial z-coordinate for each level of the pyramid
        z_levels = [0.04, 0.12, 0.20]  # Bottom, middle, top levels

        # Create cylinders for each level
        for level, colors in enumerate(color_sequence):
            for color_name in colors:
                # Generate the color for the cylinder
                color = utils.COLORS[color_name]

                # Get a random pose for the cylinder
                pose = self.get_random_pose(env, cylinder_size)

                # Fill in the cylinder URDF template
                replace = {'FNAME': ('cylinder/cylinder.obj',),
                           'SCALE': cylinder_scale,
                           'COLOR': color}
                urdf = self.fill_template(cylinder_template, replace)

                # Add the cylinder to the environment
                obj_id = env.add_object(urdf, pose)
                objs.append(obj_id)

                # Calculate the target pose for the cylinder on the pallet
                x_offset = (len(colors) - 1) * -0.04 + 0.04 * colors.index(color_name)
                y_offset = 0.04 * (2 - level)  # Adjust for the pyramid shape
                target_pose = utils.apply(pallet_pose, (x_offset, y_offset, z_levels[level]))
                targs.append((target_pose, pallet_pose[1]))  # Target pose with pallet orientation

                # Add the language goal for this cylinder
                language_goal = self.lang_template.format(color=color_name, level=['bottom', 'middle', 'top'][level])

                # Add the motion goal for this cylinder
                self.add_goal(objs=[obj_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                              rotations=True, metric='pose', params=None, step_max_reward=1 / len(objs),
                              language_goal=language_goal)

        # Set the goals for the task
        # Bottom level
        self.add_goal(objs=objs[:3], matches=np.ones((3, 3)), targ_poses=targs[:3], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1 / 3,
                      language_goal=self.lang_template.format(color='red, green, and blue', level='bottom'))
        # Middle level
        self.add_goal(objs=objs[3:5], matches=np.ones((2, 2)), targ_poses=targs[3:5], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1 / 3,
                      language_goal=self.lang_template.format(color='yellow and orange', level='middle'))
        # Top level
        self.add_goal(objs=objs[5:], matches=np.ones((1, 1)), targ_poses=targs[5:], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1 / 3,
                      language_goal=self.lang_template.format(color='purple', level='top'))