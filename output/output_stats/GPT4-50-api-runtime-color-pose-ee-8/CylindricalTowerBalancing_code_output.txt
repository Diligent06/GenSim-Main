import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylindricalTowerBalancing(Task):
    """Stack five differently colored cylinders on top of each other in a single vertical tower on the designated zone."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We have 5 goals, so max_steps is set to twice the number of goals
        self.ee = Suction  # Using Suction end-effector to move objects on the Z axis
        self.lang_template = "stack the {color} cylinder on top of the tower"
        self.task_completed_desc = "done stacking the cylindrical tower."

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [utils.COLORS[c] for c in colors]

        # Define the size of the cylinders (height, radius)
        # Heights are the same but radii vary to challenge stability
        sizes = [(0.08, 0.04), (0.08, 0.035), (0.08, 0.03), (0.08, 0.025), (0.08, 0.02)]

        # Add target zone
        zone_size = (0.1, 0.1, 0)  # Size of the zone where the tower will be built
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Add cylinders with varying sizes and colors
        cylinder_template = 'cylinder/cylinder-template.urdf'
        objects = []
        for i in range(5):
            size = sizes[i]
            replace = {'SIZE': size}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            pose = self.get_random_pose(env, size)
            obj_id = env.add_object(cylinder_urdf, pose, color=color_names[i])
            objects.append(obj_id)

        # Define the target poses for each cylinder, stacked on top of each other
        z_offset = 0.08  # Height of each cylinder
        targ_poses = []
        for i in range(5):
            # Target pose is directly above the previous cylinder (or zone for the first one)
            x, y, _ = zone_pose[0]
            z = z_offset * (i + 1)  # Increment z for each cylinder
            targ_poses.append([(x, y, z), (0, 0, 0, 1)])  # No rotation, cylinders are symmetrical

        # Add goals for each cylinder to be stacked
        for i in range(5):
            language_goal = self.lang_template.format(color=colors[i])
            self.add_goal(objs=[objects[i]], matches=np.ones((1, 1)), targ_poses=[targ_poses[i]], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/5,
                          language_goal=language_goal)

# Instantiate the task
task = CylindricalTowerBalancing()