import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ZoneCylinderStack(Task):
    """Arrange three differently colored cylinders into an upright, vertical stack in the center of the target zone."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is twice that number
        self.lang_template = "stack the {color} cylinder"
        self.task_completed_desc = "done stacking cylinders."
        self.ee = Suction  # Suction is needed to lift cylinders in Z axis
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define cylinder colors
        cylinder_colors = ['red', 'green', 'blue']
        color_names = ['red', 'green', 'blue']

        # Add target zone
        zone_size = (0.15, 0.15, 0)  # x, y, z dimensions for the zone size
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')

        # Add cylinders
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i, color_name in enumerate(color_names):
            # Define cylinder size and pose
            cylinder_size = (0.04, 0.04, 0.12)  # x, y, z dimensions for the cylinder size
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            color = utils.COLORS[cylinder_colors[i]]  # Get RGB values for the color

            # Replace placeholders in the URDF template
            replace = {'COLOR': color}

            # IMPORTANT: REPLACE THE TEMPLATE URDF
            urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(urdf, cylinder_pose)
            cylinders.append(cylinder_id)

        # Define the target poses for the cylinders in the stack
        # The cylinders should be stacked vertically in the center of the zone
        z_offset = 0.06  # Half the height of one cylinder to start at the base
        targ_poses = []
        for i in range(3):
            # Target pose is the center of the zone with increasing z for each cylinder
            targ_pose = (zone_pose[0], (0, 0, zone_pose[0][2] + z_offset + i * cylinder_size[2]))
            targ_poses.append(targ_pose)

        # Add goals for stacking cylinders
        for i in range(3):
            language_goal = self.lang_template.format(color=cylinder_colors[i])
            self.add_goal(objs=[cylinders[i]], matches=np.ones((1, 1)), targ_poses=[targ_poses[i]], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/3,
                          language_goal=language_goal)

# Instantiate the task
task = ZoneCylinderStack()