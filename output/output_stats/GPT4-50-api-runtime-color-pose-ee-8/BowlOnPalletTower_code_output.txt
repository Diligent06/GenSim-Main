import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlOnPalletTower(Task):
    """Stack three differently colored bowls upside down on a pallet, and then balance a single green block on top."""

    def __init__(self):
        super().__init__()
        self.max_steps = 8  # We will have 4 goals, so max_steps is twice that number
        self.lang_template = "put the {color} bowl on the {place}"
        self.task_completed_desc = "done stacking bowls and placing the block."
        self.ee = Suction  # Use Suction end-effector to move objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the colors for the bowls
        bowl_colors = ['red', 'blue', 'yellow']
        np.random.shuffle(bowl_colors)  # Shuffle to randomize the order for each episode

        # Add pallet
        pallet_size = (0.3, 0.3, 0.02)  # Size of the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)
        pallet_urdf = 'pallet/pallet.urdf'
        env.add_object(pallet_urdf, pallet_pose, 'fixed')

        # Add bowls
        bowl_size = (0.15, 0.15, 0.07)  # Size of the bowls
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_poses = []
        bowls = []
        for i, color in enumerate(bowl_colors):
            bowl_pose = self.get_random_pose(env, bowl_size)
            bowl_color = utils.COLORS[color]  # Get the RGB values for the color
            bowl_id = env.add_object(bowl_urdf, bowl_pose, color=bowl_color)
            bowl_poses.append(bowl_pose)
            bowls.append(bowl_id)

            # Add language goal for placing the bowl
            place = "pallet" if i == 0 else f"{bowl_colors[i-1]} bowl"
            lang_goal = self.lang_template.format(color=color, place=place)
            # The target pose is the pose of the pallet for the first bowl, or the pose of the previous bowl for others
            targ_pose = pallet_pose if i == 0 else bowl_poses[i-1]
            # Add motion goal for placing the bowl
            self.add_goal(objs=[bowl_id], matches=np.ones((1, 1)), targ_poses=[targ_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/4, language_goal=lang_goal)

        # Add green block
        block_size = (0.04, 0.04, 0.04)  # Size of the block
        block_urdf = 'stacking/block.urdf'
        block_pose = self.get_random_pose(env, block_size)
        block_color = utils.COLORS['green']  # Get the RGB values for green
        block_id = env.add_object(block_urdf, block_pose, color=block_color)

        # Add language goal for placing the block
        lang_goal = "place the green block on top of the yellow bowl"
        # The target pose is the pose of the last bowl with an adjusted z-coordinate
        targ_pose = (bowl_poses[-1][0], bowl_poses[-1][1], bowl_poses[-1][2] + bowl_size[2] + block_size[2])
        # Add motion goal for placing the block
        self.add_goal(objs=[block_id], matches=np.ones((1, 1)), targ_poses=[targ_pose], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1/4, language_goal=lang_goal)