import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorMatchedCylinderPlacement(Task):
    """Pick up three different colored cylinders and place each one into the corresponding colored zone."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 goals, so max_steps is set to twice the number of goals
        self.ee = Suction  # Using Suction end-effector as we need to move objects on the Z axis
        self.lang_template = "put the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done placing cylinders in color-matched zones."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders and zones
        cylinder_colors = ['red', 'green', 'blue']
        zone_colors = cylinder_colors.copy()  # Zones have the same colors as cylinders

        # Add cylinders with corresponding colors
        cylinders = []
        cylinder_size = (0.04, 0.04, 0.12)  # Diameter, Diameter, Height
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for color in cylinder_colors:
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)
            # Set the color for the cylinder
            color_rgb = utils.COLORS[color]
            # Replace the placeholders in the URDF template
            replace = {'COLOR': color_rgb}
            # Generate the URDF for the cylinder
            urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append(cylinder_id)

        # Add zones with corresponding colors
        zone_size = (0.15, 0.15, 0)  # Length, Width, (Height is not needed as it's a flat zone)
        zone_urdf = 'zone/zone.urdf'
        zone_poses = []
        for color in zone_colors:
            # Get a random pose for the zone
            zone_pose = self.get_random_pose(env, zone_size)
            # Set the color for the zone
            color_rgb = utils.COLORS[color]
            # Add the zone to the environment with the specified color
            env.add_object(zone_urdf, zone_pose, 'fixed', color=color_rgb)
            zone_poses.append(zone_pose)

        # Define goals for placing each cylinder in the matching color zone
        for i, color in enumerate(cylinder_colors):
            # Language goal for the current cylinder
            language_goal = self.lang_template.format(color=color)
            # Add the goal for the current cylinder
            self.add_goal(
                objs=[cylinders[i]],  # The current cylinder
                matches=np.int32([[1]]),  # Each cylinder matches one zone
                targ_poses=[zone_poses[i]],  # The target pose is the corresponding zone pose
                replace=False,  # Each cylinder has a unique target zone
                rotations=False,  # No need for rotation as cylinders are symmetrical along the z-axis
                metric='zone',  # We are placing in a zone
                params=[(zone_poses[i], zone_size)],  # Parameters for the zone
                step_max_reward=1,  # Full reward for completing this step
                language_goal=language_goal  # Language goal
            )