import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PalletJenga(Task):
    """Construct a Jenga-like tower on a pallet using six uniquely colored blocks."""

    def __init__(self):
        super().__init__()
        self.max_steps = 12  # We will have 6 goals, so max_steps is twice that number
        self.lang_template = "place the {color} block on the {position} position"
        self.task_completed_desc = "done constructing the Jenga tower."
        self.ee = Suction  # We need to move objects on the Z axis, so we use Suction
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the size of the pallet and blocks
        pallet_size = (0.3, 0.3, 0.02)  # x, y, z dimensions for the pallet
        block_size = (0.05, 0.15, 0.02)  # x, y, z dimensions for the blocks

        # Add pallet
        pallet_urdf = 'pallet/pallet.urdf'
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object(pallet_urdf, pallet_pose, 'fixed')

        # Define block colors
        block_colors = ['red', 'green', 'blue', 'orange', 'yellow', 'purple']
        color_rgb = [utils.COLORS[color] for color in block_colors]

        # Add blocks
        block_urdf = 'stacking/block.urdf'
        blocks = []
        for i, color in enumerate(block_colors):
            block_pose = self.get_random_pose(env, block_size)
            block_id = env.add_object(block_urdf, block_pose, color=color_rgb[i])
            blocks.append(block_id)

        # Define target poses for the blocks on the pallet
        # Alternating directions for each layer
        positions = ['bottom left', 'bottom center', 'bottom right',
                     'top left', 'top center', 'top right']
        offsets = [(-0.1, -0.1, 0.02), (0, -0.1, 0.02), (0.1, -0.1, 0.02),
                   (-0.1, 0, 0.04), (0, 0, 0.04), (0.1, 0, 0.04)]
        targ_poses = [(utils.apply(pallet_pose, offset), pallet_pose[1]) for offset in offsets]

        # Add goals for each block
        for i in range(len(blocks)):
            language_goal = self.lang_template.format(color=block_colors[i], position=positions[i])
            self.add_goal(objs=[blocks[i]], matches=np.ones((1, 1)), targ_poses=[targ_poses[i]],
                          replace=False, rotations=True, metric='pose', params=None,
                          step_max_reward=1 / len(blocks), language_goal=language_goal)

        # The task is to construct a Jenga-like tower on the pallet
        # Each block is placed in alternating directions in each layer
        # The tower must be stable and not topple over