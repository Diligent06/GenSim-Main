import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderColorMatch(Task):
    """Arrange a set of differently colored cylinders into corresponding colored zones on a pallet."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we have 5 cylinders to match, 2 steps per cylinder (pick & place)
        self.lang_template = "put the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done sorting cylinders by color."
        self.ee = Suction  # Use suction end-effector to pick up cylinders

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones
        n_cylinders = 5
        n_zones = n_cylinders  # One zone per cylinder

        # Define cylinder size
        cylinder_size = (0.05, 0.05, 0.15)  # (radius, radius, height)

        # Define colors for cylinders and corresponding zones
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        np.random.shuffle(colors)  # Shuffle colors to randomize task each reset

        # Add pallet
        pallet_size = (0.3, 0.3, 0.02)  # (x, y, z) dimensions
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Add cylinders and zones
        for i in range(n_cylinders):
            # Add cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_template = 'cylinder/cylinder-template.urdf'
            replace = {'COLOR': utils.COLORS[colors[i]]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

            # Add zone
            zone_size = (0.1, 0.1, 0)  # Zones are flat squares
            zone_pose = self.get_random_pose(env, zone_size)
            zone_template = 'zone/zone.urdf'
            replace = {'COLOR': utils.COLORS[colors[i]]}
            zone_urdf = self.fill_template(zone_template, replace)
            env.add_object(zone_urdf, zone_pose, 'fixed')

            # Define the language goal
            language_goal = self.lang_template.format(color=colors[i])

            # Add goal for each cylinder to be in the matching color zone
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[zone_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/n_cylinders,
                          language_goal=language_goal)

        # The task is set up with cylinders and corresponding zones added to the environment
        # and goals defined for each cylinder to be placed in the matching color zone.