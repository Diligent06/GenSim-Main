import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class EllBridgeConstruction(Task):
    """Construct a stable bridge using ell-shaped objects over a gap marked by two parallel lines, which must support a small ball rolled across."""

    def __init__(self):
        super().__init__()
        self.max_steps = 4  # We expect to add two goals, so max_steps is twice that
        self.lang_template = "build a bridge using the {color} ell-shaped blocks over the gap"
        self.task_completed_desc = "done constructing the bridge."
        self.ee = Suction  # Suction is needed to lift objects in the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the number of ell-shaped objects needed to construct the bridge
        n_ell_objects = 2

        # Define the color of the ell-shaped objects
        ell_color = utils.COLORS['blue']

        # Define the size of the ell-shaped objects
        ell_size = (0.1, 0.2, 0.02)  # (x, y, z) dimensions

        # Define the URDF for the ell-shaped objects
        ell_urdf = 'insertion/ell.urdf'

        # Add ell-shaped objects to the environment
        ell_objects = []
        for _ in range(n_ell_objects):
            ell_pose = self.get_random_pose(env, ell_size)
            ell_id = env.add_object(ell_urdf, ell_pose, color=ell_color)
            ell_objects.append(ell_id)

        # Add parallel lines to mark the gap
        line_urdf_template = 'line/single-green-line-template.urdf'
        line_size = (0.01, 0.3, 0.001)  # (x, y, z) dimensions
        line_color = utils.COLORS['green']
        line_poses = []
        for i in range(2):
            # Position the lines parallel to each other with a fixed gap in between
            x_pos = 0.5 + (i * 0.2) - 0.1  # Offset each line to create a gap
            y_pos = 0
            z_pos = 0.001  # Slightly above the table to be visible
            line_pose = ((x_pos, y_pos, z_pos), (0, 0, 0, 1))
            replace = {'COLOR': line_color}
            line_urdf = self.fill_template(line_urdf_template, replace)
            env.add_object(line_urdf, line_pose, 'fixed')
            line_poses.append(line_pose)

        # Add a small ball that should be supported by the constructed bridge
        ball_urdf_template = 'ball/ball-template.urdf'
        ball_size = (0.02, 0.02, 0.02)  # (x, y, z) dimensions
        ball_color = utils.COLORS['red']
        ball_pose = self.get_random_pose(env, ball_size)
        replace = {'COLOR': ball_color}
        ball_urdf = self.fill_template(ball_urdf_template, replace)
        env.add_object(ball_urdf, ball_pose)

        # Define the target poses for the ell-shaped objects to form the bridge
        # The target poses should be above the gap between the lines
        targ_poses = []
        for i in range(n_ell_objects):
            x_pos = 0.5  # Centered between the lines
            y_pos = 0
            z_pos = 0.02 * (i + 1)  # Stacked on top of each other
            targ_pose = ((x_pos, y_pos, z_pos), (0, 0, 0, 1))
            targ_poses.append(targ_pose)

        # Define the language goal
        language_goal = self.lang_template.format(color="blue")

        # Add the goal for the task
        self.add_goal(objs=ell_objects, matches=np.ones((n_ell_objects, n_ell_objects)), targ_poses=targ_poses, replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1, language_goal=language_goal)

# Note: The task assumes that the ell-shaped objects are designed in a way that when placed correctly, they will form a stable bridge.
# The ball is added as a test object to ensure the bridge's stability, but it is not part of the task goals.