import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlCylinderSorting(Task):
    """
    Arrange five differently colored cylinders into five corresponding colored bowls,
    ensuring each cylinder is placed upright inside the matching bowl.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call self.add_goal 5 times, so we set this to twice that number
        self.ee = Suction  # We use Suction because we need to move objects on the Z axis
        self.lang_template = "put the {color} cylinder in the {color} bowl"
        self.task_completed_desc = "done sorting cylinders into bowls."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of bowls and cylinders
        n_objects = 5

        # Define colors for the bowls and cylinders
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [f"{color} cylinder" for color in colors]

        # Add bowls to the environment
        bowl_size = (0.15, 0.15, 0.06)  # Size of the bowl (x, y, z)
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_poses = []
        for color in colors:
            bowl_pose = self.get_random_pose(env, bowl_size)
            bowl_color = utils.COLORS[color]  # Get the RGB values for the bowl color
            env.add_object(bowl_urdf, bowl_pose, color=bowl_color, category='container')
            bowl_poses.append(bowl_pose)

        # Add cylinders to the environment
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.05, 0.05, 0.15)  # Size of the cylinder (x, y, z)
        cylinders = []
        for color in colors:
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_color = utils.COLORS[color]  # Get the RGB values for the cylinder color
            replace = {'COLOR': cylinder_color}
            # Replace the template URDF with the specific color for the cylinder
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

        # Define goals for each cylinder to be in the corresponding bowl
        for i, color in enumerate(colors):
            language_goal = self.lang_template.format(color=color)
            # The target pose is the pose of the corresponding bowl with the same color
            target_pose = bowl_poses[i]
            # The cylinder must be placed upright, so we use the same orientation as its initial pose
            target_orientation = env.get_pose(cylinders[i])[1]
            self.add_goal(objs=[cylinders[i]], matches=np.int32([[1]]),
                          targ_poses=[(target_pose[0], target_orientation)], replace=True,
                          rotations=False, metric='pose', params=None, step_max_reward=1,
                          language_goal=language_goal)

        # The task is set up with 5 cylinders and 5 corresponding bowls with matching colors