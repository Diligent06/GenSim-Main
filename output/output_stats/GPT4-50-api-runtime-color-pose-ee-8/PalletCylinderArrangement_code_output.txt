import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PalletCylinderArrangement(Task):
    """
    Arrange a sequence of differently colored cylinders in a specific pattern onto designated slots on a pallet,
    ensuring each cylinder stands upright and matches its designated slot by color.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we have 5 cylinders to arrange, 2 steps per cylinder (pick and place)
        self.ee = Suction  # Suction end-effector is needed to pick up cylinders
        self.lang_template = "place the {color} cylinder in the matching slot on the pallet"
        self.task_completed_desc = "done arranging the cylinders."

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and pallet slots
        n_cylinders = 5

        # Define cylinder size
        cylinder_size = (0.05, 0.05, 0.15)  # (radius, radius, height)

        # Define colors for the cylinders
        cylinder_colors = ['red', 'blue', 'green', 'yellow', 'purple']
        np.random.shuffle(cylinder_colors)  # Shuffle colors to randomize the order

        # Add pallet
        pallet_size = (0.3, 0.3, 0.02)  # (length, width, height)
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Add cylinders and their target slots on the pallet
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i in range(n_cylinders):
            # Add cylinder
            color_name = cylinder_colors[i]
            color_rgb = utils.COLORS[color_name]
            pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': color_rgb}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, pose)

            # Define the target slot pose on the pallet for the current cylinder
            # Assuming the pallet is divided into a grid with enough slots for all cylinders
            slot_position = (pallet_pose[0][0] + (i % 3 - 1) * 0.1, pallet_pose[0][1] + (i // 3 - 1) * 0.1, pallet_pose[0][2] + 0.15)
            slot_orientation = pallet_pose[1]  # Use the same orientation as the pallet
            target_slot_pose = (slot_position, slot_orientation)

            # Add goal for placing the cylinder in the correct slot
            language_goal = self.lang_template.format(color=color_name)
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_slot_pose], replace=True,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / n_cylinders,
                          language_goal=language_goal)

        # Set the primitive to be used for this task
        self.primitive = primitives.pick_place