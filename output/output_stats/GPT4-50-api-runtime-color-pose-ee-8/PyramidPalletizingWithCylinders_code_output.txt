import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PyramidPalletizingWithCylinders(Task):
    """Build a three-tiered pyramid using nine multi-colored cylinders on a pallet."""

    def __init__(self):
        super().__init__()
        self.max_steps = 18  # We expect to call self.add_goal 9 times, so max_steps is twice that
        self.lang_template = "build a {tier} tier of the pyramid with {color} cylinders"
        self.task_completed_desc = "done building the pyramid."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction gripper
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Add pallet.
        pallet_size = (0.3, 0.3, 0.02)  # Size of the pallet
        pallet_urdf = 'pallet/pallet.urdf'
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object(pallet_urdf, pallet_pose, category='fixed')

        # Define cylinder colors for each tier.
        tier_colors = [
            ['red', 'green', 'blue'],  # Bottom tier colors
            ['yellow', 'orange'],      # Middle tier colors
            ['purple']                 # Top tier color
        ]

        # Add cylinders.
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.04, 0.04, 0.08)  # Size of the cylinders
        cylinder_scale = [0.001, 0.001, 0.002]  # Scale for the cylinder model

        # Store cylinder IDs and target poses for each tier.
        cylinder_ids = []
        target_poses = []

        # Calculate initial z-coordinate for each tier based on cylinder height and pallet height.
        z_coords = [pallet_size[2] + cylinder_size[2]/2,  # Bottom tier
                    pallet_size[2] + 3*cylinder_size[2]/2,  # Middle tier
                    pallet_size[2] + 5*cylinder_size[2]/2]  # Top tier

        # Create cylinders for each tier.
        for tier_idx, colors in enumerate(tier_colors):
            for color_name in colors:
                # Generate random pose for the cylinder.
                pose = self.get_random_pose(env, cylinder_size)
                # Adjust the z-coordinate to the current tier height.
                pose = (pose[0], (pose[1][0], pose[1][1], z_coords[tier_idx], pose[1][3]))

                # Set the color of the cylinder.
                color = utils.COLORS[color_name]

                # Fill in the URDF template with the specific cylinder properties.
                replace = {'FNAME': ('cylinder.obj',), 'SCALE': cylinder_scale, 'COLOR': color}
                urdf = self.fill_template(cylinder_template, replace)

                # Add the cylinder to the environment.
                cylinder_id = env.add_object(urdf, pose)
                cylinder_ids.append(cylinder_id)

                # Define the target pose for the cylinder on the pallet.
                # The x and y coordinates are offset based on the cylinder's position in the tier.
                x_offset = (len(colors) - 1) * -cylinder_size[0] + 2 * cylinder_size[0] * colors.index(color_name)
                y_offset = tier_idx * -cylinder_size[1]
                target_pose = ((pallet_pose[0][0] + x_offset, pallet_pose[0][1] + y_offset, z_coords[tier_idx]), pallet_pose[1])

                # Add the target pose to the list.
                target_poses.append(target_pose)

                # Add a language goal for each cylinder.
                language_goal = self.lang_template.format(tier="bottom" if tier_idx == 0 else "middle" if tier_idx == 1 else "top",
                                                          color=color_name)
                # Add the goal for the current cylinder.
                self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                              rotations=True, metric='pose', params=None, step_max_reward=1/9,
                              language_goal=language_goal)

        # Ensure that the cylinders are placed in the correct order by setting dependencies.
        # The cylinders in each tier depend on the cylinders in the tier below it.
        for i in range(len(cylinder_ids)):
            if i >= len(tier_colors[0]):
                self.goals[i]['depends_on'] = cylinder_ids[:i]

# Instantiate the task
task = PyramidPalletizingWithCylinders()