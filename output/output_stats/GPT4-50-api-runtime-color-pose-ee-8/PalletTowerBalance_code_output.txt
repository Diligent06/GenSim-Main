import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PalletTowerBalance(Task):
    """Stack a cylinder, a ball, and a block on top of each other in the center of a pallet, ensuring the tower remains balanced."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 objects to stack, so 6 steps should be sufficient
        self.lang_template = "stack the {object} on the {location}"
        self.task_completed_desc = "done stacking the tower."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction gripper

    def reset(self, env):
        super().reset(env)

        # Define the colors for the objects
        cylinder_color = utils.COLORS['silver']  # Silver cylinder
        ball_color = utils.COLORS['gold']  # Gold ball
        block_color = utils.COLORS['brown']  # Brown block

        # Define the sizes for the objects
        cylinder_size = (0.04, 0.04, 0.12)  # Diameter, Diameter, Height
        ball_size = (0.04, 0.04, 0.04)  # Diameter, Diameter, Diameter
        block_size = (0.04, 0.04, 0.04)  # Length, Width, Height

        # Add pallet
        pallet_urdf = 'pallet/pallet.urdf'
        pallet_size = (0.3, 0.3, 0.1)  # Length, Width, Height
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object(pallet_urdf, pallet_pose, 'fixed')

        # Add cylinder
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_pose = self.get_random_pose(env, cylinder_size)
        replace_cylinder = {'COLOR': cylinder_color}
        cylinder_urdf = self.fill_template(cylinder_template, replace_cylinder)
        cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

        # Add ball
        ball_template = 'ball/ball-template.urdf'
        ball_pose = self.get_random_pose(env, ball_size)
        replace_ball = {'COLOR': ball_color}
        ball_urdf = self.fill_template(ball_template, replace_ball)
        ball_id = env.add_object(ball_urdf, ball_pose)

        # Add block
        block_urdf = 'stacking/block.urdf'
        block_pose = self.get_random_pose(env, block_size)
        block_id = env.add_object(block_urdf, block_pose, color=block_color)

        # Define target poses for stacking on the pallet
        # The target poses are above the center of the pallet, with increasing z-coordinates
        pallet_center = pallet_pose[0]
        z_offset = pallet_size[2]  # Start stacking at the height of the pallet
        cylinder_target_pose = [(pallet_center[0], pallet_center[1], z_offset + cylinder_size[2]/2), (0, 0, 0, 1)]
        ball_target_pose = [(pallet_center[0], pallet_center[1], z_offset + cylinder_size[2] + ball_size[2]/2), (0, 0, 0, 1)]
        block_target_pose = [(pallet_center[0], pallet_center[1], z_offset + cylinder_size[2] + ball_size[2] + block_size[2]/2), (0, 0, 0, 1)]

        # Add goals for stacking each object
        # Cylinder on the pallet
        self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[cylinder_target_pose], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3,
                      language_goal=self.lang_template.format(object='cylinder', location='center of the pallet'))

        # Ball on the cylinder
        self.add_goal(objs=[ball_id], matches=np.ones((1, 1)), targ_poses=[ball_target_pose], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3,
                      language_goal=self.lang_template.format(object='ball', location='top of the cylinder'))

        # Block on the ball
        self.add_goal(objs=[block_id], matches=np.ones((1, 1)), targ_poses=[block_target_pose], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3,
                      language_goal=self.lang_template.format(object='block', location='top of the ball'))