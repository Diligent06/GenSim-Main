import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlCylinderStack(Task):
    """Stack a specific number of colored cylinders inside a bowl without any cylinder falling outside of the bowl's rim."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we want to stack 5 cylinders, 2 steps per cylinder (pick and place)
        self.lang_template = "stack {num} {color} cylinders in the {container_color} bowl"
        self.task_completed_desc = "done stacking cylinders."
        self.ee = Suction  # Suction end-effector is needed to pick and place cylinders vertically

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders to stack and their size
        n_cylinders = 5
        cylinder_size = (0.04, 0.04, 0.08)  # (radius, radius, height)

        # Define the bowl size and add the bowl to the environment
        bowl_size = (0.15, 0.15, 0.06)  # (radius, radius, height)
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_pose = self.get_random_pose(env, bowl_size)
        env.add_object(bowl_urdf, bowl_pose, 'fixed')

        # Generate the color for the bowl and cylinders
        bowl_color = utils.COLORS['brown']  # Brown color for the bowl
        cylinder_color = utils.COLORS['red']  # Red color for the cylinders

        # Add cylinders to the environment
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for _ in range(n_cylinders):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # Fill in the cylinder URDF template with size and color
            replace = {'SIZE': cylinder_size, 'COLOR': cylinder_color}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

        # Define the language goal
        language_goal = self.lang_template.format(num=n_cylinders, color="red", container_color="brown")

        # Add the goal for the task
        # The target pose for each cylinder is inside the bowl, with the same orientation as the bowl
        target_poses = [(bowl_pose[0], bowl_pose[1])] * n_cylinders
        self.add_goal(objs=cylinders, matches=np.ones((n_cylinders, 1)), targ_poses=target_poses, replace=False,
                      rotations=False, metric='pose', params=None, step_max_reward=1, language_goal=language_goal)

        # The task is to stack all cylinders within the bowl, so the reward is 1 when all are correctly placed