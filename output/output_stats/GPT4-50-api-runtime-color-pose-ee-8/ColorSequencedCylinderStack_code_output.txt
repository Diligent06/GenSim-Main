import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorSequencedCylinderStack(Task):
    """Stack five differently colored cylinders in a vertical sequence on top of a single stand."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We have 5 goals, so max_steps is set to twice the number of goals
        self.lang_template = "stack the {color} cylinder"
        self.task_completed_desc = "done stacking the cylinders."
        self.ee = Suction  # Use Suction end-effector to move objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the color sequence for the cylinders from bottom to top
        color_sequence = ['red', 'orange', 'yellow', 'green', 'blue']
        color_names = ['red', 'orange', 'yellow', 'green', 'blue']

        # Add stand.
        stand_size = (0.05, 0.05, 0.005)  # Size of the stand
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Add cylinders.
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.04, 0.04, 0.08)  # Size of the cylinders (diameter, diameter, height)
        cylinder_poses = []
        cylinder_ids = []

        # Initial z-coordinate for the first cylinder to be placed on the stand
        z = stand_pose[0][2] + stand_size[2] + cylinder_size[2] / 2

        for i, color_name in enumerate(color_sequence):
            # Get the color RGB values
            color = utils.COLORS[color_name]

            # Generate a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_poses.append(cylinder_pose)

            # Fill the URDF template with the cylinder properties
            replace = {'COLOR': color, 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinder_ids.append(cylinder_id)

            # Define the target pose for the cylinder on the stand
            target_pose = ((stand_pose[0][0], stand_pose[0][1], z), stand_pose[1])

            # Add the goal for the current cylinder
            language_goal = self.lang_template.format(color=color_names[i])
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1 / len(color_sequence),
                          language_goal=language_goal)

            # Update the z-coordinate for the next cylinder
            z += cylinder_size[2]

# Instantiate the task
task = ColorSequencedCylinderStack()