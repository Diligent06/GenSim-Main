import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlPyramidConstruction(Task):
    """Stack three differently colored bowls into a pyramid shape."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 goals, so max_steps is set to twice that number
        self.lang_template = "stack the {color} bowl on top of the {base_color} bowl"
        self.task_completed_desc = "done constructing the bowl pyramid."
        self.ee = Suction  # Use suction end-effector to pick and place bowls in 3D space
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define bowl sizes (large, medium, small) and colors
        bowl_sizes = [(0.18, 0.18, 0.08), (0.15, 0.15, 0.06), (0.12, 0.12, 0.04)]
        bowl_colors = ['blue', 'green', 'red']
        bowl_urdf = 'bowl/bowl.urdf'

        # Shuffle colors to avoid always having the same color order
        np.random.shuffle(bowl_colors)

        # Add bowls to the environment with random initial poses
        bowls = []
        for size, color in zip(bowl_sizes, bowl_colors):
            pose = self.get_random_pose(env, size)
            color_rgb = utils.COLORS[color]
            bowl_id = env.add_object(bowl_urdf, pose, color=color_rgb)
            bowls.append((bowl_id, pose))

        # Define target poses for the bowls to form a pyramid
        # The largest bowl will be at the bottom, so its target pose is its initial pose
        # The medium and small bowls will be stacked on top, so we adjust their z-coordinates
        targ_poses = [
            bowls[0][1],  # Base bowl (largest)
            (bowls[1][1][0], (bowls[1][1][1][0], bowls[1][1][1][1], bowls[0][1][1][2] + bowl_sizes[0][2])),  # Middle bowl
            (bowls[2][1][0], (bowls[2][1][1][0], bowls[2][1][1][1], bowls[1][1][1][2] + bowl_sizes[1][2]))   # Top bowl
        ]

        # Add goals for each bowl to be placed in the correct order
        for i in range(3):
            base_color = 'the table' if i == 0 else bowl_colors[i-1]
            language_goal = self.lang_template.format(color=bowl_colors[i], base_color=base_color)
            self.add_goal(
                objs=[bowls[i][0]],  # Current bowl
                matches=np.ones((1, 1)),  # Each bowl has a unique target pose
                targ_poses=[targ_poses[i]],  # Target pose for the current bowl
                replace=False,  # Bowls cannot be replaced by others
                rotations=True,  # Allow rotation to align bowls correctly
                metric='pose',  # Use pose metric for precise placement
                params=None,  # No additional parameters needed
                step_max_reward=1 / 3,  # Equal reward for each step
                language_goal=language_goal  # Language instruction for the current step
            )