import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionPalletStacking(Task):
    """Arrange a pattern of colored cylinders on a pallet, ensuring the pattern matches a predefined sequence of colors and that the cylinders form a stable single-layer grid without toppling."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we have 5 cylinders to place, 2 steps per cylinder
        self.lang_template = "place the {color} cylinder on the pallet at position {position}"
        self.task_completed_desc = "completed precision pallet stacking."
        self.ee = Suction  # Suction is needed to lift the cylinders
        self.primitive = None  # No specific primitive required as we are using Suction gripper

    def reset(self, env):
        super().reset(env)

        # Define the color sequence for the cylinders
        color_sequence = ['red', 'blue', 'green', 'yellow', 'purple']
        # Define the target positions on the pallet for each cylinder
        target_positions = [(0.25, -0.25, 0.1), (0.5, -0.25, 0.1), (0.75, -0.25, 0.1),
                            (0.375, 0, 0.1), (0.625, 0, 0.1)]

        # Add pallet to the environment
        pallet_size = (0.3, 0.3, 0.05)  # Size of the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)  # Random pose for the pallet
        pallet_urdf = 'pallet/pallet.urdf'
        env.add_object(pallet_urdf, pallet_pose, 'fixed')  # Add the pallet as a fixed object

        # Add cylinders to the environment
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.05, 0.05, 0.1)  # Size of the cylinder
        cylinder_poses = []  # List to store the initial poses of the cylinders
        for color_name in color_sequence:
            color = utils.COLORS[color_name]  # Get the RGB value for the color
            pose = self.get_random_pose(env, cylinder_size)  # Get a random pose for the cylinder
            replace = {'COLOR': color}  # Replacement dictionary for the URDF template
            cylinder_urdf = self.fill_template(cylinder_template, replace)  # Fill the URDF template with the color
            cylinder_id = env.add_object(cylinder_urdf, pose)  # Add the cylinder to the environment
            cylinder_poses.append(pose)  # Store the initial pose

        # Define the goals for each cylinder
        for idx, (color_name, target_position) in enumerate(zip(color_sequence, target_positions)):
            # Create a language goal for placing the cylinder
            language_goal = self.lang_template.format(color=color_name, position=idx+1)
            # Define the target pose for the cylinder, keeping the orientation same as the initial pose
            target_pose = [target_position, cylinder_poses[idx][1]]
            # Add the goal for the cylinder
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/len(color_sequence),
                          language_goal=language_goal)

        # The task is set up with all cylinders and the pallet in place, and goals defined for each cylinder.