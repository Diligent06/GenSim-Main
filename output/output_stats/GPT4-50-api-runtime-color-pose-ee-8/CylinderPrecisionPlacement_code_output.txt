import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderPrecisionPlacement(Task):
    """
    Arrange five colored cylinders in a specific pattern within a marked zone on the tabletop,
    ensuring each cylinder stands upright and matches its designated area by color.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to place 5 cylinders, so max_steps is set to twice that number
        self.ee = Suction  # Suction end-effector is needed to pick and place cylinders vertically

        # Language template for the task
        self.lang_template = "place the {color} cylinder in the designated area"
        self.task_completed_desc = "all cylinders placed correctly."

        # Additional initialization if needed
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and their colors
        n_cylinders = 5
        cylinder_colors = ['red', 'green', 'blue', 'yellow', 'purple']

        # Add the zone where cylinders will be placed
        zone_size = (0.3, 0.3, 0)  # Size of the zone
        zone_pose = self.get_random_pose(env, zone_size)  # Random pose for the zone
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')  # Add the zone to the environment

        # Add cylinders
        cylinders = []
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i in range(n_cylinders):
            # Define the size and pose of the cylinder
            size = (0.05, 0.05, 0.1)  # Diameter and height of the cylinder
            pose = self.get_random_pose(env, size)  # Random pose for the cylinder

            # Define the color and scale for the cylinder
            color = utils.COLORS[cylinder_colors[i]]  # Get the RGB color for the cylinder
            scale = [1, 1, 1]  # No scaling needed, use default size

            # Replace the placeholders in the URDF template
            replace = {'COLOR': color, 'SCALE': scale}

            # Generate the URDF for the cylinder with the specified color and scale
            urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment and store its ID
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append(cylinder_id)

        # Define the target poses for each cylinder within the zone
        # The cylinders should be placed upright, so we only need to specify the x, y positions
        # The z position will be the height of the cylinder above the zone, and the orientation will be upright
        targ_poses = []
        for i in range(n_cylinders):
            x = zone_pose[0][0] + (i - 2) * 0.1  # Spread the cylinders evenly along the x-axis within the zone
            y = zone_pose[0][1]  # Keep the y-axis the same as the center of the zone
            z = zone_pose[0][2] + size[2] / 2  # The z position is the height of the cylinder above the zone
            upright_orientation = (0, 0, 0, 1)  # Upright orientation quaternion
            targ_poses.append([(x, y, z), upright_orientation])

        # Add goals for each cylinder
        for i in range(n_cylinders):
            language_goal = self.lang_template.format(color=cylinder_colors[i])
            self.add_goal(objs=[cylinders[i]], matches=np.ones((1, 1)), targ_poses=[targ_poses[i]],
                          replace=False, rotations=False, metric='pose', params=None,
                          step_max_reward=1, language_goal=language_goal)

        # The task is set up with cylinders and goals, ready for the agent to execute