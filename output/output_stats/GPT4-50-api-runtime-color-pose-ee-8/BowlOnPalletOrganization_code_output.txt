import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlOnPalletOrganization(Task):
    """Arrange a set of four differently colored bowls in a 2x2 grid pattern on a pallet,
    with each bowl's color matching the designated corner zone color."""

    def __init__(self):
        super().__init__()
        self.max_steps = 8  # We expect to call self.add_goal twice, so we set max_steps to 4x2=8
        self.lang_template = "place the {color} bowl in the {color} zone on the pallet"
        self.task_completed_desc = "done organizing bowls on pallet."
        self.ee = Suction  # Use Suction end-effector to lift bowls
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define bowl colors and corresponding zone colors
        bowl_colors = ['red', 'green', 'blue', 'yellow']
        zone_colors = ['red', 'green', 'blue', 'yellow']
        np.random.shuffle(zone_colors)  # Shuffle zone colors to randomize the task

        # Add pallet
        pallet_size = (0.3, 0.3, 0.02)  # Size of the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Add bowls and zones
        bowl_size = (0.1, 0.1, 0.05)  # Size of the bowls
        zone_size = (0.15, 0.15, 0)  # Size of the zones
        bowls = []
        zones = []

        # Calculate grid positions on the pallet for bowls and zones
        grid_positions = [(0.1, 0.1, 0.05), (0.2, 0.1, 0.05),
                          (0.1, 0.2, 0.05), (0.2, 0.2, 0.05)]

        for i in range(4):
            # Add bowl
            bowl_color = utils.COLORS[bowl_colors[i]]
            bowl_pose = self.get_random_pose(env, bowl_size)
            bowl_id = env.add_object('bowl/bowl.urdf', bowl_pose, color=bowl_color)
            bowls.append(bowl_id)

            # Add zone
            zone_color = utils.COLORS[zone_colors[i]]
            zone_pose = utils.apply(pallet_pose, grid_positions[i])
            env.add_object('zone/zone.urdf', zone_pose, 'fixed', color=zone_color)
            zones.append(zone_pose)

        # Define goals for each bowl to be placed in the matching color zone
        for i, bowl_id in enumerate(bowls):
            # Find the index of the zone that matches the bowl color
            matching_zone_idx = zone_colors.index(bowl_colors[i])
            matching_zone_pose = zones[matching_zone_idx]

            # Define the language goal
            language_goal = self.lang_template.format(color=bowl_colors[i])

            # Add goal for the current bowl to be placed in the matching color zone
            self.add_goal(objs=[bowl_id],
                          matches=np.ones((1, 1)),
                          targ_poses=[matching_zone_pose],
                          replace=False,
                          rotations=True,
                          metric='pose',
                          params=None,
                          step_max_reward=1,  # Single goal, so max reward is 1
                          language_goal=language_goal)