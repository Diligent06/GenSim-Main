import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class TowerOfHanoiCylinders(Task):
    """Move a set of three differently sized and colored cylinders from one stand to another, following the Tower of Hanoi rules."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have three cylinders to move, and we might move each twice.
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector.
        self.lang_template = "move the {color} cylinder to the {target_stand} stand"
        self.task_completed_desc = "completed the tower of hanoi."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders.
        colors = ['red', 'green', 'blue']
        color_rgb = [utils.COLORS[color] for color in colors]

        # Define the sizes for the cylinders (small, medium, large).
        sizes = [(0.04, 0.04, 0.12), (0.05, 0.05, 0.10), (0.06, 0.06, 0.08)]

        # Add three stands.
        stand_urdf = 'stacking/stand.urdf'
        stand_size = (0.07, 0.07, 0.005)
        stands = []
        for i in range(3):
            stand_pose = self.get_random_pose(env, stand_size)
            env.add_object(stand_urdf, stand_pose, category='fixed')
            stands.append(stand_pose)

        # Add cylinders on the first stand.
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i in range(3):
            # Set the pose of the cylinder on top of the previous one.
            z_offset = sum(sizes[j][2] for j in range(i))  # Height of all cylinders below.
            cylinder_pose = (stands[0][0][0], stands[0][0][1], stands[0][0][2] + z_offset + sizes[i][2]/2), stands[0][1]
            
            # IMPORTANT: REPLACE THE TEMPLATE URDF with `fill_template`
            replace = {'COLOR': color_rgb[i], 'SIZE': sizes[i]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

        # Define the target poses for the cylinders on the second stand.
        target_poses = []
        for i in range(3):
            z_offset = sum(sizes[j][2] for j in range(i))  # Height of all cylinders below.
            target_pose = (stands[1][0][0], stands[1][0][1], stands[1][0][2] + z_offset + sizes[i][2]/2), stands[1][1]
            target_poses.append(target_pose)

        # Add goals for each cylinder to be moved to the second stand.
        for i in range(3):
            language_goal = self.lang_template.format(color=colors[i], target_stand="second")
            self.add_goal(objs=[cylinders[i]], matches=np.ones((1, 1)), targ_poses=[target_poses[i]], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/3, language_goal=language_goal)