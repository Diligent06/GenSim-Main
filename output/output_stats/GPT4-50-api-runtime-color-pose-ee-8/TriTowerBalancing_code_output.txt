import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class TriTowerBalancing(Task):
    """Construct three separate towers by stacking a red cylinder, a blue box, and a green block on top of each other in any order, ensuring each tower stands without toppling over within a marked zone on the tabletop."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have three towers to build, each potentially taking two steps (pick and place).
        self.lang_template = "stack a {object1}, a {object2}, and a {object3} on top of each other in the {zone_color} zone"
        self.task_completed_desc = "done constructing the tri-tower."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector.
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the colors and shapes of the objects to be used in the task.
        red_color = utils.COLORS['red']
        blue_color = utils.COLORS['blue']
        green_color = utils.COLORS['green']
        zone_color = utils.COLORS['indigo']  # Color for the zone where towers will be built.

        # Define the sizes of the objects.
        cylinder_size = (0.04, 0.04, 0.12)  # Diameter, Diameter, Height
        box_size = (0.04, 0.04, 0.04)  # Width, Depth, Height
        block_size = (0.04, 0.04, 0.04)  # Same as box, but different color.

        # Add the zone where the towers will be built.
        zone_size = (0.15, 0.15, 0)  # Width, Depth, Height (no height for zones)
        zone_pose = self.get_random_pose(env, zone_size)
        env.add_object('zone/zone.urdf', zone_pose, 'fixed', color=zone_color)

        # Add the red cylinder.
        cylinder_pose = self.get_random_pose(env, cylinder_size)
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_replace = {'DIM': cylinder_size, 'COLOR': red_color}
        cylinder_urdf = self.fill_template(cylinder_template, cylinder_replace)
        cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

        # Add the blue box.
        box_pose = self.get_random_pose(env, box_size)
        box_template = 'box/box-template.urdf'
        box_replace = {'DIM': box_size, 'COLOR': blue_color}
        box_urdf = self.fill_template(box_template, box_replace)
        box_id = env.add_object(box_urdf, box_pose)

        # Add the green block.
        block_pose = self.get_random_pose(env, block_size)
        block_urdf = 'stacking/block.urdf'
        block_id = env.add_object(block_urdf, block_pose, color=green_color)

        # Define the language goals for each tower.
        language_goal_1 = self.lang_template.format(object1='red cylinder', object2='blue box', object3='green block', zone_color='indigo')
        language_goal_2 = self.lang_template.format(object1='blue box', object2='green block', object3='red cylinder', zone_color='indigo')
        language_goal_3 = self.lang_template.format(object1='green block', object2='red cylinder', object3='blue box', zone_color='indigo')

        # Add goals for each tower. Each tower is a separate goal.
        # Note: The target poses are the same for all objects since they need to be stacked within the same zone.
        self.add_goal(objs=[cylinder_id, box_id, block_id], matches=np.ones((3, 1)), targ_poses=[zone_pose], replace=True,
                      rotations=True, metric='zone', params=[(zone_pose, zone_size)], step_max_reward=1/3, language_goal=language_goal_1)
        self.add_goal(objs=[box_id, block_id, cylinder_id], matches=np.ones((3, 1)), targ_poses=[zone_pose], replace=True,
                      rotations=True, metric='zone', params=[(zone_pose, zone_size)], step_max_reward=1/3, language_goal=language_goal_2)
        self.add_goal(objs=[block_id, cylinder_id, box_id], matches=np.ones((3, 1)), targ_poses=[zone_pose], replace=True,
                      rotations=True, metric='zone', params=[(zone_pose, zone_size)], step_max_reward=1/3, language_goal=language_goal_3)