import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedCylinderPyramid(Task):
    """Build a pyramid with a base of three colored cylinders, a middle layer of two, and a top layer of one, ensuring each layer consists of cylinders with matching color."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 calls to self.add_goal, so max_steps is twice that number
        self.lang_template = "build a {layer} layer of the pyramid with {color} cylinders"
        self.task_completed_desc = "done building the color-coded cylinder pyramid."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define cylinder size and URDF template
        cylinder_size = (0.04, 0.04, 0.08)  # (radius, radius, height)
        cylinder_template = 'cylinder/cylinder-template.urdf'

        # Define base stand size and URDF
        base_size = (0.15, 0.15, 0.005)  # (x, y, z)
        base_urdf = 'stacking/stand.urdf'
        base_pose = self.get_random_pose(env, base_size)
        env.add_object(base_urdf, base_pose, category='fixed')

        # Define colors for the cylinders
        colors = [utils.COLORS['red'], utils.COLORS['green'], utils.COLORS['blue']]

        # Add cylinders and store their IDs and initial poses
        cylinder_ids = []
        initial_poses = []
        for color in colors:
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)
            initial_poses.append(pose)

            # Fill the URDF template with the specific color and size
            replace = {'COLOR': color, 'SIZE': cylinder_size}
            urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinder_ids.append(cylinder_id)

        # Define target poses for the cylinders to form a pyramid
        # Base layer target poses (3 cylinders)
        base_layer_poses = [
            (base_pose[0][0] - 0.04, base_pose[0][1] - 0.04, 0.04),  # Left
            (base_pose[0][0], base_pose[0][1], 0.04),  # Center
            (base_pose[0][0] + 0.04, base_pose[0][1] + 0.04, 0.04)  # Right
        ]
        # Middle layer target poses (2 cylinders)
        middle_layer_poses = [
            (base_pose[0][0] - 0.02, base_pose[0][1] - 0.02, 0.12),  # Left
            (base_pose[0][0] + 0.02, base_pose[0][1] + 0.02, 0.12)  # Right
        ]
        # Top layer target pose (1 cylinder)
        top_layer_pose = [(base_pose[0][0], base_pose[0][1], 0.20)]  # Center top

        # Combine all target poses
        target_poses = base_layer_poses + middle_layer_poses + top_layer_pose

        # Add goals for each layer of the pyramid
        # Base layer goal
        self.add_goal(
            objs=cylinder_ids,
            matches=np.ones((3, 3)),
            targ_poses=[(pos, base_pose[1]) for pos in base_layer_poses],
            replace=False,
            rotations=True,
            metric='pose',
            params=None,
            step_max_reward=1 / 3,
            language_goal=self.lang_template.format(layer="base", color="red, green, and blue")
        )

        # Middle layer goal
        self.add_goal(
            objs=cylinder_ids,
            matches=np.ones((2, 2)),
            targ_poses=[(pos, base_pose[1]) for pos in middle_layer_poses],
            replace=False,
            rotations=True,
            metric='pose',
            params=None,
            step_max_reward=1 / 3,
            language_goal=self.lang_template.format(layer="middle", color="green and blue")
        )

        # Top layer goal
        self.add_goal(
            objs=cylinder_ids,
            matches=np.ones((1, 1)),
            targ_poses=[(pos, base_pose[1]) for pos in top_layer_pose],
            replace=False,
            rotations=True,
            metric='pose',
            params=None,
            step_max_reward=1 / 3,
            language_goal=self.lang_template.format(layer="top", color="blue")
        )