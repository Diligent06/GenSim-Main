import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderSorting(Task):
    """Pick up five colored cylinders and stack them in ascending order of height on the designated zone."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call add_goal 5 times, so we set max_steps to twice that number
        self.lang_template = "stack the {color} cylinder"
        self.task_completed_desc = "done sorting cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define cylinder sizes and colors
        cylinder_heights = np.linspace(0.05, 0.15, 5)  # Heights from 0.05 to 0.15 meters
        cylinder_colors = ['red', 'green', 'blue', 'yellow', 'purple']  # Cylinder colors

        # Add target zone
        zone_size = (0.15, 0.15, 0)  # Zone size (x, y, z)
        zone_pose = self.get_random_pose(env, zone_size)  # Get a random pose for the zone
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')  # Add the zone to the environment

        # Add cylinders
        cylinders = []
        for i in range(5):
            # Define cylinder size and color
            size = (0.05, 0.05, cylinder_heights[i])  # Cylinder diameter is 0.05, height varies
            color = utils.COLORS[cylinder_colors[i]]  # Get the RGB color for the cylinder

            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, size)

            # Define the URDF template and replacement values
            template = 'cylinder/cylinder-template.urdf'
            replace = {'SIZE': size, 'COLOR': color}

            # Fill the URDF template and add the object to the environment
            urdf = self.fill_template(template, replace)
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append((cylinder_id, size[2]))  # Store cylinder ID and height

        # Sort cylinders by height in ascending order
        cylinders.sort(key=lambda x: x[1])

        # Add goals for each cylinder
        for i, (cylinder_id, _) in enumerate(cylinders):
            # Define the language goal
            language_goal = self.lang_template.format(color=cylinder_colors[i])

            # Define the target pose (same x, y as the zone, with increasing z for stacking)
            target_pose = [(zone_pose[0][0], zone_pose[0][1], zone_pose[0][2] + i * 0.05), zone_pose[1]]

            # Add the goal for the current cylinder
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/5, language_goal=language_goal)

        # Note: We set replace=False because each cylinder has a unique target pose.
        # rotations=True allows the cylinder to be placed without a specific orientation.
        # step_max_reward is 1/5 because we have 5 cylinders to place, each step is equally rewarded.