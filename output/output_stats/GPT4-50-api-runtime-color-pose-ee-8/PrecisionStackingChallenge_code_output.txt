import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionStackingChallenge(Task):
    """Sequentially stack a red cylinder on top of a blue block and then balance a yellow ball on the red cylinder."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 objects to place, so max_steps is twice the number of add_goal calls
        self.lang_template = "stack the {object} on top of the {target}"
        self.task_completed_desc = "done precision stacking."
        self.ee = Suction  # Using Suction since we need to move objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the sizes for the objects
        block_size = (0.05, 0.05, 0.05)  # Size of the blue block
        cylinder_size = (0.02, 0.02, 0.08)  # Size of the red cylinder
        ball_size = (0.02, 0.02, 0.02)  # Size of the yellow ball

        # Define the colors for the objects
        block_color = utils.COLORS['blue']
        cylinder_color = utils.COLORS['red']
        ball_color = utils.COLORS['yellow']

        # Add blue block
        block_urdf = 'stacking/block.urdf'
        block_pose = self.get_random_pose(env, block_size)
        block_id = env.add_object(block_urdf, block_pose, color=block_color)

        # Add red cylinder
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_replace = {'COLOR': cylinder_color, 'SIZE': cylinder_size}
        cylinder_urdf = self.fill_template(cylinder_template, cylinder_replace)
        cylinder_pose = self.get_random_pose(env, cylinder_size)
        cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

        # Add yellow ball
        ball_template = 'ball/ball-template.urdf'
        ball_replace = {'COLOR': ball_color, 'SIZE': ball_size}
        ball_urdf = self.fill_template(ball_template, ball_replace)
        ball_pose = self.get_random_pose(env, ball_size)
        ball_id = env.add_object(ball_urdf, ball_pose)

        # Define target poses for stacking
        # The cylinder is stacked on the block, so its target pose is slightly above the block's pose
        cylinder_target_pose = (block_pose[0], utils.get_symmetric_quaternion(block_pose[1], np.pi/2))
        # The ball is balanced on the cylinder, so its target pose is on top of the cylinder
        ball_target_pose = ((cylinder_pose[0][0], cylinder_pose[0][1], cylinder_pose[0][2] + cylinder_size[2]), cylinder_pose[1])

        # Add goals
        # Goal 1: Stack the red cylinder on the blue block
        self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[cylinder_target_pose], replace=True,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3,
                      language_goal=self.lang_template.format(object="red cylinder", target="blue block"))

        # Goal 2: Balance the yellow ball on the red cylinder
        self.add_goal(objs=[ball_id], matches=np.ones((1, 1)), targ_poses=[ball_target_pose], replace=True,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3,
                      language_goal=self.lang_template.format(object="yellow ball", target="red cylinder"))