import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class MultiLevelCylinderStack(Task):
    """Create a multi-level stack by placing a green ball on top of each yellow cylinder,
    and then stack three such assemblies in ascending order of cylinder height on a pallet."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We will have 3 main goals, so max_steps is twice that
        self.lang_template = "stack the {object} on the {target}"
        self.task_completed_desc = "done stacking multi-level cylinder stack."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction gripper

    def reset(self, env):
        super().reset(env)

        # Add pallet.
        pallet_size = (0.3, 0.3, 0.02)  # x, y, z dimensions for the pallet size
        pallet_pose = self.get_random_pose(env, pallet_size)
        pallet_urdf = 'pallet/pallet.urdf'
        env.add_object(pallet_urdf, pallet_pose, 'fixed')

        # Define cylinder and ball sizes.
        cylinder_sizes = [(0.05, 0.05, 0.1), (0.05, 0.05, 0.15), (0.05, 0.05, 0.2)]
        ball_size = (0.05, 0.05, 0.05)  # Diameter of the ball

        # Add cylinders and balls.
        cylinders = []
        balls = []
        for i, size in enumerate(cylinder_sizes):
            # Add cylinder.
            cylinder_pose = self.get_random_pose(env, size)
            cylinder_template = 'cylinder/cylinder-template.urdf'
            replace = {'SIZE': size}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose, 'rigid', color=utils.COLORS['yellow'])
            cylinders.append((cylinder_id, cylinder_pose))

            # Add ball.
            ball_pose = self.get_random_pose(env, ball_size)
            ball_template = 'ball/ball-template.urdf'
            replace = {'SIZE': ball_size}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose, 'rigid', color=utils.COLORS['green'])
            balls.append((ball_id, ball_pose))

            # Define language goal for placing the ball on the cylinder.
            lang_goal = self.lang_template.format(object="green ball", target="yellow cylinder")

            # Add goal for placing the ball on top of the cylinder.
            # The target pose is the top center of the cylinder.
            targ_pose = (cylinder_pose[0], (0, 0, size[2] / 2 + ball_size[2] / 2))
            self.add_goal(objs=[ball_id], matches=np.ones((1, 1)), targ_poses=[targ_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/3, language_goal=lang_goal)

        # Sort cylinders by height in ascending order for stacking.
        cylinders.sort(key=lambda x: x[1][0][2])

        # Add goals for stacking the assemblies on the pallet in ascending order of cylinder height.
        for i, (cylinder_id, cylinder_pose) in enumerate(cylinders):
            # Define language goal for stacking on the pallet.
            lang_goal = self.lang_template.format(object="cylinder-ball assembly", target="pallet")

            # Calculate the target pose for the cylinder on the pallet.
            # We stack them next to each other along the x-axis of the pallet.
            targ_pose = ((pallet_pose[0][0] - pallet_size[0] / 2 + (i + 0.5) * (cylinder_sizes[i][0] * 2),
                          pallet_pose[0][1],
                          pallet_pose[0][2] + cylinder_sizes[i][2] / 2),
                         pallet_pose[1])

            # Add goal for stacking the cylinder.
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[targ_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/3, language_goal=lang_goal)