import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlBallSorting(Task):
    """Pick up and place five differently colored balls into their corresponding colored bowls."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to have 5 goals, so max_steps is set to twice the number of goals
        self.lang_template = "put the {color} ball in the {color} bowl"
        self.task_completed_desc = "done sorting all the balls into the corresponding bowls."
        self.ee = Suction  # Using Suction end-effector to pick up balls
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define colors for the balls and bowls
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = [f"{color} ball" for color in colors]

        # Add bowls and balls to the environment
        bowls = []
        balls = []
        for color in colors:
            # Add bowl
            bowl_size = (0.15, 0.15, 0.05)  # Size of the bowl
            bowl_pose = self.get_random_pose(env, bowl_size)
            bowl_urdf = 'bowl/bowl.urdf'
            bowl_id = env.add_object(bowl_urdf, bowl_pose, 'fixed', color=utils.COLORS[color])
            bowls.append((bowl_id, bowl_pose))

            # Add ball
            ball_size = (0.05, 0.05, 0.05)  # Size of the ball
            ball_pose = self.get_random_pose(env, ball_size)
            ball_template = 'ball/ball-template.urdf'
            replace = {'COLOR': utils.COLORS[color]}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append((ball_id, ball_pose))

        # Define goals for each ball to be placed in the matching colored bowl
        for ball, bowl in zip(balls, bowls):
            ball_id, _ = ball
            _, bowl_pose = bowl
            color = colors[balls.index(ball)]  # Get the color name for the language template
            language_goal = self.lang_template.format(color=color)
            self.add_goal(objs=[ball_id], matches=np.ones((1, 1)), targ_poses=[bowl_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1,
                          language_goal=language_goal)