import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlCylinderSequencing(Task):
    """Arrange a sequence of cylinders of different colors into a specific order within a large bowl."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we have 5 cylinders to sequence, 2 steps per cylinder
        self.lang_template = "put the {color} cylinder in the bowl in the {position} position"
        self.task_completed_desc = "done sequencing cylinders."
        self.ee = Suction  # Use Suction end-effector to pick and place cylinders
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the color sequence for the cylinders
        color_sequence = ['red', 'green', 'blue', 'yellow', 'purple']
        color_names = ['red', 'green', 'blue', 'yellow', 'purple']
        n_cylinders = len(color_sequence)

        # Add a large bowl to the environment
        bowl_size = (0.18, 0.18, 0.06)  # x, y, z dimensions for the bowl size
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_pose = self.get_random_pose(env, bowl_size)
        env.add_object(bowl_urdf, bowl_pose, 'fixed')

        # Add cylinders of different colors into the environment
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.05, 0.05, 0.1)  # x, y, z dimensions for the cylinder size
        cylinders = []
        for i, color_name in enumerate(color_sequence):
            # Generate the color for the cylinder
            color = utils.COLORS[color_name]

            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, cylinder_size)

            # Replace the color in the URDF template
            replace = {'COLOR': color}

            # IMPORTANT: REPLACE THE TEMPLATE URDF
            urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, pose)
            cylinders.append(cylinder_id)

        # Define the target poses for each cylinder in the bowl
        # Assuming the bowl's center is the target for all cylinders
        bowl_center = bowl_pose[0]
        target_poses = [(bowl_center, bowl_pose[1])] * n_cylinders

        # Add goals for each cylinder
        for i, cylinder_id in enumerate(cylinders):
            # Define the language goal for placing the cylinder
            language_goal = self.lang_template.format(color=color_names[i], position=utils.ordinal(i + 1))

            # Add the goal for the cylinder
            self.add_goal(
                objs=[cylinder_id],
                matches=np.int32([[1]]),
                targ_poses=[target_poses[i]],
                replace=False,
                rotations=False,  # Cylinders do not need to be rotated
                metric='pose',
                params=None,
                step_max_reward=1 / n_cylinders,
                language_goal=language_goal
            )

# Note: The code assumes that the cylinders are to be placed in the center of the bowl.
# If the cylinders need to be placed in a specific sequence within the bowl, additional logic is needed.