import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class MultiLevelBlockStacking(Task):
    """Create a multi-level structure by placing a large block on the table as a foundation,
    then stacking a bowl upside down on the large block, and finally balancing a cylinder
    standing upright on the inverted bowl."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 goals, so max_steps is twice that number
        self.lang_template = "place the {object} on the {location}"
        self.task_completed_desc = "done stacking multi-level structure."
        self.ee = Suction  # We need to move objects on the Z axis, so we use Suction

    def reset(self, env):
        super().reset(env)

        # Add large block as foundation.
        block_size = (0.15, 0.15, 0.05)  # Size of the block
        block_pose = self.get_random_pose(env, block_size)  # Get a random pose for the block
        block_color = utils.COLORS['blue']  # Color of the block
        block_urdf = 'box/box-template.urdf'  # URDF file for the block
        block_id = env.add_object(block_urdf, block_pose, 'rigid', color=block_color)  # Add block to the environment

        # Add bowl to be stacked on the block.
        bowl_size = (0.12, 0.12, 0.06)  # Size of the bowl
        bowl_pose = self.get_random_pose(env, bowl_size)  # Get a random pose for the bowl
        bowl_color = utils.COLORS['green']  # Color of the bowl
        bowl_urdf = 'bowl/bowl.urdf'  # URDF file for the bowl
        bowl_id = env.add_object(bowl_urdf, bowl_pose, 'rigid', color=bowl_color)  # Add bowl to the environment

        # Add cylinder to be balanced on the inverted bowl.
        cylinder_size = (0.05, 0.05, 0.1)  # Size of the cylinder
        cylinder_pose = self.get_random_pose(env, cylinder_size)  # Get a random pose for the cylinder
        cylinder_color = utils.COLORS['red']  # Color of the cylinder
        cylinder_urdf = 'cylinder/cylinder-template.urdf'  # URDF file for the cylinder
        cylinder_id = env.add_object(cylinder_urdf, cylinder_pose, 'rigid', color=cylinder_color)  # Add cylinder to the environment

        # Define target poses for each object.
        # The block remains on the table, so its target pose is its initial pose.
        block_target_pose = block_pose

        # The bowl should be upside down on the block, so we adjust its orientation.
        bowl_target_pose = (block_pose[0], (0, 0, 1, 0))  # Quaternion for upside down orientation

        # The cylinder should be upright on the inverted bowl.
        # We calculate its position based on the bowl's target pose.
        cylinder_target_pose = ((bowl_target_pose[0][0], bowl_target_pose[0][1], bowl_target_pose[0][2] + bowl_size[2] + cylinder_size[2] / 2), (0, 0, 0, 1))

        # Add goals for each object.
        # Goal 1: Place the block on the table.
        self.add_goal(objs=[block_id], matches=np.ones((1, 1)), targ_poses=[block_target_pose], replace=True,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3,
                      language_goal=self.lang_template.format(object="blue block", location="table"))

        # Goal 2: Stack the bowl upside down on the block.
        self.add_goal(objs=[bowl_id], matches=np.ones((1, 1)), targ_poses=[bowl_target_pose], replace=True,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3,
                      language_goal=self.lang_template.format(object="green bowl", location="blue block"))

        # Goal 3: Balance the cylinder upright on the inverted bowl.
        self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[cylinder_target_pose], replace=True,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3,
                      language_goal=self.lang_template.format(object="red cylinder", location="green bowl"))