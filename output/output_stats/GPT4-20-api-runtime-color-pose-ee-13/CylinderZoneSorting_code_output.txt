import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderZoneSorting(Task):
    """Pick up five differently colored cylinders and place them into a corresponding colored zone amidst other neutral-colored cylinders."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call add_goal 5 times, so max_steps is set to twice that number
        self.lang_template = "put the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done sorting cylinders."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and zones
        n_cylinders = 5
        n_zones = n_cylinders

        # Define cylinder size
        cylinder_size = (0.04, 0.04, 0.1)  # (radius, radius, height)

        # Define zone size
        zone_size = (0.15, 0.15, 0)  # (x, y, z)

        # Define colors for cylinders and zones
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        neutral_colors = ['gray', 'silver', 'white', 'black', 'indigo']

        # Add zones with corresponding colors
        zone_poses = []
        for i in range(n_zones):
            zone_pose = self.get_random_pose(env, zone_size)
            zone_urdf = 'zone/zone.urdf'
            env.add_object(zone_urdf, zone_pose, 'fixed', color=utils.COLORS[colors[i]])
            zone_poses.append(zone_pose)

        # Add cylinders with corresponding colors
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i in range(n_cylinders):
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': utils.COLORS[colors[i]]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            # Add goal for each cylinder
            language_goal = self.lang_template.format(color=colors[i])
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_poses[i]],
                          replace=False, rotations=False, metric='zone', params=[(zone_poses[i], zone_size)],
                          step_max_reward=1/n_cylinders, language_goal=language_goal)

        # Add neutral-colored cylinders as distractors
        for color in neutral_colors:
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': utils.COLORS[color]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            env.add_object(cylinder_urdf, cylinder_pose)

        # Set the language goal for the entire task
        self.lang_goals = [self.lang_template.format(color=color) for color in colors]