import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderTowerBalance(Task):
    """Stack five differently colored cylinders on top of each other in ascending order of diameter onto a small stand without knocking over the tower."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We will have 5 goals, so max_steps is set to twice the number of goals
        self.lang_template = "stack the {color} cylinder on top"
        self.task_completed_desc = "done stacking the cylinder tower."
        self.ee = Suction  # Use Suction end-effector to move cylinders on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define cylinder colors and diameters
        colors = ['red', 'orange', 'yellow', 'green', 'blue']
        diameters = [0.08, 0.07, 0.06, 0.05, 0.04]  # Ascending order of diameter

        # Add base stand
        base_size = (0.1, 0.1, 0.02)  # Size of the stand
        base_urdf = 'stacking/stand.urdf'
        base_pose = self.get_random_pose(env, base_size)
        env.add_object(base_urdf, base_pose, category='fixed')

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_poses = []
        cylinder_ids = []
        for i in range(5):
            # Generate cylinder size and pose
            size = (diameters[i], diameters[i], 0.1)  # Diameter and height of the cylinder
            pose = self.get_random_pose(env, size)
            color = utils.COLORS[colors[i]]

            # Fill in the cylinder URDF template
            replace = {'SIZE': size, 'COLOR': color}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinder_ids.append(cylinder_id)
            cylinder_poses.append(pose)

        # Add goals for stacking cylinders in ascending order of diameter
        for i in range(5):
            # Define the target pose for the cylinder
            # The x, y coordinates are the same as the base's, with an increment in z for each cylinder
            z_offset = base_size[2] + (i * size[2])  # Calculate the z offset for each cylinder
            targ_pose = (base_pose[0], (0, 0, z_offset), base_pose[1])

            # Define the language goal
            language_goal = self.lang_template.format(color=colors[i])

            # Add goal for the current cylinder
            self.add_goal(objs=[cylinder_ids[i]], matches=np.ones((1, 1)), targ_poses=[targ_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/5,
                          language_goal=language_goal)

# Note: The code assumes that the `fill_template` method is available to fill in the URDF template for cylinders.
# The `get_random_pose` method is used to get a random initial pose for the objects within the workspace bounds.
# The `add_goal` method is used to define the task goals, with `step_max_reward` set to 1/5 since there are 5 goals.