import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class TowerOfHanoiVariation(Task):
    """Arrange three differently-sized cylinders in ascending order of size onto a stand,
    with the largest at the bottom and the smallest on top, while maintaining upright orientation."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 goals and we set max_steps to twice the number of goals
        self.lang_template = "place the {size} cylinder on the {position} position"
        self.task_completed_desc = "done arranging the cylinders."
        self.ee = Suction  # Using Suction because we need to move objects on the Z axis

    def reset(self, env):
        super().reset(env)

        # Define the sizes for the cylinders (small, medium, large)
        sizes = [(0.04, 0.04, 0.08), (0.06, 0.06, 0.12), (0.08, 0.08, 0.16)]
        colors = ['red', 'green', 'blue']  # Assign colors to each cylinder for visual distinction
        positions = ['bottom', 'middle', 'top']  # Positions on the stand

        # Add stand
        stand_size = (0.1, 0.1, 0.005)
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_poses = []
        for i, size in enumerate(sizes):
            # Generate a random pose for the cylinder
            pose = self.get_random_pose(env, size)
            # Replace the template URDF with the specific size and color for the cylinder
            replace = {'SIZE': size, 'COLOR': utils.COLORS[colors[i]]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinder_poses.append((pose, cylinder_id))

        # Sort cylinders by size (ascending order)
        cylinder_poses.sort(key=lambda x: x[0][0][2])  # Sort by z-size (height)

        # Add goals for each cylinder
        for i, (pose, cylinder_id) in enumerate(cylinder_poses):
            # Define the target pose on the stand for the cylinder
            # The x, y coordinates are the same as the stand, and the z coordinate is offset by the cylinder height
            target_z = stand_pose[0][2] + sum([size[2] for size in sizes[:i+1]])
            target_pose = [(stand_pose[0][0], stand_pose[0][1], target_z), stand_pose[1]]
            # Define the language goal
            language_goal = self.lang_template.format(size=colors[i], position=positions[i])
            # Add the goal to the task
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/3, language_goal=language_goal)

# Instantiate the task
task = TowerOfHanoiVariation()