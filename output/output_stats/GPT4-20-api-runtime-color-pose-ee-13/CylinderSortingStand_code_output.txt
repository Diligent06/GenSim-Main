import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderSortingStand(Task):
    """Pick up five colored cylindrical objects and place them in ascending height order on a stand with corresponding colored slots."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call self.add_goal 5 times, so we set max_steps to twice that number
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector
        self.lang_template = "place the {color} cylinder in the {color} slot on the stand"
        self.task_completed_desc = "done sorting cylinders on the stand."

    def reset(self, env):
        super().reset(env)

        # Define the colors and sizes for the cylinders
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        heights = [0.08, 0.10, 0.12, 0.14, 0.16]  # Ascending order of heights

        # Add the stand
        stand_size = (0.05, 0.25, 0.05)  # Size of the stand
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i in range(5):
            # Generate a random pose for the cylinder
            cylinder_size = (0.02, 0.02, heights[i])  # Diameter, Diameter, Height
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            color_rgb = utils.COLORS[colors[i]]

            # Replace placeholders in the URDF template
            replace = {
                'DIM': cylinder_size,
                'HALF': (cylinder_size[0] / 2, cylinder_size[1] / 2, cylinder_size[2] / 2),
                'COLOR': color_rgb
            }
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append((cylinder_id, colors[i], cylinder_size[2]))  # Store ID, color, and height

        # Sort cylinders by height
        cylinders.sort(key=lambda x: x[2])

        # Add goals for each cylinder
        for i, (cylinder_id, color, _) in enumerate(cylinders):
            # Define the target pose for the cylinder on the stand
            # We use the stand's pose and add an offset for each slot
            slot_offset = (0.04 * i - 0.08, 0, 0.03)  # Offset for each slot on the stand
            target_pose = utils.apply(stand_pose, slot_offset)

            # Define the language goal
            language_goal = self.lang_template.format(color=color)

            # Add the goal
            self.add_goal(
                objs=[cylinder_id],
                matches=np.int32([[1]]),
                targ_poses=[target_pose],
                replace=False,
                rotations=False,  # Cylinders don't need to be rotated
                metric='pose',
                params=None,
                step_max_reward=1 / 5,  # Equal reward for each cylinder
                language_goal=language_goal
            )