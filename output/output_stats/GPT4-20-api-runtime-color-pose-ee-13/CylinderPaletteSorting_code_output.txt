import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderPaletteSorting(Task):
    """Sort five differently colored cylindrical objects by placing them into the corresponding colored zones marked on a palette."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to call self.add_goal 5 times, so we set max_steps to twice that number.
        self.ee = Suction  # We use Suction because we need to move objects on the Z axis to place them upright.
        self.lang_template = "put the {color} cylinder in the {color} zone"
        self.task_completed_desc = "done sorting cylinders."

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and their colors.
        n_cylinders = 5
        cylinder_colors = ['red', 'blue', 'green', 'yellow', 'purple']

        # Add the palette to the environment.
        palette_size = (0.3, 0.3, 0.02)  # x, y, z dimensions for the palette size
        palette_pose = self.get_random_pose(env, palette_size)
        palette_urdf = 'pallet/pallet.urdf'
        env.add_object(palette_urdf, palette_pose, category='fixed')

        # Add zones on the palette for each cylinder.
        zone_urdf = 'zone/zone.urdf'
        zone_size = (0.05, 0.05, 0)  # x, y, z dimensions for the zone size
        zone_poses = []
        for i in range(n_cylinders):
            # Generate a random pose for the zone within the bounds of the palette.
            zone_pose = self.get_random_pose(env, zone_size)
            zone_color = utils.COLORS[cylinder_colors[i]]  # Get the RGB color for the zone.
            env.add_object(zone_urdf, zone_pose, color=zone_color, category='fixed')
            zone_poses.append(zone_pose)

        # Add cylinders to the environment.
        cylinder_template = 'cylinder/cylinder-template.urdf'
        for i in range(n_cylinders):
            # Generate a random pose for the cylinder.
            cylinder_size = (0.02, 0.02, 0.1)  # x, y, z dimensions for the cylinder size
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_color = utils.COLORS[cylinder_colors[i]]  # Get the RGB color for the cylinder.
            replace = {'COLOR': cylinder_color}
            # Replace the template URDF with the color of the cylinder.
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

            # Define the language goal for placing the cylinder in the correct zone.
            language_goal = self.lang_template.format(color=cylinder_colors[i])

            # Add the goal for the cylinder to be placed in the corresponding zone.
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[zone_poses[i]], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1,
                          language_goal=language_goal)

        # The task is set up with cylinders and corresponding zones.