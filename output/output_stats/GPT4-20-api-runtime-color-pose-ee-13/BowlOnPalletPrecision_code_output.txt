import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class BowlOnPalletPrecision(Task):
    """Place a set of five colored bowls upside down in a straight line on a pallet,
    ensuring that each bowl is precisely centered and aligned with the corresponding
    colored marks on the pallet surface."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We have 5 bowls to place, so 10 steps should be sufficient
        self.ee = Suction  # Using Suction end-effector to lift the bowls on Z axis
        self.lang_template = "place the {color} bowl on the matching mark on the pallet"
        self.task_completed_desc = "done placing all bowls on the pallet."

    def reset(self, env):
        super().reset(env)

        # Define the colors for the bowls
        bowl_colors = ['red', 'green', 'blue', 'orange', 'yellow']
        # Define the size of the bowls
        bowl_size = (0.1, 0.1, 0.04)  # (x, y, z) dimensions

        # Add pallet to the environment
        pallet_size = (0.6, 0.4, 0.02)  # (x, y, z) dimensions
        pallet_pose = self.get_random_pose(env, pallet_size)
        pallet_urdf = 'pallet/pallet.urdf'
        env.add_object(pallet_urdf, pallet_pose, 'fixed')

        # Add bowls and corresponding lines on the pallet
        bowls = []
        for i, color in enumerate(bowl_colors):
            # Add bowl
            bowl_pose = self.get_random_pose(env, bowl_size)
            bowl_urdf = 'bowl/bowl.urdf'
            bowl_color = utils.COLORS[color]  # Get the RGB values for the bowl color
            bowl_id = env.add_object(bowl_urdf, bowl_pose, color=bowl_color)
            bowls.append(bowl_id)

            # Add line on the pallet for the bowl to align with
            line_template = 'line/single-green-line-template.urdf'
            line_pose = (pallet_pose[0][0] + i * 0.12 - 0.24, pallet_pose[0][1], 0.01)  # Offset each line
            line_urdf = self.fill_template(line_template, {'COLOR': utils.COLORS['green']})
            env.add_object(line_urdf, (line_pose, pallet_pose[1]), 'fixed')

            # Define the target pose for the bowl on the pallet
            # The bowl should be placed upside down, so we need to adjust the z-coordinate and rotation
            target_pose = (line_pose, (0, 0, 0, 1))  # No rotation needed, keep it upright

            # Add goal for placing the bowl on the corresponding line
            language_goal = self.lang_template.format(color=color)
            self.add_goal(objs=[bowl_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/5,
                          language_goal=language_goal)

        # Set the task description
        self.lang_goals = [self.lang_template.format(color=color) for color in bowl_colors]