import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderPrecisionStacking(Task):
    """Stack three differently colored cylinders on top of each other in a specified order."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We have 3 goals and we set max_steps to twice the number of goals
        self.ee = Suction  # Use Suction end-effector to move objects on the Z axis
        self.lang_template = "stack the {color} cylinder on top of the {base_color} one"
        self.task_completed_desc = "done stacking cylinders."

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders
        colors = ['red', 'green', 'blue']
        color_names = ['red', 'green', 'blue']
        np.random.shuffle(colors)  # Shuffle colors to randomize the order

        # Define sizes for the cylinders (bottom to top: large to small)
        sizes = [(0.04, 0.04, 0.08), (0.03, 0.03, 0.06), (0.02, 0.02, 0.04)]

        # Add flat zone area where cylinders will be stacked
        zone_size = (0.15, 0.15, 0)  # Flat zone size
        zone_pose = self.get_random_pose(env, zone_size)  # Get a random pose for the zone
        env.add_object('zone/zone.urdf', zone_pose, 'fixed')  # Add zone to the environment

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_poses = []
        cylinder_ids = []
        for i in range(3):
            # Get a random pose for the cylinder
            pose = self.get_random_pose(env, sizes[i])
            # Set the color for the cylinder
            color = utils.COLORS[colors[i]]
            # Replace the template URDF with the specific cylinder size and color
            replace = {'SIZE': sizes[i], 'COLOR': color}
            urdf = self.fill_template(cylinder_template, replace)
            # Add cylinder to the environment and store its ID and pose
            cylinder_id = env.add_object(urdf, pose)
            cylinder_ids.append(cylinder_id)
            cylinder_poses.append(pose)

        # Add goals for stacking the cylinders
        # Bottom cylinder
        self.add_goal(objs=[cylinder_ids[0]], matches=np.int32([[1]]),
                      targ_poses=[zone_pose], replace=False, rotations=True,
                      metric='pose', params=None, step_max_reward=1,
                      language_goal=self.lang_template.format(color=color_names[0], base_color='zone'))

        # Middle cylinder
        self.add_goal(objs=[cylinder_ids[1]], matches=np.int32([[1]]),
                      targ_poses=[(zone_pose[0], zone_pose[1])], replace=False, rotations=True,
                      metric='pose', params=None, step_max_reward=1,
                      language_goal=self.lang_template.format(color=color_names[1], base_color=color_names[0]))

        # Top cylinder
        self.add_goal(objs=[cylinder_ids[2]], matches=np.int32([[1]]),
                      targ_poses=[(zone_pose[0], zone_pose[1])], replace=False, rotations=True,
                      metric='pose', params=None, step_max_reward=1,
                      language_goal=self.lang_template.format(color=color_names[2], base_color=color_names[1]))