import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionContainerFilling(Task):
    """Sequentially pick up a set of five differently colored balls and place them into a small box with corresponding color-coded divisions, ensuring precise alignment within each section."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We have 5 balls to place, so 10 steps should be sufficient
        self.lang_template = "put the {color} ball in the {color} section of the box"
        self.task_completed_desc = "done precision container filling."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define colors for the balls
        ball_colors = ['red', 'green', 'blue', 'yellow', 'purple']
        np.random.shuffle(ball_colors)  # Shuffle colors to ensure randomness

        # Define the size of the balls
        ball_size = (0.04, 0.04, 0.04)  # Diameter of the balls

        # Define the size and pose of the container box
        box_size = (0.2, 0.1, 0.05)  # Size of the box
        box_pose = self.get_random_pose(env, box_size)  # Random pose for the box

        # Add container box with color-coded divisions
        container_template = 'box/box-template.urdf'
        replace = {'DIM': box_size, 'HALF': (box_size[0] / 2, box_size[1] / 2, box_size[2] / 2)}
        container_urdf = self.fill_template(container_template, replace)
        env.add_object(container_urdf, box_pose, 'fixed')

        # Add balls
        balls = []
        ball_template = 'ball/ball-template.urdf'
        for color in ball_colors:
            # Get a random pose for the ball
            ball_pose = self.get_random_pose(env, ball_size)
            replace = {'COLOR': utils.COLORS[color]}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append((ball_id, color))

        # Define target poses for each ball within the corresponding section of the box
        section_width = box_size[0] / len(ball_colors)
        target_poses = []
        for i, color in enumerate(ball_colors):
            # Calculate the center of each section
            section_center_x = box_pose[0][0] - box_size[0] / 2 + section_width * (i + 0.5)
            section_center_y = box_pose[0][1]
            section_center_z = box_pose[0][2] + ball_size[2] / 2  # Place the ball on top of the box
            target_pose = [(section_center_x, section_center_y, section_center_z), (0, 0, 0, 1)]  # No rotation needed
            target_poses.append(target_pose)

        # Add goals for each ball
        for (ball_id, color), target_pose in zip(balls, target_poses):
            language_goal = self.lang_template.format(color=color)
            self.add_goal(objs=[ball_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1 / len(balls),
                          language_goal=language_goal)

# Instantiate the task
task = PrecisionContainerFilling()