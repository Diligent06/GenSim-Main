import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class PrecisionPalletStacking(Task):
    """Stack five differently colored boxes in a specific color sequence on a single spot on the pallet."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We expect to stack 5 boxes, so 10 steps should be sufficient
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

        # Define the language template and task completion description
        self.lang_template = "stack the {color} box on the pallet"
        self.task_completed_desc = "done precision pallet stacking."

    def reset(self, env):
        super().reset(env)

        # Define the sequence of colors for the boxes to be stacked
        color_sequence = ['red', 'blue', 'green', 'yellow', 'purple']
        box_size = (0.05, 0.05, 0.05)  # Define a standard size for all boxes

        # Add the pallet to the environment
        pallet_size = (0.3, 0.3, 0.02)  # Define the size of the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)  # Get a random pose for the pallet
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')  # Add the pallet as a fixed object

        # Initialize an empty list to store the IDs of the boxes
        box_ids = []

        # Add boxes to the environment
        for color_name in color_sequence:
            # Get the color RGB values using the provided utility function
            color = utils.COLORS[color_name]

            # Get a random pose for the box
            box_pose = self.get_random_pose(env, box_size)

            # Fill in the box template with the specific color and size
            box_template = 'box/box-template.urdf'
            replace = {'COLOR': color, 'SIZE': box_size}
            box_urdf = self.fill_template(box_template, replace)

            # Add the box to the environment and store its ID
            box_id = env.add_object(box_urdf, box_pose)
            box_ids.append(box_id)

            # Define the language goal for this box
            language_goal = self.lang_template.format(color=color_name)

            # The target pose for the box is on the pallet with the same x, y coordinates but with increasing z
            target_pose = (pallet_pose[0], pallet_pose[1])  # Use the pallet's pose but ignore its orientation
            target_pose[0][2] += 0.05 * len(box_ids)  # Increase the z-coordinate for each box stacked

            # Add the goal for this box
            self.add_goal(objs=[box_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/len(color_sequence),
                          language_goal=language_goal)

        # Set the task to be completed once all boxes are stacked in the correct sequence
        self.max_steps = len(box_ids) * 2  # Allow two steps per box to provide some leeway