import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class ColorCodedCylinderAlignment(Task):
    """
    Arrange a set of three differently colored cylinders on a corresponding set of color-matched lines drawn on the tabletop,
    ensuring each cylinder is centered on its respective line.
    """

    def __init__(self):
        super().__init__()
        self.max_steps = 6  # We expect to have 3 goals, so max_steps is twice that number
        self.lang_template = "place the {color} cylinder on the {color} line"
        self.task_completed_desc = "done aligning cylinders."
        self.ee = Suction  # Suction end-effector is needed to lift cylinders

    def reset(self, env):
        super().reset(env)

        # Define cylinder and line sizes
        cylinder_size = (0.05, 0.05, 0.15)  # (radius, radius, height)
        line_size = (0.005, 0.5, 0.005)  # (width, length, height)

        # Define colors for the cylinders and corresponding lines
        colors = ['red', 'green', 'blue']
        color_names = ['red', 'green', 'blue']

        # Add lines and cylinders to the environment
        lines = []
        cylinders = []
        for color_name in color_names:
            # Add line
            line_template = 'line/single-green-line-template.urdf'
            line_pose = self.get_random_pose(env, line_size)
            replace = {'COLOR': utils.COLORS[color_name], 'HALF': (line_size[0] / 2, line_size[1] / 2, line_size[2] / 2)}
            line_urdf = self.fill_template(line_template, replace)
            env.add_object(line_urdf, line_pose, 'fixed')
            lines.append(line_pose)

            # Add cylinder
            cylinder_template = 'cylinder/cylinder-template.urdf'
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'COLOR': utils.COLORS[color_name], 'SIZE': cylinder_size}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

        # Define goals for each cylinder to be placed on the matching color line
        for i, color_name in enumerate(color_names):
            language_goal = self.lang_template.format(color=color_name)
            # The target pose is the same as the line's pose but with the cylinder's height as the z-coordinate
            target_pose = (lines[i][0], lines[i][1])
            self.add_goal(objs=[cylinders[i]], matches=np.int32([[1]]), targ_poses=[target_pose], replace=False,
                          rotations=False, metric='pose', params=None, step_max_reward=1/3,
                          language_goal=language_goal)

        # Note: rotations are set to False because we don't need to rotate the cylinders to align them on the lines