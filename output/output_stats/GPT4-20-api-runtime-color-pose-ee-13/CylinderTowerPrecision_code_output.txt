import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderTowerPrecision(Task):
    """Stack five differently colored cylinders on top of each other in a specific color order onto a stand, ensuring precise alignment with the center of the stand without toppling over."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # We have 5 cylinders to stack, so 10 steps should be sufficient
        self.lang_template = "stack the {color} cylinder"
        self.task_completed_desc = "done stacking the cylinder tower."
        self.ee = Suction  # We need to move objects on the Z axis, so we use the Suction end-effector

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders in the specific order they need to be stacked
        cylinder_colors = ['red', 'green', 'blue', 'yellow', 'purple']
        cylinder_color_values = [utils.COLORS[color] for color in cylinder_colors]

        # Add the stand onto which the cylinders will be stacked
        stand_size = (0.05, 0.05, 0.005)  # Size of the stand
        stand_urdf = 'stacking/stand.urdf'
        stand_pose = self.get_random_pose(env, stand_size)
        env.add_object(stand_urdf, stand_pose, category='fixed')

        # Add cylinders
        cylinder_size = (0.04, 0.04, 0.08)  # Diameter and height of the cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_poses = []
        cylinders = []

        for i, color in enumerate(cylinder_color_values):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_poses.append(cylinder_pose)

            # Fill the URDF template with the specific cylinder size and color
            replace = {'SIZE': cylinder_size, 'COLOR': color}
            cylinder_urdf = self.fill_template(cylinder_template, replace)

            # Add the cylinder to the environment
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

            # Define the language goal for stacking this cylinder
            language_goal = self.lang_template.format(color=cylinder_colors[i])

            # The target pose is directly above the center of the stand, with increasing z for each cylinder
            target_pose = (stand_pose[0], stand_pose[1])  # Use the stand's x, y position and orientation
            target_pose[0][2] += (i + 1) * cylinder_size[2]  # Increment z by the height of one cylinder

            # Add the goal for this cylinder
            self.add_goal(objs=[cylinder_id], matches=np.int32([[1]]), targ_poses=[target_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1 / len(cylinders),
                          language_goal=language_goal)

        # The task is to stack the cylinders in the specific order defined by cylinder_colors
        # Each cylinder must be placed precisely on top of the previous one