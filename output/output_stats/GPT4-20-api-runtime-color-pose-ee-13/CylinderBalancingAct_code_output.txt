import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
from cliport.tasks.grippers import Suction

class CylinderBalancingAct(Task):
    """Arrange a series of colored cylinders on a flat box according to the sequence of colored lines on its surface without letting them fall off."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Assuming we have 5 cylinders to place, 2 steps per cylinder
        self.ee = Suction  # Suction is needed to lift the cylinders in Z axis
        self.lang_template = "place the {color} cylinder on the {color} line"
        self.task_completed_desc = "done arranging the cylinders."

    def reset(self, env):
        super().reset(env)

        # Define the colors for the cylinders and lines
        cylinder_colors = ['red', 'blue', 'green', 'yellow', 'purple']
        line_colors = ['green', 'red', 'purple', 'yellow', 'blue']  # Sequence on the box

        # Add the flat box
        box_size = (0.3, 0.3, 0.01)  # x, y, z dimensions for the box
        box_pose = self.get_random_pose(env, box_size)
        box_template = 'box/box-template.urdf'
        replace = {'DIM': box_size, 'HALF': (box_size[0] / 2, box_size[1] / 2, box_size[2] / 2)}
        box_urdf = self.fill_template(box_template, replace)
        env.add_object(box_urdf, box_pose, 'fixed')

        # Add colored lines to the box
        line_template = 'line/single-green-line-template.urdf'
        for i, color in enumerate(line_colors):
            line_urdf = self.fill_template(line_template, {'COLOR': utils.COLORS[color]})
            # Calculate line pose based on box pose and offset
            line_x = box_pose[0][0] - box_size[0] / 2 + box_size[0] * (i + 1) / (len(line_colors) + 1)
            line_pose = ((line_x, box_pose[0][1], box_pose[0][2]), box_pose[1])
            env.add_object(line_urdf, line_pose, 'fixed')

        # Add cylinders
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.02, 0.02, 0.08)  # x, y, z dimensions for the cylinder
        for color in cylinder_colors:
            # Generate a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'DIM': cylinder_size, 'COLOR': utils.COLORS[color]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)

            # Define the target pose for the cylinder on the corresponding line
            target_idx = line_colors.index(color)
            target_x = box_pose[0][0] - box_size[0] / 2 + box_size[0] * (target_idx + 1) / (len(line_colors) + 1)
            target_pose = ((target_x, box_pose[0][1], box_pose[0][2] + cylinder_size[2] / 2), box_pose[1])

            # Add goal for placing the cylinder on the line
            language_goal = self.lang_template.format(color=color)
            self.add_goal(objs=[cylinder_id], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1 / len(cylinder_colors),
                          language_goal=language_goal)

        # Set the task to be completed after placing all cylinders
        self.max_steps = len(cylinder_colors) * 2